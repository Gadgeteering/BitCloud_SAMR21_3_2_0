###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:40:30
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\common\clusters\src\haClusters.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\common\clusters\src\haClusters.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\haClusters.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\haClusters.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\common\clusters\src\haClusters.c
      1          /**************************************************************************//**
      2            \file haClusters.c
      3          
      4            \brief
      5              Clusters implementation.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2013, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16              10.09.13 N. Fomin - Created.
     17          ******************************************************************************/
     18          
     19          /******************************************************************************
     20                              Includes section
     21          ******************************************************************************/
     22          #include <haClusters.h>

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint8_t ZCL_GetNextSeqNumber(void)
   \                     ZCL_GetNextSeqNumber: (+1)
   \   00000000   0x....             LDR      R1,??DataTable2
   \   00000002   0x7808             LDRB     R0,[R1, #+0]
   \   00000004   0x1C42             ADDS     R2,R0,#+1
   \   00000006   0x700A             STRB     R2,[R1, #+0]
   \   00000008   0x4770             BX       LR               ;; return
     23          #include <commandManager.h>
     24          #include <uartManager.h>
     25          #include <clusters.h>
     26          
     27          /******************************************************************************
     28                              Prototypes section
     29          ******************************************************************************/
     30          static void ZCL_ConfigureReportingResp(ZCL_Notify_t *ntfy);
     31          
     32          /******************************************************************************
     33                              Implementation section
     34          ******************************************************************************/
     35          /**************************************************************************//**
     36          \brief Fills ZCL Request structure
     37          
     38          \param[out] req     - pointer to zcl command request;
     39          \param[in]  command - command id;
     40          \param[in] size     - the size of request payload
     41          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     42          void fillCommandRequest(ZCL_Request_t *req, uint8_t command, uint8_t size)
     43          {
     44            req->id              = command;
   \                     fillCommandRequest: (+1)
   \   00000000   0x3048             ADDS     R0,R0,#+72
   \   00000002   0x7041             STRB     R1,[R0, #+1]
     45            req->requestLength   = size;
   \   00000004   0x7082             STRB     R2,[R0, #+2]
     46            req->endpointId      = APP_SRC_ENDPOINT_ID;
   \   00000006   0x2119             MOVS     R1,#+25
   \   00000008   0x7001             STRB     R1,[R0, #+0]
     47            req->defaultResponse = ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RESPONSE;
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x70C1             STRB     R1,[R0, #+3]
     48          }
   \   0000000E   0x4770             BX       LR               ;; return
     49          
     50          /**************************************************************************//**
     51          \brief Fills zcl addressing structure
     52          
     53          \param[out] addressing - pointer to the structure to be filled;
     54          \param[in]  mode       - addressing mode;
     55          \param[in]  addr       - short address of destination mode;
     56          \param[in]  ep         - endpoint number of destination node;
     57          \param[in]  cluster    - cluster id
     58          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     59          void fillDstAddressing(ZCL_Addressing_t *addressing, APS_AddrMode_t mode, ShortAddr_t addr, Endpoint_t ep, ClusterId_t cluster)
     60          {
   \                     fillDstAddressing: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     61            addressing->addrMode             = mode;
   \   00000004   0x7021             STRB     R1,[R4, #+0]
     62            addressing->addr.shortAddress    = addr;
   \   00000006   0x8122             STRH     R2,[R4, #+8]
     63            addressing->profileId            = PROFILE_ID_HOME_AUTOMATION;
   \   00000008   0x2082             MOVS     R0,#+130
   \   0000000A   0x0040             LSLS     R0,R0,#+1        ;; #+260
   \   0000000C   0x8320             STRH     R0,[R4, #+24]
     64            addressing->endpointId           = ep;
   \   0000000E   0x76A3             STRB     R3,[R4, #+26]
     65            addressing->clusterId            = cluster;
   \   00000010   0x9802             LDR      R0,[SP, #+8]
   \   00000012   0x83A0             STRH     R0,[R4, #+28]
     66            addressing->clusterSide          = ZCL_CLUSTER_SIDE_SERVER;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x77A0             STRB     R0,[R4, #+30]
     67            addressing->manufacturerSpecCode = 0;
   \   00000018   0x....             B.N      ?Subroutine0
     68            addressing->sequenceNumber       = ZCL_GetNextSeqNumber();
     69          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x8420             STRH     R0,[R4, #+32]
   \   00000002   0x.... 0x....      BL       ZCL_GetNextSeqNumber
   \   00000006   0x3422             ADDS     R4,R4,#+34
   \   00000008   0x7020             STRB     R0,[R4, #+0]
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
     70          
     71          /**************************************************************************//**
     72          \brief Fills zcl addressing structure
     73          
     74          \param[out] addressing - pointer to the structure to be filled;
     75          \param[in]  mode       - addressing mode;
     76          \param[in]  addr       - short address of destination mode;
     77          \param[in]  ep         - endpoint number of destination node;
     78          \param[in]  cluster    - cluster id
     79          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     80          void fillDstAddressingServer(ZCL_Addressing_t *addressing, APS_AddrMode_t mode, ShortAddr_t addr, Endpoint_t ep, ClusterId_t cluster)
     81          {
   \                     fillDstAddressingServer: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     82            addressing->addrMode             = mode;
   \   00000004   0x7021             STRB     R1,[R4, #+0]
     83            addressing->addr.shortAddress    = addr;
   \   00000006   0x8122             STRH     R2,[R4, #+8]
     84            addressing->profileId            = PROFILE_ID_HOME_AUTOMATION;
   \   00000008   0x2082             MOVS     R0,#+130
   \   0000000A   0x0040             LSLS     R0,R0,#+1        ;; #+260
   \   0000000C   0x8320             STRH     R0,[R4, #+24]
     85            addressing->endpointId           = ep;
   \   0000000E   0x76A3             STRB     R3,[R4, #+26]
     86            addressing->clusterId            = cluster;
   \   00000010   0x9802             LDR      R0,[SP, #+8]
   \   00000012   0x83A0             STRH     R0,[R4, #+28]
     87            addressing->clusterSide          = ZCL_CLUSTER_SIDE_CLIENT;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x77A0             STRB     R0,[R4, #+30]
     88            addressing->manufacturerSpecCode = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A                      REQUIRE ?Subroutine0
   \   0000001A                      ;; // Fall through to label ?Subroutine0
     89            addressing->sequenceNumber       = ZCL_GetNextSeqNumber();
     90          }
     91          
     92          /**************************************************************************//**
     93          \brief Gets free command buffer
     94          
     95          \returns pointer to a command buffer
     96          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     97          ZCL_Request_t *getFreeCommand(void)
     98          {
   \                     getFreeCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
     99            ZCL_Request_t *req;
    100          
    101            if (!(req = commandManagerAllocCommand()))
   \   00000004   0x.... 0x....      BL       commandManagerAllocCommand
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0xD108             BNE      ??getFreeCommand_0
    102            {
    103              LOG_STRING(insufficientBuffersAmountStr, "\r\nNot enough command buffers\r\n");
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R1,?_0
   \   00000012   0x2220             MOVS     R2,#+32
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
    104              appSnprintf(insufficientBuffersAmountStr);
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x.... 0x....      BL       appSnprintf
    105            }
    106          
    107            return req;
   \                     ??getFreeCommand_0: (+1)
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB008             ADD      SP,SP,#+32
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    108          }
    109          
    110          /**************************************************************************//**
    111          \brief Fills ZCL Addressing structure
    112          
    113          \param[out] srcAddressing - pointer to zcl addressing request of source node;
    114          \param[in]  dstAddressing - pointer to zcl addressing request of destination node;
    115          \param[in]  side          - cluster side of recipient side
    116          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    117          void fillDstAddressingViaSourceAddressing(ZCL_Addressing_t *srcAddressing, ZCL_Addressing_t *dstAddressing, uint8_t side)
    118          {
   \                     fillDstAddressingViaSourceAddressing: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    119            *srcAddressing = *dstAddressing;
   \   00000006   0x2228             MOVS     R2,#+40
   \   00000008   0x.... 0x....      BL       __aeabi_memcpy4
    120            srcAddressing->clusterSide = side;
   \   0000000C   0x77A5             STRB     R5,[R4, #+30]
    121          }
   \   0000000E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    122          
    123          /**************************************************************************//**
    124          \brief Sends configure reporting request to notify another device about reporting
    125          
    126          \param[in] endpoint  - destination endpoint;
    127          \param[in] clusterId - cluster id;
    128          \param[in] attrId    - attribute id;
    129          ]param[in] period    - report period
    130          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    131          void sendConfigureReportingToNotify(Endpoint_t srcEndpoint, Endpoint_t dstEndpoint, ClusterId_t clusterId, ZCL_AttributeId_t attrId, ZCL_ReportTime_t period, ConfigureReportResp_t configureRespCb)
    132          {
   \                     sendConfigureReportingToNotify: (+1)
   \   00000000   0xB5F6             PUSH     {R1,R2,R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x001E             MOVS     R6,R3
    133            ZCL_Request_t *req;
    134            ZCL_NextElement_t element;
    135            ZCL_ConfigureReportingReq_t configureReportingReq;
    136          
    137            if (!(req = getFreeCommand()))
   \   00000008   0x.... 0x....      BL       getFreeCommand
   \   0000000C   0x0004             MOVS     R4,R0
   \   0000000E   0xD031             BEQ      ??sendConfigureReportingToNotify_0
    138              return;
    139          
    140            configureReportingReq.direction     = ZCL_FRAME_CONTROL_DIRECTION_SERVER_TO_CLIENT;
   \   00000010   0x2501             MOVS     R5,#+1
   \   00000012   0xA804             ADD      R0,SP,#+16
   \   00000014   0x7005             STRB     R5,[R0, #+0]
    141            configureReportingReq.attributeId   = attrId;
   \   00000016   0x7046             STRB     R6,[R0, #+1]
   \   00000018   0x0A36             LSRS     R6,R6,#+8
   \   0000001A   0x7086             STRB     R6,[R0, #+2]
    142            configureReportingReq.timeoutPeriod = period;
   \   0000001C   0x990E             LDR      R1,[SP, #+56]
   \   0000001E   0x70C1             STRB     R1,[R0, #+3]
   \   00000020   0x0A09             LSRS     R1,R1,#+8
   \   00000022   0x7101             STRB     R1,[R0, #+4]
    143          
    144            element.payloadLength = 0;
   \   00000024   0xAE01             ADD      R6,SP,#+4
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x7070             STRB     R0,[R6, #+1]
    145            element.payload       = req->requestPayload;
   \   0000002A   0x6CE0             LDR      R0,[R4, #+76]
   \   0000002C   0x9002             STR      R0,[SP, #+8]
    146            element.id            = ZCL_CONFIGURE_REPORTING_COMMAND_ID;
   \   0000002E   0x2006             MOVS     R0,#+6
   \   00000030   0x7030             STRB     R0,[R6, #+0]
    147            element.content       = &configureReportingReq;
   \   00000032   0xA804             ADD      R0,SP,#+16
   \   00000034   0x9003             STR      R0,[SP, #+12]
    148            ZCL_PutNextElement(&element);
   \   00000036   0xA801             ADD      R0,SP,#+4
   \   00000038   0x.... 0x....      BL       ZCL_PutNextElement
    149          
    150            fillCommandRequest(req, ZCL_CONFIGURE_REPORTING_COMMAND_ID, element.payloadLength);
   \   0000003C   0x7872             LDRB     R2,[R6, #+1]
   \   0000003E   0x2106             MOVS     R1,#+6
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x.... 0x....      BL       fillCommandRequest
    151            req->endpointId = srcEndpoint;
   \   00000046   0x0026             MOVS     R6,R4
   \   00000048   0x363E             ADDS     R6,R6,#+62
   \   0000004A   0x72B7             STRB     R7,[R6, #+10]
    152            fillDstAddressing(&req->dstAddressing, APS_NO_ADDRESS, 0, dstEndpoint, clusterId);
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x8C00             LDRH     R0,[R0, #+32]
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x7F03             LDRB     R3,[R0, #+28]
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0x3020             ADDS     R0,R0,#+32
   \   0000005E   0x.... 0x....      BL       fillDstAddressing
    153            req->dstAddressing.clusterSide = ZCL_CLUSTER_SIDE_CLIENT;
   \   00000062   0x7035             STRB     R5,[R6, #+0]
   \   00000064   0x980F             LDR      R0,[SP, #+60]
    154            if(NULL == configureRespCb)
   \   00000066   0x0001             MOVS     R1,R0
   \   00000068   0xD100             BNE      ??sendConfigureReportingToNotify_1
    155              req->ZCL_Notify = ZCL_ConfigureReportingResp;
   \   0000006A   0x....             LDR      R0,??DataTable2_1
    156            else
    157              req->ZCL_Notify = configureRespCb;
   \                     ??sendConfigureReportingToNotify_1: (+1)
   \   0000006C   0x61A0             STR      R0,[R4, #+24]
    158          
    159            commandManagerSendAttribute(req);
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0x.... 0x....      BL       commandManagerSendAttribute
    160          }
   \                     ??sendConfigureReportingToNotify_0: (+1)
   \   00000074   0xB009             ADD      SP,SP,#+36
   \   00000076   0xBDF0             POP      {R4-R7,PC}       ;; return
    161          
    162          /**************************************************************************//**
    163          \brief Indication of configure reporting response
    164          
    165          \param[in] resp - pointer to response
    166          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    167          static void ZCL_ConfigureReportingResp(ZCL_Notify_t *ntfy)
    168          {
    169            (void)ntfy;
    170          }
   \                     ZCL_ConfigureReportingResp: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     zclMem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ZCL_ConfigureReportingResp

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 "\015\012Not enough command buffers\015\012"
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x65 0x6E    
   \              0x6F 0x75    
   \              0x67 0x68    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x20 0x62    
   \              0x75 0x66    
   \              0x66 0x65    
   \              0x72 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0
    171          
    172          // eof haClusters.c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ZCL_ConfigureReportingResp
       0   ZCL_GetNextSeqNumber
       0   fillCommandRequest
       8   fillDstAddressing
         8   -> ZCL_GetNextSeqNumber
       8   fillDstAddressingServer
         8   -> ZCL_GetNextSeqNumber
      16   fillDstAddressingViaSourceAddressing
        16   -> __aeabi_memcpy4
      40   getFreeCommand
        40   -> __aeabi_memcpy4
        40   -> appSnprintf
        40   -> commandManagerAllocCommand
      56   sendConfigureReportingToNotify
        56   -> ZCL_PutNextElement
        56   -> commandManagerSendAttribute
        56   -> fillCommandRequest
        56   -> fillDstAddressing
        56   -> getFreeCommand


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      12  ?Subroutine0
      32  ?_0
       2  ZCL_ConfigureReportingResp
      10  ZCL_GetNextSeqNumber
      16  fillCommandRequest
      26  fillDstAddressing
      26  fillDstAddressingServer
      16  fillDstAddressingViaSourceAddressing
      36  getFreeCommand
     120  sendConfigureReportingToNotify

 
 304 bytes in section .text
 
 304 bytes of CODE memory

Errors: none
Warnings: none
