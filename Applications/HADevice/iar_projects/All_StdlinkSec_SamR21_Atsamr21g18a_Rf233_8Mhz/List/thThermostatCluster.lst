###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:41:07
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thThermostatCluster.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thThermostatCluster.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\thThermostatCluster.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\thThermostatCluster.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thThermostatCluster.c
      1          /**************************************************************************//**
      2            \file thThermostatCluster.c
      3          
      4            \brief
      5              Thermostat cluster implementation.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16                 09/09/2014 Unithra.C - Created
     17          ******************************************************************************/
     18          #ifdef APP_DEVICE_TYPE_THERMOSTAT
     19          
     20          /******************************************************************************
     21                              Includes section
     22          ******************************************************************************/
     23          #include <thThermostatCluster.h>
     24          #if APP_ENABLE_CONSOLE == 1
     25          #include <uartManager.h>
     26          #endif
     27          #include <tempSensor.h>
     28          #include <thAlarmsCluster.h>
     29          #include <haClusters.h>
     30          #include <commandManager.h>
     31          #include <bspTempSensor.h>
     32          #include <zclAttributes.h>
     33          
     34          /*******************************************************************************
     35                                       Defines section
     36          *******************************************************************************/
     37          #define THERMOSTAT_SETPOINT_SCALE 10
     38          
     39          #if THERMOSTAT_LOCAL_TEMPERATURE_MAX_REPORT_PERIOD > 2
     40          #define TEMP_MEAS_TIME  ((THERMOSTAT_LOCAL_TEMPERATURE_MAX_REPORT_PERIOD/2) - 1)*1000
     41          #else
     42          #define TEMP_MEAS_TIME 1000
     43          #endif
     44          
     45          /*******************************************************************************
     46                                       Types section
     47          *******************************************************************************/
     48          typedef struct PACK
     49          {
     50            ZCL_AttributeId_t id;
     51            uint8_t type;
     52            uint8_t properties;
     53            int16_t value;
     54          } setPoint_t;
     55          
     56          #if  BOARD_QTOUCH_XPRO
     57          enum setPointMode
     58            {
     59              ADJUST_HEAT_SETPOINT,
     60              ADJUST_COOL_SETPOINT,
     61              ADJUST_HEAT_AND_COOL_SETPOINT,
     62            };
     63          #define LOCAL_TEMPERATURE_CONST 100  
     64          #endif
     65          /*******************************************************************************
     66                              Static functions prototypes section
     67          *******************************************************************************/
     68          static ZCL_Status_t setpointCommandInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_SetpointRaiseLower_t * payload);
     69          static void readTemperature(void);
     70          static void thThermostatAttrEventInd(ZCL_Addressing_t *addressing, ZCL_AttributeId_t attributeId, ZCL_AttributeEvent_t event);
     71          static void thermostatSettingsAttrInit(void);
     72          static void thermostatInformationAttrInit(void);
     73          static void thThermostatEventListener(SYS_EventId_t eventId, SYS_EventData_t data);
     74          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
     75            static void thermostatUpdateThRunningMode(int16_t temperature);
     76          #endif
     77          #if defined(THERMOSTAT_EXTERNAL_TEMPERATURE_SENSOR_NODE_AVAILABLE) && defined (ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES)
     78            static void thermostatReadExternalTempSensor(int16_t *pTemperature);
     79          #endif
     80          static ZCL_Status_t thermostatValidateSystemModeValue(ZCL_ThControlSeqOfOperation_t ctrlSeqOperation,ZCL_ThSystemMode_t sysModeValue);
     81          static void setAlarmState(ZclThermostatAlarmCode_t alarmCode, bool setAlarm);
     82          static bool isAlarmActive(ZclThermostatAlarmCode_t alarmCode);
     83          
     84          /******************************************************************************
     85                              Global variables
     86          ******************************************************************************/

   \                                 In section .data, align 4
     87          ZCL_ThermostatClusterServerAttributes_t thThermostatClusterServerAttributes =
   \                     thThermostatClusterServerAttributes:
   \   00000000   0x0000             DC16 0
   \   00000002   0x29 0x13          DC8 41, 19
   \   00000004   0x0000 0x0000      DC16 0, 0, 10, 20, 0, 0, 0, -27315, 32767, 1
   \              0x000A 0x0014
   \              0x0000 0x0000
   \              0x0000 0x954D
   \              0x7FFF 0x0001
   \   00000018   0x29 0x12          DC8 41, 18
   \   0000001A   0x0000 0x954D      DC16 0, -27315, 32767, 2
   \              0x7FFF 0x0002
   \   00000022   0x18 0x12          DC8 24, 18, 0, 0, 1
   \              0x00 0x00    
   \              0x01         
   \   00000027   0x0003             DC16 3
   \   00000029   0x29 0x12          DC8 41, 18
   \   0000002B   0x0000 0x954D      DC16 0, -27315, 32767, 4
   \              0x7FFF 0x0004
   \   00000033   0x29 0x12          DC8 41, 18
   \   00000035   0x0000 0x954D      DC16 0, -27315, 32767, 5
   \              0x7FFF 0x0005
   \   0000003D   0x29 0x12          DC8 41, 18
   \   0000003F   0x0000 0x954D      DC16 0, -27315, 32767, 6
   \              0x7FFF 0x0006
   \   00000047   0x29 0x12          DC8 41, 18
   \   00000049   0x0000 0x954D      DC16 0, -27315, 32767, 9
   \              0x7FFF 0x0009
   \   00000051   0x18 0x10          DC8 24, 16, 0, 0, 63
   \              0x00 0x00    
   \              0x3F         
   \   00000056   0x0010             DC16 16
   \   00000058   0x28 0x10          DC8 40, 16, 0, -25, 25
   \              0x00 0xE7    
   \              0x19         
   \   0000005D   0x0011             DC16 17
   \   0000005F   0x29 0x30          DC8 41, 48
   \   00000061   0x0000 0x0017      DC16 0, 23, 24, 18
   \              0x0018 0x0012
   \   00000069   0x29 0x30          DC8 41, 48
   \   0000006B   0x0000 0x0015      DC16 0, 21, 22, 19
   \              0x0016 0x0013
   \   00000073   0x29 0x30          DC8 41, 48
   \   00000075   0x0000 0x0017      DC16 0, 23, 24, 20
   \              0x0018 0x0014
   \   0000007D   0x29 0x30          DC8 41, 48
   \   0000007F   0x0000 0x0015      DC16 0, 21, 22, 21
   \              0x0016 0x0015
   \   00000087   0x29 0x10          DC8 41, 16
   \   00000089   0x0000 0x954D      DC16 0, -27315, 32767, 22
   \              0x7FFF 0x0016
   \   00000091   0x29 0x10          DC8 41, 16
   \   00000093   0x0000 0x954D      DC16 0, -27315, 32767, 23
   \              0x7FFF 0x0017
   \   0000009B   0x29 0x10          DC8 41, 16
   \   0000009D   0x0000 0x954D      DC16 0, -27315, 32767, 24
   \              0x7FFF 0x0018
   \   000000A5   0x29 0x10          DC8 41, 16
   \   000000A7   0x0000 0x954D      DC16 0, -27315, 32767, 25
   \              0x7FFF 0x0019
   \   000000AF   0x28 0x10          DC8 40, 16, 0, 10, 25
   \              0x00 0x0A    
   \              0x19         
   \   000000B4   0x001A             DC16 26
   \   000000B6   0x18 0x10          DC8 24, 16, 0, 0, 7
   \              0x00 0x00    
   \              0x07         
   \   000000BB   0x001B             DC16 27
   \   000000BD   0x30 0x10          DC8 48, 16, 0, 0, 5
   \              0x00 0x00    
   \              0x05         
   \   000000C2   0x001C             DC16 28
   \   000000C4   0x30 0x10          DC8 48, 16, 0, 0, 7
   \              0x00 0x00    
   \              0x07         
   \   000000C9   0x001D             DC16 29
   \   000000CB   0x18 0x12          DC8 24, 18, 0, 0, 7
   \              0x00 0x00    
   \              0x07         
   \   000000D0   0x001E             DC16 30
   \   000000D2   0x30 0x12          DC8 48, 18, 0, 0, 4
   \              0x00 0x00    
   \              0x04         
   \   000000D7   0x0029             DC16 41
   \   000000D9   0x19 0x12          DC8 25, 18
   \   000000DB   0x0000 0x0000      DC16 0, 0, 127
   \              0x007F       
   \   000000E1   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     88          {
     89            ZCL_DEFINE_THERMOSTAT_CLUSTER_SERVER_MANDATORY_ATTRIBUTES(THERMOSTAT_LOCAL_TEMPERATURE_MIN_REPORT_PERIOD, THERMOSTAT_LOCAL_TEMPERATURE_MAX_REPORT_PERIOD)
     90          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES    
     91            ZCL_DEFINE_THERMOSTAT_CLUSTER_SERVER_OPTIONAL_ATTRIBUTES(THERMOSTAT_LOCAL_TEMPERATURE_MIN_REPORT_PERIOD, THERMOSTAT_LOCAL_TEMPERATURE_MAX_REPORT_PERIOD)
     92          #endif    
     93          };
     94          

   \                                 In section .data, align 4
     95          ZCL_ThermostatClusterCommands_t thThermostatClusterServerCommands =
   \                     thThermostatClusterServerCommands:
   \   00000000   0x00 0x10          DC8 0, 16, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 setpointCommandInd
     96          {
     97            ZCL_DEFINE_THERMOSTAT_CLUSTER_COMMANDS(setpointCommandInd)
     98          };
     99          
    100          /******************************************************************************
    101                              Local variables
    102          ******************************************************************************/
    103          static HAL_AppTimer_t tempMeasTimer;

   \                                 In section .bss, align 1
    104          static uint8_t activeAlarms;
   \                     activeAlarms:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   \                     tempMeasTimer:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0H
   \   00000018   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000020   0x........         DC32 thThermostatEventListener
    105          /* BitCloud events receiver */
    106          static SYS_EventReceiver_t thEventReceiver = { .func = thThermostatEventListener};
    107          
    108          /******************************************************************************
    109                              Implementation section
    110          ******************************************************************************/
    111          
    112          /**************************************************************************//**
    113          \brief Initializes thermostat cluster atttributes to their defaults,
    114                  register events and required timers
    115          \param NA
    116          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    117          void thermostatClusterInit(void)
    118          {
   \                     thermostatClusterInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    119            ZCL_Cluster_t *cluster = ZCL_GetCluster(APP_SRC_ENDPOINT_ID, THERMOSTAT_CLUSTER_ID, ZCL_CLUSTER_SIDE_SERVER);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x....             LDR      R1,??DataTable16  ;; 0x201
   \   00000006   0x2019             MOVS     R0,#+25
   \   00000008   0x.... 0x....      BL       ZCL_GetCluster
    120          
    121            if (cluster)
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD001             BEQ      ??thermostatClusterInit_0
    122            {
    123              cluster->ZCL_AttributeEventInd = thThermostatAttrEventInd;
   \   00000010   0x....             LDR      R1,??DataTable16_1
   \   00000012   0x61C1             STR      R1,[R0, #+28]
    124            }
    125            thermostatClusterInitAttributes();
   \                     ??thermostatClusterInit_0: (+1)
   \   00000014   0x.... 0x....      BL       thermostatClusterInitAttributes
    126            BSP_OpenTempSensor();
   \   00000018   0x.... 0x....      BL       BSP_OpenTempSensor
    127          
    128            /*Start periodic temperature measurement - this period shall always be less
    129            than reporting period*/
    130            tempMeasTimer.interval = TEMP_MEAS_TIME;
   \   0000001C   0x....             LDR      R4,??DataTable17
   \   0000001E   0x....             LDR      R0,??DataTable17_1  ;; 0x2328
   \   00000020   0x60A0             STR      R0,[R4, #+8]
    131            tempMeasTimer.mode = TIMER_REPEAT_MODE;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x7320             STRB     R0,[R4, #+12]
    132            tempMeasTimer.callback = readTemperature;
   \   00000026   0x....             LDR      R0,??DataTable17_2
   \   00000028   0x6120             STR      R0,[R4, #+16]
    133            HAL_StopAppTimer(&tempMeasTimer);
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       HAL_StopAppTimer
    134            HAL_StartAppTimer(&tempMeasTimer);
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       HAL_StartAppTimer
    135          
    136            SYS_SubscribeToEvent(BC_ZCL_EVENT_ACTION_REQUEST, &thEventReceiver);
   \   00000036   0x3414             ADDS     R4,R4,#+20
   \   00000038   0x0021             MOVS     R1,R4
   \   0000003A   0x203A             MOVS     R0,#+58
   \   0000003C   0x.... 0x....      BL       SYS_SubscribeToEvent
    137          }
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
    138          /**************************************************************************//**
    139          \brief Initializes thermostat cluster atttributes to their defaults
    140          \param NA
    141          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    142           void thermostatClusterInitAttributes(void)
    143           {
   \                     thermostatClusterInitAttributes: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    144            thermostatInformationAttrInit();
   \   00000002   0x....             LDR      R0,??DataTable17_3
   \   00000004   0x1D01             ADDS     R1,R0,#+4
   \   00000006   0x22FA             MOVS     R2,#+250
   \   00000008   0x00D2             LSLS     R2,R2,#+3        ;; #+2000
   \   0000000A   0x800A             STRH     R2,[R1, #+0]
   \   0000000C   0x82CA             STRH     R2,[R1, #+22]
   \   0000000E   0x2124             MOVS     R1,#+36
   \   00000010   0x5C41             LDRB     R1,[R0, R1]
   \   00000012   0x23FE             MOVS     R3,#+254
   \   00000014   0x400B             ANDS     R3,R3,R1
   \   00000016   0x2124             MOVS     R1,#+36
   \   00000018   0x5443             STRB     R3,[R0, R1]
   \   0000001A   0x23AF             MOVS     R3,#+175
   \   0000001C   0x009B             LSLS     R3,R3,#+2        ;; #+700
   \   0000001E   0x0001             MOVS     R1,R0
   \   00000020   0x312B             ADDS     R1,R1,#+43
   \   00000022   0x700B             STRB     R3,[R1, #+0]
   \   00000024   0x2402             MOVS     R4,#+2
   \   00000026   0x704C             STRB     R4,[R1, #+1]
   \   00000028   0x....             LDR      R4,??DataTable17_4  ;; 0xbb8
   \   0000002A   0x0001             MOVS     R1,R0
   \   0000002C   0x3135             ADDS     R1,R1,#+53
   \   0000002E   0x700C             STRB     R4,[R1, #+0]
   \   00000030   0x250B             MOVS     R5,#+11
   \   00000032   0x704D             STRB     R5,[R1, #+1]
   \   00000034   0x0001             MOVS     R1,R0
   \   00000036   0x313F             ADDS     R1,R1,#+63
   \   00000038   0x25C8             MOVS     R5,#+200
   \   0000003A   0x00ED             LSLS     R5,R5,#+3        ;; #+1600
   \   0000003C   0x700D             STRB     R5,[R1, #+0]
   \   0000003E   0x2506             MOVS     R5,#+6
   \   00000040   0x704D             STRB     R5,[R1, #+1]
   \   00000042   0x0001             MOVS     R1,R0
   \   00000044   0x3149             ADDS     R1,R1,#+73
   \   00000046   0x25C8             MOVS     R5,#+200
   \   00000048   0x012D             LSLS     R5,R5,#+4        ;; #+3200
   \   0000004A   0x700D             STRB     R5,[R1, #+0]
   \   0000004C   0x250C             MOVS     R5,#+12
   \   0000004E   0x704D             STRB     R5,[R1, #+1]
   \   00000050   0x0005             MOVS     R5,R0
   \   00000052   0x3553             ADDS     R5,R5,#+83
   \   00000054   0x7829             LDRB     R1,[R5, #+0]
   \   00000056   0x26C0             MOVS     R6,#+192
   \   00000058   0x400E             ANDS     R6,R6,R1
   \   0000005A   0x702E             STRB     R6,[R5, #+0]
    145            thermostatSettingsAttrInit();
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x71E9             STRB     R1,[R5, #+7]
   \   00000060   0x....             LDR      R5,??DataTable17_5  ;; 0xa28
   \   00000062   0x0006             MOVS     R6,R0
   \   00000064   0x3661             ADDS     R6,R6,#+97
   \   00000066   0x7035             STRB     R5,[R6, #+0]
   \   00000068   0x270A             MOVS     R7,#+10
   \   0000006A   0x7077             STRB     R7,[R6, #+1]
   \   0000006C   0x0006             MOVS     R6,R0
   \   0000006E   0x366B             ADDS     R6,R6,#+107
   \   00000070   0x7032             STRB     R2,[R6, #+0]
   \   00000072   0x2707             MOVS     R7,#+7
   \   00000074   0x7077             STRB     R7,[R6, #+1]
   \   00000076   0x0006             MOVS     R6,R0
   \   00000078   0x3675             ADDS     R6,R6,#+117
   \   0000007A   0x7035             STRB     R5,[R6, #+0]
   \   0000007C   0x250A             MOVS     R5,#+10
   \   0000007E   0x7075             STRB     R5,[R6, #+1]
   \   00000080   0x0005             MOVS     R5,R0
   \   00000082   0x357F             ADDS     R5,R5,#+127
   \   00000084   0x702A             STRB     R2,[R5, #+0]
   \   00000086   0x706F             STRB     R7,[R5, #+1]
   \   00000088   0x0002             MOVS     R2,R0
   \   0000008A   0x3289             ADDS     R2,R2,#+137
   \   0000008C   0x7013             STRB     R3,[R2, #+0]
   \   0000008E   0x2502             MOVS     R5,#+2
   \   00000090   0x7055             STRB     R5,[R2, #+1]
   \   00000092   0x0002             MOVS     R2,R0
   \   00000094   0x3293             ADDS     R2,R2,#+147
   \   00000096   0x7014             STRB     R4,[R2, #+0]
   \   00000098   0x250B             MOVS     R5,#+11
   \   0000009A   0x7055             STRB     R5,[R2, #+1]
   \   0000009C   0x0002             MOVS     R2,R0
   \   0000009E   0x329D             ADDS     R2,R2,#+157
   \   000000A0   0x7013             STRB     R3,[R2, #+0]
   \   000000A2   0x2302             MOVS     R3,#+2
   \   000000A4   0x7053             STRB     R3,[R2, #+1]
   \   000000A6   0x0002             MOVS     R2,R0
   \   000000A8   0x32A7             ADDS     R2,R2,#+167
   \   000000AA   0x7014             STRB     R4,[R2, #+0]
   \   000000AC   0x7055             STRB     R5,[R2, #+1]
   \   000000AE   0x0002             MOVS     R2,R0
   \   000000B0   0x32B1             ADDS     R2,R2,#+177
   \   000000B2   0x2319             MOVS     R3,#+25
   \   000000B4   0x7013             STRB     R3,[R2, #+0]
   \   000000B6   0x23F8             MOVS     R3,#+248
   \   000000B8   0x79D4             LDRB     R4,[R2, #+7]
   \   000000BA   0x401C             ANDS     R4,R4,R3
   \   000000BC   0x71D4             STRB     R4,[R2, #+7]
   \   000000BE   0x2404             MOVS     R4,#+4
   \   000000C0   0x7394             STRB     R4,[R2, #+14]
   \   000000C2   0x2401             MOVS     R4,#+1
   \   000000C4   0x7554             STRB     R4,[R2, #+21]
   \   000000C6   0x7F14             LDRB     R4,[R2, #+28]
   \   000000C8   0x4023             ANDS     R3,R3,R4
   \   000000CA   0x7713             STRB     R3,[R2, #+28]
   \   000000CC   0x22D4             MOVS     R2,#+212
   \   000000CE   0x5481             STRB     R1,[R0, R2]
    146          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES  
    147            thThermostatClusterServerAttributes.thermostatRunningState.value = CCPU_TO_LE16(ZCL_TH_RUNNING_STATE_DEF);
   \   000000D0   0x30DB             ADDS     R0,R0,#+219
   \   000000D2   0x7001             STRB     R1,[R0, #+0]
   \   000000D4   0x7041             STRB     R1,[R0, #+1]
    148          #endif
    149           }
   \   000000D6   0xBDF0             POP      {R4-R7,PC}       ;; return
    150          /**************************************************************************//**
    151          \brief Initializes the thermostat information attributes to their defaults
    152          \param NA
    153          ******************************************************************************/
    154          static void thermostatInformationAttrInit(void)
    155          {
    156            thThermostatClusterServerAttributes.localTemperature.value =
    157                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_LOCAL_TEMPERATURE_DEF);
    158          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES  
    159            thThermostatClusterServerAttributes.outdoorTemperature.value =
    160                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_LOCAL_TEMPERATURE_DEF);
    161            
    162            thThermostatClusterServerAttributes.occupancy.value.occupied = CCPU_TO_LE16(ZCL_NOT_OCCUPIED);
    163            thThermostatClusterServerAttributes.absMinHeatSetpointLimit.value = 
    164                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_ABS_MIN_HEAT_SP_LIMIT_DEF);
    165            thThermostatClusterServerAttributes.absMaxHeatSetpointLimit.value = 
    166                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_ABS_MAX_HEAT_SP_LIMIT_DEF);
    167            thThermostatClusterServerAttributes.absMinCoolSetpointLimit.value = 
    168                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_ABS_MIN_COOL_SP_LIMIT_DEF);
    169            thThermostatClusterServerAttributes.absMaxCoolSetpointLimit.value = 
    170                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_ABS_MAX_COOL_SP_LIMIT_DEF);
    171            
    172            /*hvacSystemTypeConfiguration*/
    173            thThermostatClusterServerAttributes.hvacSystemTypeConfiguration.value.coolingStage = 
    174                (uint8_t)CCPU_TO_LE16(ZCL_HVAC_COOL_STAGE_1);
    175            thThermostatClusterServerAttributes.hvacSystemTypeConfiguration.value.heatingStage = 
    176                (uint8_t)CCPU_TO_LE16(ZCL_HVAC_HEAT_STAGE_1);
    177            thThermostatClusterServerAttributes.hvacSystemTypeConfiguration.value.heatingType = 
    178                (uint8_t)CCPU_TO_LE16(ZCL_HVAC_TYPE_CONVENTIONAL);
    179            thThermostatClusterServerAttributes.hvacSystemTypeConfiguration.value.heatingFuelSource = 
    180                (uint8_t)CCPU_TO_LE16(ZCL_HVAC_SOURCE_ELECTRIC);
    181          #endif
    182          }
    183          
    184          /**************************************************************************//**
    185          \brief Initializes the thermostat settings attributes to their defaults
    186          
    187          \param NA
    188          ******************************************************************************/
    189          static void thermostatSettingsAttrInit(void)
    190          {
    191          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES  
    192            thThermostatClusterServerAttributes.localTemperatureCalibration.value = 
    193                CCPU_TO_LE16(ZCL_TH_LOCAL_TEMP_CALIB_DEF);
    194          #endif
    195            thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value =
    196                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_OCCUPIED_COOLING_SP_DEF);
    197            thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value = 
    198                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_OCCUPIED_HEATING_SP_DEF);
    199          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    200            thThermostatClusterServerAttributes.unOccupiedCoolingSetpoint.value =
    201                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_UNOCCUPIED_COOLING_SP_DEF);
    202            thThermostatClusterServerAttributes.unOccupiedHeatingSetpoint.value = 
    203                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_UNOCCUPIED_HEATING_SP_DEF);
    204            thThermostatClusterServerAttributes.minHeatSetpointLimit.value = 
    205                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_MIN_HEAT_SP_LIMIT_DEF);
    206            thThermostatClusterServerAttributes.maxHeatSetpointLimit.value = 
    207                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_MAX_HEAT_SP_LIMIT_DEF);
    208            thThermostatClusterServerAttributes.minCoolSetpointLimit.value = 
    209                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_MIN_COOL_SP_LIMIT_DEF);
    210            thThermostatClusterServerAttributes.maxCoolSetpointLimit.value = 
    211                CCPU_TO_LE16(ZCL_THERMOSTAT_TEMPERATURE_SCALE * ZCL_TH_MAX_COOL_SP_LIMIT_DEF);
    212            thThermostatClusterServerAttributes.minSetpointDeadBand.value = 
    213                (int8_t)CCPU_TO_LE16(ZCL_TH_MIN_SP_DEADBABD_DEF);
    214            
    215            /*remoteSensing*/
    216            thThermostatClusterServerAttributes.remoteSensing.value.localTemperature = 
    217                CCPU_TO_LE16(ZCL_SENSE_INTERNALLY);
    218            thThermostatClusterServerAttributes.remoteSensing.value.outdoorTemperature = 
    219                CCPU_TO_LE16(ZCL_SENSE_INTERNALLY);
    220            thThermostatClusterServerAttributes.remoteSensing.value.occupancySense = 
    221                CCPU_TO_LE16(ZCL_SENSE_INTERNALLY);
    222          #endif  
    223            thThermostatClusterServerAttributes.controlSequenceofOperation.value = 
    224                CCPU_TO_LE16(ZCL_COOL_HEAT_4PIPES);
    225            thThermostatClusterServerAttributes.systemMode.value = CCPU_TO_LE16(ZCL_SYS_MODE_AUTO);
    226          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES  
    227            thThermostatClusterServerAttributes.alarmMask.value.initFailure = 
    228                CCPU_TO_LE16(ZCL_TH_ALARM_DISABLED);
    229            thThermostatClusterServerAttributes.alarmMask.value.hardwareFailure = 
    230                CCPU_TO_LE16(ZCL_TH_ALARM_DISABLED);
    231            thThermostatClusterServerAttributes.alarmMask.value.selfCalibrationFailure = 
    232                CCPU_TO_LE16(ZCL_TH_ALARM_DISABLED);
    233          
    234            thThermostatClusterServerAttributes.thermostatRunningMode.value = 
    235                CCPU_TO_LE16(ZCL_RUNNING_MODE_OFF);
    236          #endif
    237          }
    238          
    239          /**************************************************************************//**
    240          \brief Temperature measurement on timer expiry
    241                 The temp sensor returns a temperature value already scaled by 
    242                 THERMOSTAT_LOCAL_TEMPERATURE_SCALE.So further scaling is not needed here.
    243          
    244          \param NA
    245          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    246          static void readTemperature(void)
    247          {
   \                     readTemperature: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    248            int16_t measuredTemp = 0;
   \   00000002   0x2600             MOVS     R6,#+0
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x8006             STRH     R6,[R0, #+0]
    249          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES  
    250            if (ZCL_SENSE_INTERNALLY == thThermostatClusterServerAttributes.remoteSensing.value.localTemperature)
   \   00000008   0x....             LDR      R4,??DataTable17_3
   \   0000000A   0x0025             MOVS     R5,R4
   \   0000000C   0x35B8             ADDS     R5,R5,#+184
   \   0000000E   0x2701             MOVS     R7,#+1
   \   00000010   0x7828             LDRB     R0,[R5, #+0]
   \   00000012   0x4238             TST      R0,R7
   \   00000014   0xD103             BNE      ??readTemperature_0
    251          #endif    
    252              BSP_ReadTempSensor(&measuredTemp);
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x.... 0x....      BL       BSP_ReadTempSensor
   \   0000001C   0xE00A             B        ??readTemperature_1
    253          #if defined(THERMOSTAT_EXTERNAL_TEMPERATURE_SENSOR_NODE_AVAILABLE) && defined(ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES)
    254            else  thermostatReadExternalTempSensor(&measuredTemp);
   \                     ??readTemperature_0: (+1)
   \   0000001E   0x.... 0x....      BL       rand
   \   00000022   0xB200             SXTH     R0,R0
   \   00000024   0x2119             MOVS     R1,#+25
   \   00000026   0x.... 0x....      BL       __aeabi_idivmod
   \   0000002A   0x1DC9             ADDS     R1,R1,#+7
   \   0000002C   0x2064             MOVS     R0,#+100
   \   0000002E   0x4341             MULS     R1,R0,R1
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0x8001             STRH     R1,[R0, #+0]
    255          #endif  
    256            thThermostatClusterServerAttributes.localTemperature.value = measuredTemp;
   \                     ??readTemperature_1: (+1)
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0xB200             SXTH     R0,R0
   \   00000038   0x80A0             STRH     R0,[R4, #+4]
    257          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES  
    258            thermostatUpdateThRunningMode(thThermostatClusterServerAttributes.localTemperature.value);
   \   0000003A   0x2004             MOVS     R0,#+4
   \   0000003C   0x5E21             LDRSH    R1,[R4, R0]
   \   0000003E   0x2203             MOVS     R2,#+3
   \   00000040   0x2024             MOVS     R0,#+36
   \   00000042   0x5C20             LDRB     R0,[R4, R0]
   \   00000044   0x4238             TST      R0,R7
   \   00000046   0xD00B             BEQ      ??readTemperature_2
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x306B             ADDS     R0,R0,#+107
   \   0000004C   0x7803             LDRB     R3,[R0, #+0]
   \   0000004E   0x7847             LDRB     R7,[R0, #+1]
   \   00000050   0x063F             LSLS     R7,R7,#+24
   \   00000052   0x143F             ASRS     R7,R7,#+16
   \   00000054   0x433B             ORRS     R3,R3,R7
   \   00000056   0xB21B             SXTH     R3,R3
   \   00000058   0x428B             CMP      R3,R1
   \   0000005A   0xDA0B             BGE      ??readTemperature_3
   \   0000005C   0x3461             ADDS     R4,R4,#+97
   \   0000005E   0xE00D             B        ??readTemperature_4
   \                     ??readTemperature_2: (+1)
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x307F             ADDS     R0,R0,#+127
   \   00000064   0x7803             LDRB     R3,[R0, #+0]
   \   00000066   0x7847             LDRB     R7,[R0, #+1]
   \   00000068   0x063F             LSLS     R7,R7,#+24
   \   0000006A   0x143F             ASRS     R7,R7,#+16
   \   0000006C   0x433B             ORRS     R3,R3,R7
   \   0000006E   0xB21B             SXTH     R3,R3
   \   00000070   0x428B             CMP      R3,R1
   \   00000072   0xDB02             BLT      ??readTemperature_5
   \                     ??readTemperature_3: (+1)
   \   00000074   0x2004             MOVS     R0,#+4
   \   00000076   0x7728             STRB     R0,[R5, #+28]
   \   00000078   0xBDF1             POP      {R0,R4-R7,PC}
   \                     ??readTemperature_5: (+1)
   \   0000007A   0x3475             ADDS     R4,R4,#+117
   \                     ??readTemperature_4: (+1)
   \   0000007C   0x7820             LDRB     R0,[R4, #+0]
   \   0000007E   0x7863             LDRB     R3,[R4, #+1]
   \   00000080   0x061B             LSLS     R3,R3,#+24
   \   00000082   0x141B             ASRS     R3,R3,#+16
   \   00000084   0x4318             ORRS     R0,R0,R3
   \   00000086   0xB200             SXTH     R0,R0
   \   00000088   0x4281             CMP      R1,R0
   \   0000008A   0xDB01             BLT      ??readTemperature_6
   \   0000008C   0x772A             STRB     R2,[R5, #+28]
   \   0000008E   0xBDF1             POP      {R0,R4-R7,PC}
   \                     ??readTemperature_6: (+1)
   \   00000090   0x772E             STRB     R6,[R5, #+28]
    259          #endif
    260          }
   \   00000092   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    261          
    262          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    263          /**************************************************************************//**
    264          \brief Updates the thermostat running mode based on the given temperature
    265          
    266          \param[in] - measured temperature
    267          \param[out] - None
    268          ******************************************************************************/
    269          static void thermostatUpdateThRunningMode(int16_t temperature)
    270          {
    271            if (ZCL_OCCUPIED == thThermostatClusterServerAttributes.occupancy.value.occupied)
    272            {
    273              if(temperature <= thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value)
    274                thThermostatClusterServerAttributes.thermostatRunningMode.value = ZCL_RUNNING_MODE_HEAT;
    275            
    276              else if(temperature >= thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value)
    277                thThermostatClusterServerAttributes.thermostatRunningMode.value = ZCL_RUNNING_MODE_COOL;
    278            
    279              else
    280                thThermostatClusterServerAttributes.thermostatRunningMode.value = ZCL_RUNNING_MODE_OFF;
    281            }
    282            else if (ZCL_NOT_OCCUPIED == thThermostatClusterServerAttributes.occupancy.value.occupied)
    283            {
    284              if(temperature <= thThermostatClusterServerAttributes.unOccupiedHeatingSetpoint.value)
    285                thThermostatClusterServerAttributes.thermostatRunningMode.value = ZCL_RUNNING_MODE_HEAT;
    286            
    287              else if(temperature >= thThermostatClusterServerAttributes.unOccupiedCoolingSetpoint.value)
    288                thThermostatClusterServerAttributes.thermostatRunningMode.value = ZCL_RUNNING_MODE_COOL;
    289            
    290              else
    291                thThermostatClusterServerAttributes.thermostatRunningMode.value = ZCL_RUNNING_MODE_OFF;
    292            }  
    293          }
    294          #endif
    295          
    296          #if defined(THERMOSTAT_EXTERNAL_TEMPERATURE_SENSOR_NODE_AVAILABLE) && defined (ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES)
    297          /**************************************************************************//**
    298          \brief Read temperature from the remote sensor node on the network
    299          
    300          \param[in] - pointer to return the measured temperature
    301          \param[out] - None
    302          ******************************************************************************/
    303          static void thermostatReadExternalTempSensor(int16_t *pTemperature)
    304          {
    305            *pTemperature = ((int16_t)rand()) % (ZCL_TH_ABS_MAX_COOL_SP_LIMIT_DEF - ZCL_TH_ABS_MIN_HEAT_SP_LIMIT_DEF) 
    306                              + ZCL_TH_ABS_MIN_HEAT_SP_LIMIT_DEF;
    307            *pTemperature *= ZCL_THERMOSTAT_TEMPERATURE_SCALE;
    308          }
    309          #endif
    310          
    311          /****************************************************************//**
    312           \brief thermostat cluster setpointRaiseLowerCommand indication
    313           \param addressing - source info
    314           \param reportLength  - length of data in reportPayload
    315           \param payload - payload data
    316           \return none
    317          ********************************************************************/

   \                                 In section .text, align 4, keep-with-next
    318          static ZCL_Status_t setpointCommandInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, 
    319                                                 ZCL_SetpointRaiseLower_t * payload)
    320          {
   \                     setpointCommandInd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB09C             SUB      SP,SP,#+112
   \   00000004   0x0016             MOVS     R6,R2
    321            int16_t requestedValue = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x8108             STRH     R0,[R1, #+8]
    322            switch(payload->mode)
   \   0000000C   0x....             LDR      R5,??DataTable18  ;; 0x201
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x....             LDR      R4,??DataTable17_3
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x5671             LDRSB    R1,[R6, R1]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD004             BEQ      ??setpointCommandInd_0
   \   0000001A   0x2902             CMP      R1,#+2
   \   0000001C   0xD100             BNE      .+4
   \   0000001E   0xE088             B        ??setpointCommandInd_1
   \   00000020   0xD35B             BCC      ??setpointCommandInd_2
   \   00000022   0xE0BE             B        ??setpointCommandInd_3
    323            {
    324                case ZCL_ADJUST_HEAT_SETPOINT:
    325          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    326                  if(ZCL_OCCUPIED == thThermostatClusterServerAttributes.occupancy.value.occupied)
   \                     ??setpointCommandInd_0: (+1)
   \   00000024   0x2124             MOVS     R1,#+36
   \   00000026   0x5C61             LDRB     R1,[R4, R1]
   \   00000028   0x4201             TST      R1,R0
   \   0000002A   0xD042             BEQ      ??setpointCommandInd_4
    327          #endif          
    328                  {
    329                    requestedValue = thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value +
    330                                                         (payload->amount)*THERMOSTAT_SETPOINT_SCALE;
   \   0000002C   0x346B             ADDS     R4,R4,#+107
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0x7861             LDRB     R1,[R4, #+1]
   \   00000032   0x0609             LSLS     R1,R1,#+24
   \   00000034   0x1409             ASRS     R1,R1,#+16
   \   00000036   0x4308             ORRS     R0,R0,R1
   \   00000038   0xB200             SXTH     R0,R0
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x5671             LDRSB    R1,[R6, R1]
   \   0000003E   0x220A             MOVS     R2,#+10
   \   00000040   0x4351             MULS     R1,R2,R1
   \   00000042   0x1840             ADDS     R0,R0,R1
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x8108             STRH     R0,[R1, #+8]
    331                    ZCL_WriteAttributeValue(APP_ENDPOINT_THERMOSTAT,THERMOSTAT_CLUSTER_ID,
    332                                               ZCL_SERVER_CLUSTER_TYPE,ZCL_THERMOSTAT_CLUSTER_OCCUPIED_HEATING_SETPOINT_SERVER_ATTRIBUTE_ID,
    333                                               ZCL_S16BIT_DATA_TYPE_ID,(uint8_t *)&requestedValue);
   \   00000048   0xA802             ADD      R0,SP,#+8
   \   0000004A   0x9001             STR      R0,[SP, #+4]
   \   0000004C   0x2029             MOVS     R0,#+41
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0x2312             MOVS     R3,#+18
   \                     ??setpointCommandInd_5: (+1)
   \   00000052   0x2200             MOVS     R2,#+0
   \   00000054   0x0029             MOVS     R1,R5
   \   00000056   0x2019             MOVS     R0,#+25
   \   00000058   0x.... 0x....      BL       ZCL_WriteAttributeValue
    334                  }
    335          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    336                  else
    337                  {
    338                    requestedValue = thThermostatClusterServerAttributes.unOccupiedHeatingSetpoint.value +
    339                                                         (payload->amount)*THERMOSTAT_SETPOINT_SCALE;
    340                    ZCL_WriteAttributeValue(APP_ENDPOINT_THERMOSTAT,THERMOSTAT_CLUSTER_ID,
    341                                               ZCL_SERVER_CLUSTER_TYPE,ZCL_THERMOSTAT_CLUSTER_UNOCCUPIED_HEATING_SETPOINT_SERVER_ATTRIBUTE_ID,
    342                                               ZCL_S16BIT_DATA_TYPE_ID,(uint8_t *)&requestedValue);
    343                  }
    344          #endif
    345                  break;
    346                case ZCL_ADJUST_COOL_SETPOINT:
    347          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES        
    348                  if(ZCL_OCCUPIED == thThermostatClusterServerAttributes.occupancy.value.occupied)
    349          #endif
    350                  {
    351                    requestedValue = thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value +
    352                                                         (payload->amount)*THERMOSTAT_SETPOINT_SCALE;
    353                    ZCL_WriteAttributeValue(APP_ENDPOINT_THERMOSTAT,THERMOSTAT_CLUSTER_ID,
    354                                               ZCL_SERVER_CLUSTER_TYPE,ZCL_THERMOSTAT_CLUSTER_OCCUPIED_COOLING_SETPOINT_SERVER_ATTRIBUTE_ID,
    355                                               ZCL_S16BIT_DATA_TYPE_ID,(uint8_t *)&requestedValue);
    356                  }
    357          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    358                  else
    359                  {
    360                    requestedValue = thThermostatClusterServerAttributes.unOccupiedCoolingSetpoint.value +
    361                                                         (payload->amount)*THERMOSTAT_SETPOINT_SCALE;
    362                    ZCL_WriteAttributeValue(APP_ENDPOINT_THERMOSTAT,THERMOSTAT_CLUSTER_ID,
    363                                               ZCL_SERVER_CLUSTER_TYPE,ZCL_THERMOSTAT_CLUSTER_UNOCCUPIED_COOLING_SETPOINT_SERVER_ATTRIBUTE_ID,
    364                                               ZCL_S16BIT_DATA_TYPE_ID,(uint8_t *)&requestedValue);
    365                  }
    366          #endif
    367                  break;
    368                case ZCL_ADJUST_HEAT_AND_COOL_SETPOINT:
    369          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    370                  if(ZCL_OCCUPIED == thThermostatClusterServerAttributes.occupancy.value.occupied)
    371          #endif
    372                  {
    373                    requestedValue = thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value +
    374                                                         (payload->amount)*THERMOSTAT_SETPOINT_SCALE;
    375                    ZCL_WriteAttributeValue(APP_ENDPOINT_THERMOSTAT,THERMOSTAT_CLUSTER_ID,
    376                                               ZCL_SERVER_CLUSTER_TYPE,ZCL_THERMOSTAT_CLUSTER_OCCUPIED_HEATING_SETPOINT_SERVER_ATTRIBUTE_ID,
    377                                               ZCL_S16BIT_DATA_TYPE_ID,(uint8_t *)&requestedValue);
    378                    requestedValue = thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value +
    379                                                         (payload->amount)*THERMOSTAT_SETPOINT_SCALE;
    380                    ZCL_WriteAttributeValue(APP_ENDPOINT_THERMOSTAT,THERMOSTAT_CLUSTER_ID,
    381                                               ZCL_SERVER_CLUSTER_TYPE,ZCL_THERMOSTAT_CLUSTER_OCCUPIED_COOLING_SETPOINT_SERVER_ATTRIBUTE_ID,
    382                                               ZCL_S16BIT_DATA_TYPE_ID,(uint8_t *)&requestedValue);
    383                  }
    384          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    385                  else
    386                  {
    387                    requestedValue = thThermostatClusterServerAttributes.unOccupiedHeatingSetpoint.value +
    388                                                         (payload->amount)*THERMOSTAT_SETPOINT_SCALE;
    389                    ZCL_WriteAttributeValue(APP_ENDPOINT_THERMOSTAT,THERMOSTAT_CLUSTER_ID,
    390                                               ZCL_SERVER_CLUSTER_TYPE,ZCL_THERMOSTAT_CLUSTER_UNOCCUPIED_HEATING_SETPOINT_SERVER_ATTRIBUTE_ID,
    391                                               ZCL_S16BIT_DATA_TYPE_ID,(uint8_t *)&requestedValue);
    392                    requestedValue = thThermostatClusterServerAttributes.unOccupiedCoolingSetpoint.value +
    393                                                         (payload->amount)*THERMOSTAT_SETPOINT_SCALE;
    394                    ZCL_WriteAttributeValue(APP_ENDPOINT_THERMOSTAT,THERMOSTAT_CLUSTER_ID,
    395                                               ZCL_SERVER_CLUSTER_TYPE,ZCL_THERMOSTAT_CLUSTER_UNOCCUPIED_COOLING_SETPOINT_SERVER_ATTRIBUTE_ID,
    396                                               ZCL_S16BIT_DATA_TYPE_ID,(uint8_t *)&requestedValue);
    397                  }
    398          #endif
    399                  break;
    400                default:
    401                  return ZCL_INVALID_ATTRIBUTE_VALUE_STATUS;
    402                  break;
    403            }
    404          
    405          #if APP_ENABLE_CONSOLE == 1
    406            LOG_STRING(setPointStr, "->SetPoints updated by CI: \r\n");
   \   0000005C   0xA813             ADD      R0,SP,#+76
   \   0000005E   0xBF00             Nop      
   \   00000060   0x....             ADR.N    R1,?_0
   \   00000062   0x2220             MOVS     R2,#+32
   \   00000064   0x.... 0x....      BL       __aeabi_memcpy4
    407            appSnprintf(setPointStr);
   \   00000068   0xA813             ADD      R0,SP,#+76
   \   0000006A   0x.... 0x....      BL       appSnprintf
    408            LOG_STRING(modeStr, "#setpoint mode: %d\r\n");
   \   0000006E   0xA80D             ADD      R0,SP,#+52
   \   00000070   0x....             ADR.N    R1,?_1
   \   00000072   0x2218             MOVS     R2,#+24
   \   00000074   0x.... 0x....      BL       __aeabi_memcpy4
    409            appSnprintf(modeStr,payload->mode);
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x5631             LDRSB    R1,[R6, R0]
   \   0000007C   0xA80D             ADD      R0,SP,#+52
   \   0000007E   0x.... 0x....      BL       appSnprintf
    410            LOG_STRING(amtStr, "->setpoint amount updated by: %d.%d C\r\n");
   \   00000082   0xA803             ADD      R0,SP,#+12
   \   00000084   0x....             ADR.N    R1,?_2
   \   00000086   0x2228             MOVS     R2,#+40
   \   00000088   0x.... 0x....      BL       __aeabi_memcpy4
    411            appSnprintf(amtStr, (int)((payload->amount)/THERMOSTAT_SETPOINT_SCALE),(int)((payload->amount)%THERMOSTAT_SETPOINT_SCALE));
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x5634             LDRSB    R4,[R6, R0]
   \   00000090   0x0020             MOVS     R0,R4
   \   00000092   0x210A             MOVS     R1,#+10
   \   00000094   0x.... 0x....      BL       __aeabi_idivmod
   \   00000098   0x000E             MOVS     R6,R1
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0x210A             MOVS     R1,#+10
   \   0000009E   0x.... 0x....      BL       __aeabi_idiv
   \   000000A2   0x0001             MOVS     R1,R0
   \   000000A4   0x0032             MOVS     R2,R6
   \   000000A6   0xA803             ADD      R0,SP,#+12
   \   000000A8   0x.... 0x....      BL       appSnprintf
    412          #endif
    413            // warnings prevention
    414            (void)addressing;
    415            (void)payloadLength;
    416            return ZCL_SUCCESS_STATUS;
   \   000000AC   0x2000             MOVS     R0,#+0
   \                     ??setpointCommandInd_6: (+1)
   \   000000AE   0xB01C             ADD      SP,SP,#+112
   \   000000B0   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??setpointCommandInd_4: (+1)
   \   000000B2   0x347F             ADDS     R4,R4,#+127
   \   000000B4   0x7820             LDRB     R0,[R4, #+0]
   \   000000B6   0x7861             LDRB     R1,[R4, #+1]
   \   000000B8   0x0609             LSLS     R1,R1,#+24
   \   000000BA   0x1409             ASRS     R1,R1,#+16
   \   000000BC   0x4308             ORRS     R0,R0,R1
   \   000000BE   0xB200             SXTH     R0,R0
   \   000000C0   0x2101             MOVS     R1,#+1
   \   000000C2   0x5671             LDRSB    R1,[R6, R1]
   \   000000C4   0x220A             MOVS     R2,#+10
   \   000000C6   0x4351             MULS     R1,R2,R1
   \   000000C8   0x1840             ADDS     R0,R0,R1
   \   000000CA   0x4669             MOV      R1,SP
   \   000000CC   0x8108             STRH     R0,[R1, #+8]
   \   000000CE   0xA802             ADD      R0,SP,#+8
   \   000000D0   0x9001             STR      R0,[SP, #+4]
   \   000000D2   0x2029             MOVS     R0,#+41
   \   000000D4   0x9000             STR      R0,[SP, #+0]
   \   000000D6   0x2314             MOVS     R3,#+20
   \   000000D8   0xE7BB             B        ??setpointCommandInd_5
   \                     ??setpointCommandInd_2: (+1)
   \   000000DA   0x2124             MOVS     R1,#+36
   \   000000DC   0x5C61             LDRB     R1,[R4, R1]
   \   000000DE   0x4201             TST      R1,R0
   \   000000E0   0xD013             BEQ      ??setpointCommandInd_7
   \                     ??setpointCommandInd_8: (+1)
   \   000000E2   0x3461             ADDS     R4,R4,#+97
   \   000000E4   0x7820             LDRB     R0,[R4, #+0]
   \   000000E6   0x7861             LDRB     R1,[R4, #+1]
   \   000000E8   0x0609             LSLS     R1,R1,#+24
   \   000000EA   0x1409             ASRS     R1,R1,#+16
   \   000000EC   0x4308             ORRS     R0,R0,R1
   \   000000EE   0xB200             SXTH     R0,R0
   \   000000F0   0x2101             MOVS     R1,#+1
   \   000000F2   0x5671             LDRSB    R1,[R6, R1]
   \   000000F4   0x220A             MOVS     R2,#+10
   \   000000F6   0x4351             MULS     R1,R2,R1
   \   000000F8   0x1840             ADDS     R0,R0,R1
   \   000000FA   0x4669             MOV      R1,SP
   \   000000FC   0x8108             STRH     R0,[R1, #+8]
   \   000000FE   0xA802             ADD      R0,SP,#+8
   \   00000100   0x9001             STR      R0,[SP, #+4]
   \   00000102   0x2029             MOVS     R0,#+41
   \   00000104   0x9000             STR      R0,[SP, #+0]
   \   00000106   0x2311             MOVS     R3,#+17
   \   00000108   0xE7A3             B        ??setpointCommandInd_5
   \                     ??setpointCommandInd_7: (+1)
   \   0000010A   0x3475             ADDS     R4,R4,#+117
   \   0000010C   0x7820             LDRB     R0,[R4, #+0]
   \   0000010E   0x7861             LDRB     R1,[R4, #+1]
   \   00000110   0x0609             LSLS     R1,R1,#+24
   \   00000112   0x1409             ASRS     R1,R1,#+16
   \   00000114   0x4308             ORRS     R0,R0,R1
   \   00000116   0xB200             SXTH     R0,R0
   \   00000118   0x2101             MOVS     R1,#+1
   \   0000011A   0x5671             LDRSB    R1,[R6, R1]
   \   0000011C   0x220A             MOVS     R2,#+10
   \   0000011E   0x4351             MULS     R1,R2,R1
   \   00000120   0x1840             ADDS     R0,R0,R1
   \   00000122   0x4669             MOV      R1,SP
   \   00000124   0x8108             STRH     R0,[R1, #+8]
   \   00000126   0xA802             ADD      R0,SP,#+8
   \   00000128   0x9001             STR      R0,[SP, #+4]
   \   0000012A   0x2029             MOVS     R0,#+41
   \   0000012C   0x9000             STR      R0,[SP, #+0]
   \   0000012E   0x2313             MOVS     R3,#+19
   \   00000130   0xE78F             B        ??setpointCommandInd_5
   \                     ??setpointCommandInd_1: (+1)
   \   00000132   0x2124             MOVS     R1,#+36
   \   00000134   0x5C61             LDRB     R1,[R4, R1]
   \   00000136   0x4201             TST      R1,R0
   \   00000138   0xD019             BEQ      ??setpointCommandInd_9
   \   0000013A   0x0020             MOVS     R0,R4
   \   0000013C   0x306B             ADDS     R0,R0,#+107
   \   0000013E   0x7801             LDRB     R1,[R0, #+0]
   \   00000140   0x7842             LDRB     R2,[R0, #+1]
   \   00000142   0x0612             LSLS     R2,R2,#+24
   \   00000144   0x1412             ASRS     R2,R2,#+16
   \   00000146   0x4311             ORRS     R1,R1,R2
   \   00000148   0xB209             SXTH     R1,R1
   \   0000014A   0x2001             MOVS     R0,#+1
   \   0000014C   0x5630             LDRSB    R0,[R6, R0]
   \   0000014E   0x220A             MOVS     R2,#+10
   \   00000150   0x4350             MULS     R0,R2,R0
   \   00000152   0x1808             ADDS     R0,R1,R0
   \   00000154   0x4669             MOV      R1,SP
   \   00000156   0x8108             STRH     R0,[R1, #+8]
   \   00000158   0xA802             ADD      R0,SP,#+8
   \   0000015A   0x9001             STR      R0,[SP, #+4]
   \   0000015C   0x2029             MOVS     R0,#+41
   \   0000015E   0x9000             STR      R0,[SP, #+0]
   \   00000160   0x2312             MOVS     R3,#+18
   \   00000162   0x2200             MOVS     R2,#+0
   \   00000164   0x0029             MOVS     R1,R5
   \   00000166   0x2019             MOVS     R0,#+25
   \   00000168   0x.... 0x....      BL       ZCL_WriteAttributeValue
   \   0000016C   0xE7B9             B.N      ??setpointCommandInd_8
   \                     ??setpointCommandInd_9: (+1)
   \   0000016E   0x0020             MOVS     R0,R4
   \   00000170   0x307F             ADDS     R0,R0,#+127
   \   00000172   0x7801             LDRB     R1,[R0, #+0]
   \   00000174   0x7842             LDRB     R2,[R0, #+1]
   \   00000176   0x0612             LSLS     R2,R2,#+24
   \   00000178   0x1412             ASRS     R2,R2,#+16
   \   0000017A   0x4311             ORRS     R1,R1,R2
   \   0000017C   0xB209             SXTH     R1,R1
   \   0000017E   0x2001             MOVS     R0,#+1
   \   00000180   0x5630             LDRSB    R0,[R6, R0]
   \   00000182   0x220A             MOVS     R2,#+10
   \   00000184   0x4350             MULS     R0,R2,R0
   \   00000186   0x1808             ADDS     R0,R1,R0
   \   00000188   0x4669             MOV      R1,SP
   \   0000018A   0x8108             STRH     R0,[R1, #+8]
   \   0000018C   0xA802             ADD      R0,SP,#+8
   \   0000018E   0x9001             STR      R0,[SP, #+4]
   \   00000190   0x2029             MOVS     R0,#+41
   \   00000192   0x9000             STR      R0,[SP, #+0]
   \   00000194   0x2314             MOVS     R3,#+20
   \   00000196   0x2200             MOVS     R2,#+0
   \   00000198   0x0029             MOVS     R1,R5
   \   0000019A   0x2019             MOVS     R0,#+25
   \   0000019C   0x.... 0x....      BL       ZCL_WriteAttributeValue
   \   000001A0   0xE7B3             B.N      ??setpointCommandInd_7
   \                     ??setpointCommandInd_3: (+1)
   \   000001A2   0x2002             MOVS     R0,#+2
   \   000001A4   0xE783             B        ??setpointCommandInd_6
    417          }
    418          
    419          /**************************************************************************//**
    420          \brief Attribute Event indication handler(to indicate when attr values have
    421                  read or written)
    422          
    423          \param[in] addressing - pointer to addressing information;
    424          \param[in] reportLength - data payload length;
    425          \param[in] reportPayload - data pointer
    426          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    427          static void thThermostatAttrEventInd(ZCL_Addressing_t *addressing, ZCL_AttributeId_t attributeId, ZCL_AttributeEvent_t event)
    428          {
   \                     thThermostatAttrEventInd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0A6             SUB      SP,SP,#+152
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    429            if(attributeId == ZCL_THERMOSTAT_CLUSTER_LOCAL_TEMPERATURE_SERVER_ATTRIBUTE_ID && event == ZCL_CONFIGURE_ATTRIBUTE_REPORTING_EVENT)
   \   00000008   0x....             LDR      R4,??DataTable19
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD11D             BNE      ??thThermostatAttrEventInd_0
   \   0000000E   0x2E02             CMP      R6,#+2
   \   00000010   0xD11B             BNE      ??thThermostatAttrEventInd_0
    430            {
    431          #if APP_ENABLE_CONSOLE == 1
    432              LOG_STRING(AttrEventIndStr, "->temperature report configuration updated by CI:\r\n");
   \   00000012   0xA819             ADD      R0,SP,#+100
   \   00000014   0x....             ADR.N    R1,?_3
   \   00000016   0x2234             MOVS     R2,#+52
   \   00000018   0x.... 0x....      BL       __aeabi_memcpy4
    433              appSnprintf(AttrEventIndStr);
   \   0000001C   0xA819             ADD      R0,SP,#+100
   \   0000001E   0x.... 0x....      BL       appSnprintf
    434              LOG_STRING(minStr, "->min Report Interval: %d secs\r\n");
   \   00000022   0xA810             ADD      R0,SP,#+64
   \   00000024   0x....             ADR.N    R1,?_4
   \   00000026   0x2224             MOVS     R2,#+36
   \   00000028   0x.... 0x....      BL       __aeabi_memcpy4
    435              appSnprintf(minStr, thThermostatClusterServerAttributes.localTemperature.minReportInterval);
   \   0000002C   0x3408             ADDS     R4,R4,#+8
   \   0000002E   0x8821             LDRH     R1,[R4, #+0]
   \   00000030   0xA810             ADD      R0,SP,#+64
   \   00000032   0x.... 0x....      BL       appSnprintf
    436              LOG_STRING(maxStr, "->max Report Interval: %d secs\r\n");
   \   00000036   0xA807             ADD      R0,SP,#+28
   \   00000038   0x....             ADR.N    R1,?_5
   \   0000003A   0x2224             MOVS     R2,#+36
   \   0000003C   0x.... 0x....      BL       __aeabi_memcpy4
    437              appSnprintf(maxStr, thThermostatClusterServerAttributes.localTemperature.maxReportInterval);
   \   00000040   0x8861             LDRH     R1,[R4, #+2]
   \   00000042   0xA807             ADD      R0,SP,#+28
   \   00000044   0x.... 0x....      BL       appSnprintf
   \   00000048   0xE017             B        ??thThermostatAttrEventInd_1
    438          #endif
    439            }
    440            else if ( (attributeId == ZCL_THERMOSTAT_CLUSTER_CONTROL_SEQUENCE_OF_OPERATION_SERVER_ATTRIBUTE_ID) 
    441                     && (event == ZCL_WRITE_ATTRIBUTE_EVENT) )
   \                     ??thThermostatAttrEventInd_0: (+1)
   \   0000004A   0x2D1B             CMP      R5,#+27
   \   0000004C   0xD10B             BNE      ??thThermostatAttrEventInd_2
   \   0000004E   0x2E01             CMP      R6,#+1
   \   00000050   0xD109             BNE      ??thThermostatAttrEventInd_2
    442            {
    443              if(!thermostatValidateSystemModeValue(thThermostatClusterServerAttributes.controlSequenceofOperation.value,
    444                                                   thThermostatClusterServerAttributes.systemMode.value))
   \   00000052   0x34BF             ADDS     R4,R4,#+191
   \   00000054   0x79E1             LDRB     R1,[R4, #+7]
   \   00000056   0x7820             LDRB     R0,[R4, #+0]
   \   00000058   0x.... 0x....      BL       thermostatValidateSystemModeValue
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD10C             BNE      ??thThermostatAttrEventInd_1
    445                thThermostatClusterServerAttributes.systemMode.value = ZCL_SYS_MODE_AUTO;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x71E0             STRB     R0,[R4, #+7]
   \   00000064   0xE009             B        ??thThermostatAttrEventInd_1
    446            }
    447            else
    448            {
    449          #if APP_ENABLE_CONSOLE == 1
    450              LOG_STRING(AttrEventIndStr, "<-Attr ID 0x%x event 0x%x\r\n");
   \                     ??thThermostatAttrEventInd_2: (+1)
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x....             ADR.N    R1,?_6
   \   0000006A   0x221C             MOVS     R2,#+28
   \   0000006C   0x.... 0x....      BL       __aeabi_memcpy4
    451              appSnprintf(AttrEventIndStr, attributeId, event);
   \   00000070   0x0032             MOVS     R2,R6
   \   00000072   0x0029             MOVS     R1,R5
   \   00000074   0x4668             MOV      R0,SP
   \   00000076   0x.... 0x....      BL       appSnprintf
    452          #endif
    453            }
    454            (void)addressing;
    455          }
   \                     ??thThermostatAttrEventInd_1: (+1)
   \   0000007A   0xB026             ADD      SP,SP,#+152
   \   0000007C   0xBD70             POP      {R4-R6,PC}       ;; return
    456          /**************************************************************************//**
    457          \brief Validates the possible system mode value for the given control sequence 
    458                 of operation
    459          
    460          \param[in] - Control sequence of operation value
    461          \param[in] - System mode value to be verified
    462          \param[out] - None
    463          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    464          static ZCL_Status_t thermostatValidateSystemModeValue(ZCL_ThControlSeqOfOperation_t ctrlSeqOperation,ZCL_ThSystemMode_t sysModeValue)
    465          {
    466            if(ZCL_SYS_MODE_RESERVED == sysModeValue)
   \                     thermostatValidateSystemModeValue: (+1)
   \   00000000   0x2902             CMP      R1,#+2
   \   00000002   0xD00F             BEQ      ??thermostatValidateSystemModeValue_0
    467            {
    468              return ZCL_FAILURE_STATUS;
    469            }
    470            switch(ctrlSeqOperation)
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xD903             BLS      ??thermostatValidateSystemModeValue_1
   \   00000008   0x1E80             SUBS     R0,R0,#+2
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD906             BLS      ??thermostatValidateSystemModeValue_2
   \   0000000E   0xE003             B        ??thermostatValidateSystemModeValue_3
    471            {
    472              case ZCL_COOL_ONLY:
    473              case ZCL_COOL_WITH_REHEAT:
    474                if((ZCL_SYS_MODE_HEAT == sysModeValue) || (ZCL_SYS_MODE_EMERGENCY_HEATING == sysModeValue))
   \                     ??thermostatValidateSystemModeValue_1: (+1)
   \   00000010   0x2904             CMP      R1,#+4
   \   00000012   0xD007             BEQ      ??thermostatValidateSystemModeValue_0
   \   00000014   0x2905             CMP      R1,#+5
   \   00000016   0xD005             BEQ      ??thermostatValidateSystemModeValue_0
    475                  return ZCL_FAILURE_STATUS;
    476                break;
    477              case ZCL_HEAT_ONLY:
    478              case ZCL_HEAT_WITH_REHEAT:
    479                if((ZCL_SYS_MODE_COOL == sysModeValue) || (ZCL_SYS_MODE_PRECOOLING == sysModeValue))
    480                  return ZCL_FAILURE_STATUS;
    481                break;
    482              case ZCL_COOL_HEAT_4PIPES:      
    483              case ZCL_COOL_HEAT_4PIPES_REHEAT:
    484                return ZCL_SUCCESS_STATUS;
    485                break;
    486              default:
    487                return ZCL_SUCCESS_STATUS;
    488                break;
    489            }
    490            return ZCL_SUCCESS_STATUS;
   \                     ??thermostatValidateSystemModeValue_3: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??thermostatValidateSystemModeValue_2: (+1)
   \   0000001C   0x2903             CMP      R1,#+3
   \   0000001E   0xD001             BEQ      ??thermostatValidateSystemModeValue_0
   \   00000020   0x2906             CMP      R1,#+6
   \   00000022   0xD1F9             BNE      ??thermostatValidateSystemModeValue_3
   \                     ??thermostatValidateSystemModeValue_0: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x4770             BX       LR
    491          }
    492          /**************************************************************************//**
    493            \brief  ZCL action request event handler, 
    494                    handles the ZCL_ACTION_WRITE_ATTR_REQUEST for attribute specific validation
    495          
    496            \param[in] ev - must be BC_ZCL_EVENT_ACTION_REQUEST.
    497            \param[in] data - this field must contain pointer to the BcZCLActionReq_t structure,
    498          
    499            \return None.
    500           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    501          static void thThermostatEventListener(SYS_EventId_t eventId, SYS_EventData_t data)
    502          {
   \                     thThermostatEventListener: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
    503            BcZCLActionReq_t *const actionReq = (BcZCLActionReq_t*)data;
   \   00000004   0x000D             MOVS     R5,R1
    504            int16_t requestedValue = 0;
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x466A             MOV      R2,SP
   \   0000000A   0x8014             STRH     R4,[R2, #+0]
    505            if (BC_ZCL_EVENT_ACTION_REQUEST == eventId)
   \   0000000C   0x283A             CMP      R0,#+58
   \   0000000E   0xD000             BEQ      .+4
   \   00000010   0xE0B9             B        ??thThermostatEventListener_1
    506            {
    507              if (ZCL_ACTION_WRITE_ATTR_REQUEST == actionReq->action)
   \   00000012   0x8828             LDRH     R0,[R5, #+0]
   \   00000014   0x....             LDR      R6,??DataTable20  ;; 0x201
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD000             BEQ      .+4
   \   0000001A   0xE075             B        ??thThermostatEventListener_2
    508              {
    509                ZCLActionWriteAttrReq_t *const zclWriteAttrReq = (ZCLActionWriteAttrReq_t*)actionReq->context;
   \   0000001C   0x686B             LDR      R3,[R5, #+4]
    510                if( (THERMOSTAT_CLUSTER_ID == zclWriteAttrReq->clusterId) && 
    511                        (ZCL_CLUSTER_SIDE_SERVER == zclWriteAttrReq->clusterSide))
   \   0000001E   0x8818             LDRH     R0,[R3, #+0]
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xD170             BNE      ??thThermostatEventListener_3
   \   00000024   0x7898             LDRB     R0,[R3, #+2]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD16D             BNE      ??thThermostatEventListener_3
    512                {
    513                  memcpy((uint8_t *)&requestedValue,zclWriteAttrReq->attrValue, sizeof(int16_t));
   \   0000002A   0x6898             LDR      R0,[R3, #+8]
   \   0000002C   0x4669             MOV      R1,SP
   \   0000002E   0x7802             LDRB     R2,[R0, #0]
   \   00000030   0x700A             STRB     R2,[R1, #0]
   \   00000032   0x7842             LDRB     R2,[R0, #+1]
   \   00000034   0x704A             STRB     R2,[R1, #+1]
    514                  actionReq->denied = 0U;
   \   00000036   0x60AC             STR      R4,[R5, #+8]
    515                  switch(zclWriteAttrReq->attrId)
   \   00000038   0x....             LDR      R2,??DataTable19
   \   0000003A   0x0010             MOVS     R0,R2
   \   0000003C   0x30B1             ADDS     R0,R0,#+177
   \   0000003E   0x9900             LDR      R1,[SP, #+0]
   \   00000040   0xB209             SXTH     R1,R1
   \   00000042   0x2401             MOVS     R4,#+1
   \   00000044   0x889E             LDRH     R6,[R3, #+4]
   \   00000046   0x3E11             SUBS     R6,R6,#+17
   \   00000048   0x2E0B             CMP      R6,#+11
   \   0000004A   0xD85C             BHI      ??thThermostatEventListener_3
   \   0000004C   0xA701             ADR      R7,??thThermostatEventListener_0
   \   0000004E   0x5DBF             LDRB     R7,[R7, R6]
   \   00000050   0x007F             LSLS     R7,R7,#+1
   \   00000052   0x44BF             ADD      PC,PC,R7
   \                     ??thThermostatEventListener_0:
   \   00000054   0x05 0x11          DC8      0x5,0x11,0x13,0x1F
   \              0x13 0x1F    
   \   00000058   0x2C 0x37          DC8      0x2C,0x37,0x39,0x44
   \              0x39 0x44    
   \   0000005C   0x98 0x98          DC8      0x98,0x98,0x98,0x50
   \              0x98 0x50    
    516                  {
    517                    case ZCL_THERMOSTAT_CLUSTER_OCCUPIED_COOLING_SETPOINT_SERVER_ATTRIBUTE_ID:
    518                      if(requestedValue <= (thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value 
    519          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    520                                            + thThermostatClusterServerAttributes.minSetpointDeadBand.value
    521          #endif
    522                                              ))
   \                     ??thThermostatEventListener_4: (+1)
   \   00000060   0x326B             ADDS     R2,R2,#+107
   \   00000062   0x7813             LDRB     R3,[R2, #+0]
   \   00000064   0x7856             LDRB     R6,[R2, #+1]
   \   00000066   0x0636             LSLS     R6,R6,#+24
   \   00000068   0x1436             ASRS     R6,R6,#+16
   \   0000006A   0x4333             ORRS     R3,R3,R6
   \   0000006C   0xB21B             SXTH     R3,R3
   \   0000006E   0x2200             MOVS     R2,#+0
   \   00000070   0x5680             LDRSB    R0,[R0, R2]
   \   00000072   0x1818             ADDS     R0,R3,R0
   \   00000074   0x4288             CMP      R0,R1
   \   00000076   0xE018             B.N      ??thThermostatEventListener_5
    523                        actionReq->denied = 1U;
    524                      break;
    525                    case ZCL_THERMOSTAT_CLUSTER_OCCUPIED_HEATING_SETPOINT_SERVER_ATTRIBUTE_ID:
    526                      if(requestedValue >= (thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value 
    527          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    528                                            - thThermostatClusterServerAttributes.minSetpointDeadBand.value
    529          #endif
    530                                              ))
   \                     ??thThermostatEventListener_6: (+1)
   \   00000078   0x3261             ADDS     R2,R2,#+97
   \   0000007A   0xE00C             B.N      ??thThermostatEventListener_7
    531                        actionReq->denied = 1U;
    532                      break;
    533          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    534                    case ZCL_THERMOSTAT_CLUSTER_UNOCCUPIED_COOLING_SETPOINT_SERVER_ATTRIBUTE_ID:
    535                      if(requestedValue <= (thThermostatClusterServerAttributes.unOccupiedHeatingSetpoint.value + 
    536                                              thThermostatClusterServerAttributes.minSetpointDeadBand.value))
   \                     ??thThermostatEventListener_8: (+1)
   \   0000007C   0x327F             ADDS     R2,R2,#+127
   \   0000007E   0x7813             LDRB     R3,[R2, #+0]
   \   00000080   0x7856             LDRB     R6,[R2, #+1]
   \   00000082   0x0636             LSLS     R6,R6,#+24
   \   00000084   0x1436             ASRS     R6,R6,#+16
   \   00000086   0x4333             ORRS     R3,R3,R6
   \   00000088   0xB21B             SXTH     R3,R3
   \   0000008A   0x2200             MOVS     R2,#+0
   \   0000008C   0x5680             LDRSB    R0,[R0, R2]
   \   0000008E   0x1818             ADDS     R0,R3,R0
   \   00000090   0x4288             CMP      R0,R1
   \   00000092   0xE00A             B.N      ??thThermostatEventListener_5
    537                        actionReq->denied = 1U;
    538                      break;
    539                    case ZCL_THERMOSTAT_CLUSTER_UNOCCUPIED_HEATING_SETPOINT_SERVER_ATTRIBUTE_ID: 
    540                      if(requestedValue >= (thThermostatClusterServerAttributes.unOccupiedCoolingSetpoint.value -
    541                                              thThermostatClusterServerAttributes.minSetpointDeadBand.value))
   \                     ??thThermostatEventListener_9: (+1)
   \   00000094   0x3275             ADDS     R2,R2,#+117
   \                     ??thThermostatEventListener_7: (+1)
   \   00000096   0x7813             LDRB     R3,[R2, #+0]
   \   00000098   0x7856             LDRB     R6,[R2, #+1]
   \   0000009A   0x0636             LSLS     R6,R6,#+24
   \   0000009C   0x1436             ASRS     R6,R6,#+16
   \   0000009E   0x4333             ORRS     R3,R3,R6
   \   000000A0   0xB21B             SXTH     R3,R3
   \   000000A2   0x2200             MOVS     R2,#+0
   \   000000A4   0x5680             LDRSB    R0,[R0, R2]
   \   000000A6   0x1A18             SUBS     R0,R3,R0
   \   000000A8   0x4281             CMP      R1,R0
   \                     ??thThermostatEventListener_5: (+1)
   \   000000AA   0xDB6C             BLT      ??thThermostatEventListener_1
    542                        actionReq->denied = 1U;
   \   000000AC   0xE02A             B.N      ??thThermostatEventListener_10
    543                      break;
    544                    case ZCL_THERMOSTAT_CLUSTER_MIN_HEAT_SETPOINT_LIMIT_SERVER_ATTRIBUTE_ID:
    545                      if(requestedValue < thThermostatClusterServerAttributes.absMinHeatSetpointLimit.value)
   \                     ??thThermostatEventListener_11: (+1)
   \   000000AE   0x322B             ADDS     R2,R2,#+43
   \   000000B0   0x7810             LDRB     R0,[R2, #+0]
   \   000000B2   0x7851             LDRB     R1,[R2, #+1]
   \   000000B4   0x0609             LSLS     R1,R1,#+24
   \   000000B6   0x1409             ASRS     R1,R1,#+16
   \   000000B8   0x4308             ORRS     R0,R0,R1
   \   000000BA   0x9900             LDR      R1,[SP, #+0]
   \   000000BC   0xB209             SXTH     R1,R1
   \   000000BE   0xB200             SXTH     R0,R0
   \   000000C0   0x4281             CMP      R1,R0
   \   000000C2   0xE016             B.N      ??thThermostatEventListener_12
    546                        actionReq->denied = 1U;
    547                      break;
    548                    case ZCL_THERMOSTAT_CLUSTER_MAX_HEAT_SETPOINT_LIMIT_SERVER_ATTRIBUTE_ID:
    549                      if(requestedValue > thThermostatClusterServerAttributes.absMaxHeatSetpointLimit.value)
   \                     ??thThermostatEventListener_13: (+1)
   \   000000C4   0x3235             ADDS     R2,R2,#+53
   \   000000C6   0xE00B             B.N      ??thThermostatEventListener_14
    550                        actionReq->denied = 1U;
    551                      break;
    552                    case ZCL_THERMOSTAT_CLUSTER_MIN_COOL_SETPOINT_LIMIT_SERVER_ATTRIBUTE_ID:
    553                      if(requestedValue < thThermostatClusterServerAttributes.absMinCoolSetpointLimit.value)
   \                     ??thThermostatEventListener_15: (+1)
   \   000000C8   0x323F             ADDS     R2,R2,#+63
   \   000000CA   0x7810             LDRB     R0,[R2, #+0]
   \   000000CC   0x7851             LDRB     R1,[R2, #+1]
   \   000000CE   0x0609             LSLS     R1,R1,#+24
   \   000000D0   0x1409             ASRS     R1,R1,#+16
   \   000000D2   0x4308             ORRS     R0,R0,R1
   \   000000D4   0x9900             LDR      R1,[SP, #+0]
   \   000000D6   0xB209             SXTH     R1,R1
   \   000000D8   0xB200             SXTH     R0,R0
   \   000000DA   0x4281             CMP      R1,R0
   \   000000DC   0xE009             B.N      ??thThermostatEventListener_12
    554                        actionReq->denied = 1U;
    555                      break;
    556                    case ZCL_THERMOSTAT_CLUSTER_MAX_COOL_SETPOINT_LIMIT_SERVER_ATTRIBUTE_ID:
    557                      if(requestedValue > thThermostatClusterServerAttributes.absMaxCoolSetpointLimit.value)
   \                     ??thThermostatEventListener_16: (+1)
   \   000000DE   0x3249             ADDS     R2,R2,#+73
   \                     ??thThermostatEventListener_14: (+1)
   \   000000E0   0x7810             LDRB     R0,[R2, #+0]
   \   000000E2   0x7851             LDRB     R1,[R2, #+1]
   \   000000E4   0x0609             LSLS     R1,R1,#+24
   \   000000E6   0x1409             ASRS     R1,R1,#+16
   \   000000E8   0x4308             ORRS     R0,R0,R1
   \   000000EA   0x9900             LDR      R1,[SP, #+0]
   \   000000EC   0xB209             SXTH     R1,R1
   \   000000EE   0xB200             SXTH     R0,R0
   \   000000F0   0x4288             CMP      R0,R1
   \                     ??thThermostatEventListener_12: (+1)
   \   000000F2   0xDA48             BGE      ??thThermostatEventListener_1
    558                        actionReq->denied = 1U;
   \   000000F4   0xE006             B.N      ??thThermostatEventListener_10
    559                      break;
    560          #endif            
    561                    case ZCL_THERMOSTAT_CLUSTER_SYSTEM_MODE_SERVER_ATTRIBUTE_ID:
    562                      if(ZCL_SUCCESS_STATUS != thermostatValidateSystemModeValue(thThermostatClusterServerAttributes.controlSequenceofOperation.value, 
    563                                                                                 (ZCL_ThSystemMode_t)*(zclWriteAttrReq->attrValue)))
   \                     ??thThermostatEventListener_17: (+1)
   \   000000F6   0x6899             LDR      R1,[R3, #+8]
   \   000000F8   0x7809             LDRB     R1,[R1, #+0]
   \   000000FA   0x7B80             LDRB     R0,[R0, #+14]
   \   000000FC   0x.... 0x....      BL       thermostatValidateSystemModeValue
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD040             BEQ      ??thThermostatEventListener_1
    564                        actionReq->denied = 1U;
   \                     ??thThermostatEventListener_10: (+1)
   \   00000104   0x60AC             STR      R4,[R5, #+8]
   \                     ??thThermostatEventListener_3: (+1)
   \   00000106   0xE03E             B        ??thThermostatEventListener_1
    565                      break;
    566                    default:
    567                      break;
    568                  }
    569                }
    570              }
    571              else if (ZCL_ACTION_RESET_ALARM_REQUEST == actionReq->action)
   \                     ??thThermostatEventListener_2: (+1)
   \   00000108   0x2804             CMP      R0,#+4
   \   0000010A   0xD13C             BNE      ??thThermostatEventListener_1
    572              {
    573                ZCL_ResetAlarmNotification_t  *resetAlarmNotification = (ZCL_ResetAlarmNotification_t *)(actionReq->context);
   \   0000010C   0x686D             LDR      R5,[R5, #+4]
    574          
    575                if ((ZCL_ALARMS_CLUSTER_SERVER_RESET_ALARM_COMMAND_ID == resetAlarmNotification->commandId) && \
    576            	      (THERMOSTAT_CLUSTER_ID == resetAlarmNotification->clusterIdentifier))
   \   0000010E   0x7828             LDRB     R0,[R5, #+0]
   \   00000110   0x2800             CMP      R0,#+0
   \   00000112   0xD11D             BNE      ??thThermostatEventListener_18
   \   00000114   0x78A9             LDRB     R1,[R5, #+2]
   \   00000116   0x78EA             LDRB     R2,[R5, #+3]
   \   00000118   0x0612             LSLS     R2,R2,#+24
   \   0000011A   0x0C12             LSRS     R2,R2,#+16
   \   0000011C   0x4311             ORRS     R1,R1,R2
   \   0000011E   0x42B1             CMP      R1,R6
   \   00000120   0xD116             BNE      ??thThermostatEventListener_18
    577                {
    578                  //reset the alarmCode
    579          #if APP_ENABLE_CONSOLE == 1
    580                  LOG_STRING(resetAlarmEventStr, "->thermostatResetAlarm:%d \r\n");
   \   00000122   0xA808             ADD      R0,SP,#+32
   \   00000124   0x....             ADR.N    R1,?_7
   \   00000126   0x2220             MOVS     R2,#+32
   \   00000128   0x.... 0x....      BL       __aeabi_memcpy4
    581                  appSnprintf(resetAlarmEventStr, resetAlarmNotification->alarmCode);
   \   0000012C   0x7869             LDRB     R1,[R5, #+1]
   \   0000012E   0xA808             ADD      R0,SP,#+32
   \   00000130   0x.... 0x....      BL       appSnprintf
    582          #endif
    583                  if (isAlarmActive(resetAlarmNotification->alarmCode))
   \   00000134   0x7868             LDRB     R0,[R5, #+1]
   \   00000136   0x.... 0x....      BL       isAlarmActive
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD023             BEQ      ??thThermostatEventListener_1
    584                  {
    585                    setAlarmState(resetAlarmNotification->alarmCode, false);
   \   0000013E   0x2100             MOVS     R1,#+0
   \   00000140   0x7868             LDRB     R0,[R5, #+1]
   \   00000142   0x.... 0x....      BL       setAlarmState
    586                    alarmNotification(resetAlarmNotification->alarmCode, THERMOSTAT_CLUSTER_ID);
   \   00000146   0x0031             MOVS     R1,R6
   \   00000148   0x7868             LDRB     R0,[R5, #+1]
   \   0000014A   0x.... 0x....      BL       alarmNotification
   \   0000014E   0xE01A             B        ??thThermostatEventListener_1
    587                  }
    588                }
    589                else if (ZCL_ALARMS_CLUSTER_SERVER_RESET_ALL_ALARMS_COMMAND_ID == resetAlarmNotification->commandId)
   \                     ??thThermostatEventListener_18: (+1)
   \   00000150   0x2801             CMP      R0,#+1
   \   00000152   0xD118             BNE      ??thThermostatEventListener_1
    590                {
    591          #if APP_ENABLE_CONSOLE == 1
    592                  LOG_STRING(resetAllAlarmEventStr, "->thermostatResetAllAlarm\r\n");
   \   00000154   0xA801             ADD      R0,SP,#+4
   \   00000156   0xBF00             Nop      
   \   00000158   0x....             ADR.N    R1,?_8
   \   0000015A   0x221C             MOVS     R2,#+28
   \   0000015C   0x.... 0x....      BL       __aeabi_memcpy4
    593                  appSnprintf(resetAllAlarmEventStr);
   \   00000160   0xA801             ADD      R0,SP,#+4
   \   00000162   0x.... 0x....      BL       appSnprintf
    594          #endif
    595                  for (uint8_t i = 0; i < NO_OF_ALARM_CODES; i++)
    596                  {
    597                    if (isAlarmActive(i))
   \                     ??thThermostatEventListener_19: (+1)
   \   00000166   0x0020             MOVS     R0,R4
   \   00000168   0x.... 0x....      BL       isAlarmActive
   \   0000016C   0x2800             CMP      R0,#+0
   \   0000016E   0xD007             BEQ      ??thThermostatEventListener_20
    598                    {
    599                      setAlarmState(i, false);
   \   00000170   0x2100             MOVS     R1,#+0
   \   00000172   0x0020             MOVS     R0,R4
   \   00000174   0x.... 0x....      BL       setAlarmState
    600                      alarmNotification(i, THERMOSTAT_CLUSTER_ID);
   \   00000178   0x0031             MOVS     R1,R6
   \   0000017A   0x0020             MOVS     R0,R4
   \   0000017C   0x.... 0x....      BL       alarmNotification
    601                    }
    602                  }
   \                     ??thThermostatEventListener_20: (+1)
   \   00000180   0x1C64             ADDS     R4,R4,#+1
   \   00000182   0x2C03             CMP      R4,#+3
   \   00000184   0xDBEF             BLT      ??thThermostatEventListener_19
    603                }
    604              }
    605            }
    606          }
   \                     ??thThermostatEventListener_1: (+1)
   \   00000186   0xB011             ADD      SP,SP,#+68
   \   00000188   0xBDF0             POP      {R4-R7,PC}       ;; return
    607          
    608          #ifdef BOARD_QTOUCH_XPRO
    609          /**************************************************************************//**
    610          \brief Report Attr confirmation
    611          
    612          \param[in] ntfy - pointer to status
    613          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    614          static void ZCL_ReportAttributeResp(ZCL_Notify_t *ntfy)
    615          {
   \                     ZCL_ReportAttributeResp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB09A             SUB      SP,SP,#+104
   \   00000004   0x0004             MOVS     R4,R0
    616            if (ZCL_SUCCESS_STATUS == ntfy->status)
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD109             BNE      ??ZCL_ReportAttributeResp_0
    617            {
    618              LOG_STRING(reportAttrSuccessStr, "->Report setpoint update to CI success\r\n");
   \   0000000C   0xA80E             ADD      R0,SP,#+56
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R1,?_9
   \   00000012   0x222C             MOVS     R2,#+44
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy4
    619              appSnprintf(reportAttrSuccessStr);
   \   00000018   0xA80E             ADD      R0,SP,#+56
   \   0000001A   0x.... 0x....      BL       appSnprintf
   \   0000001E   0xE009             B        ??ZCL_ReportAttributeResp_1
    620            }
    621            else
    622            {
    623              LOG_STRING(reportAttrSuccessStr, "->Report setpoint update to CI failed: status = 0x%2x\r\n");
   \                     ??ZCL_ReportAttributeResp_0: (+1)
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0xBF00             Nop      
   \   00000024   0x....             ADR.N    R1,?_10
   \   00000026   0x2238             MOVS     R2,#+56
   \   00000028   0x.... 0x....      BL       __aeabi_memcpy4
    624              appSnprintf(reportAttrSuccessStr, (unsigned)ntfy->status);
   \   0000002C   0x7821             LDRB     R1,[R4, #+0]
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x.... 0x....      BL       appSnprintf
    625            }
    626          }
   \                     ??ZCL_ReportAttributeResp_1: (+1)
   \   00000034   0xB01A             ADD      SP,SP,#+104
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    627          /**************************************************************************//**
    628          \brief Local change of setpoints through Touch button
    629          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    630          void thermostatSetPointsChangeButton(int8_t mode,uint8_t amount)
    631          {
   \                     thermostatSetPointsChangeButton: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0A1             SUB      SP,SP,#+132
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x000E             MOVS     R6,R1
    632            /* notify combined interface that setpoints have been locally changed */
    633            ZCL_Request_t *req;
    634            setPoint_t reportAttrReq[2];
    635            int16_t data[2];
    636            int16_t setPointValue;
    637          
    638            if (!(req = getFreeCommand()))
   \   00000008   0x.... 0x....      BL       getFreeCommand
   \   0000000C   0x0005             MOVS     R5,R0
   \   0000000E   0xD100             BNE      .+4
   \   00000010   0xE0AD             B        ??thermostatSetPointsChangeButton_0
    639              return;
    640            
    641            switch(mode)
   \   00000012   0x....             LDR      R4,??DataTable25
   \   00000014   0x2F00             CMP      R7,#+0
   \   00000016   0xD002             BEQ      ??thermostatSetPointsChangeButton_1
   \   00000018   0x2F01             CMP      R7,#+1
   \   0000001A   0xD003             BEQ      ??thermostatSetPointsChangeButton_2
   \   0000001C   0xE010             B        ??thermostatSetPointsChangeButton_3
    642            {
    643                case ADJUST_HEAT_SETPOINT:
    644                  setPointValue = MIN_HEAT_SETPOINT_LIMIT + (((MAX_HEAT_SETPOINT_LIMIT - MIN_HEAT_SETPOINT_LIMIT) * amount)/255);
    645                  thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value = setPointValue;
   \                     ??thermostatSetPointsChangeButton_1: (+1)
   \   0000001E   0x0027             MOVS     R7,R4
   \   00000020   0x376B             ADDS     R7,R7,#+107
   \   00000022   0xE001             B        ??thermostatSetPointsChangeButton_4
    646                  break;
    647                  
    648                case ADJUST_COOL_SETPOINT:
    649                  setPointValue = MIN_COOL_SETPOINT_LIMIT + (((MAX_COOL_SETPOINT_LIMIT - MIN_COOL_SETPOINT_LIMIT) * amount)/255);
    650                  thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value = setPointValue;
   \                     ??thermostatSetPointsChangeButton_2: (+1)
   \   00000024   0x0027             MOVS     R7,R4
   \   00000026   0x3761             ADDS     R7,R7,#+97
   \                     ??thermostatSetPointsChangeButton_4: (+1)
   \   00000028   0x2096             MOVS     R0,#+150
   \   0000002A   0x0100             LSLS     R0,R0,#+4        ;; #+2400
   \   0000002C   0x4346             MULS     R6,R0,R6
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0x21FF             MOVS     R1,#+255
   \   00000032   0x.... 0x....      BL       __aeabi_idiv
   \   00000036   0x....             LDR      R1,??DataTable25_1  ;; 0x5dc
   \   00000038   0x1840             ADDS     R0,R0,R1
   \   0000003A   0x7038             STRB     R0,[R7, #+0]
   \   0000003C   0x0A00             LSRS     R0,R0,#+8
   \   0000003E   0x7078             STRB     R0,[R7, #+1]
    651                  break;
    652                      
    653                default:
    654                  break;
    655            }
    656            LOG_STRING(setPointsStr, "Local update of setpoints done\r\n");
   \                     ??thermostatSetPointsChangeButton_3: (+1)
   \   00000040   0xA817             ADD      R0,SP,#+92
   \   00000042   0xBF00             Nop      
   \   00000044   0x....             ADR.N    R1,?_11
   \   00000046   0x2224             MOVS     R2,#+36
   \   00000048   0x.... 0x....      BL       __aeabi_memcpy4
    657            appSnprintf(setPointsStr);
   \   0000004C   0xA817             ADD      R0,SP,#+92
   \   0000004E   0x.... 0x....      BL       appSnprintf
    658            LOG_STRING(minStr, "#current cool setpoint: %d.%d C\r\n");
   \   00000052   0xA80E             ADD      R0,SP,#+56
   \   00000054   0x....             ADR.N    R1,?_12
   \   00000056   0x2224             MOVS     R2,#+36
   \   00000058   0x.... 0x....      BL       __aeabi_memcpy4
    659            appSnprintf(minStr, (int)(thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value/LOCAL_TEMPERATURE_CONST), \
    660              (int)(thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value%LOCAL_TEMPERATURE_CONST));
   \   0000005C   0x0021             MOVS     R1,R4
   \   0000005E   0x3161             ADDS     R1,R1,#+97
   \   00000060   0x7808             LDRB     R0,[R1, #+0]
   \   00000062   0x784A             LDRB     R2,[R1, #+1]
   \   00000064   0x0612             LSLS     R2,R2,#+24
   \   00000066   0x1412             ASRS     R2,R2,#+16
   \   00000068   0x4310             ORRS     R0,R0,R2
   \   0000006A   0x0021             MOVS     R1,R4
   \   0000006C   0x3161             ADDS     R1,R1,#+97
   \   0000006E   0x780F             LDRB     R7,[R1, #+0]
   \   00000070   0x784A             LDRB     R2,[R1, #+1]
   \   00000072   0x0612             LSLS     R2,R2,#+24
   \   00000074   0x1412             ASRS     R2,R2,#+16
   \   00000076   0x4317             ORRS     R7,R7,R2
   \   00000078   0xB200             SXTH     R0,R0
   \   0000007A   0x2164             MOVS     R1,#+100
   \   0000007C   0x.... 0x....      BL       __aeabi_idivmod
   \   00000080   0x9100             STR      R1,[SP, #+0]
   \   00000082   0xB238             SXTH     R0,R7
   \   00000084   0x2164             MOVS     R1,#+100
   \   00000086   0x.... 0x....      BL       __aeabi_idiv
   \   0000008A   0x0001             MOVS     R1,R0
   \   0000008C   0x9A00             LDR      R2,[SP, #+0]
   \   0000008E   0xA80E             ADD      R0,SP,#+56
   \   00000090   0x.... 0x....      BL       appSnprintf
    661            LOG_STRING(maxStr, "#current heat setpoint: %d.%d C\r\n");
   \   00000094   0xA805             ADD      R0,SP,#+20
   \   00000096   0xBF00             Nop      
   \   00000098   0x....             ADR.N    R1,?_13
   \   0000009A   0x2224             MOVS     R2,#+36
   \   0000009C   0x.... 0x....      BL       __aeabi_memcpy4
    662            appSnprintf(maxStr, (int)(thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value/LOCAL_TEMPERATURE_CONST), \
    663              (int)(thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value%LOCAL_TEMPERATURE_CONST));   
   \   000000A0   0x0020             MOVS     R0,R4
   \   000000A2   0x306B             ADDS     R0,R0,#+107
   \   000000A4   0x7801             LDRB     R1,[R0, #+0]
   \   000000A6   0x7842             LDRB     R2,[R0, #+1]
   \   000000A8   0x0612             LSLS     R2,R2,#+24
   \   000000AA   0x1412             ASRS     R2,R2,#+16
   \   000000AC   0x4311             ORRS     R1,R1,R2
   \   000000AE   0x0020             MOVS     R0,R4
   \   000000B0   0x306B             ADDS     R0,R0,#+107
   \   000000B2   0x7807             LDRB     R7,[R0, #+0]
   \   000000B4   0x7842             LDRB     R2,[R0, #+1]
   \   000000B6   0x0612             LSLS     R2,R2,#+24
   \   000000B8   0x1412             ASRS     R2,R2,#+16
   \   000000BA   0x4317             ORRS     R7,R7,R2
   \   000000BC   0xB208             SXTH     R0,R1
   \   000000BE   0x2164             MOVS     R1,#+100
   \   000000C0   0x.... 0x....      BL       __aeabi_idivmod
   \   000000C4   0x9100             STR      R1,[SP, #+0]
   \   000000C6   0xB238             SXTH     R0,R7
   \   000000C8   0x2164             MOVS     R1,#+100
   \   000000CA   0x.... 0x....      BL       __aeabi_idiv
   \   000000CE   0x0001             MOVS     R1,R0
   \   000000D0   0x9A00             LDR      R2,[SP, #+0]
   \   000000D2   0xA805             ADD      R0,SP,#+20
   \   000000D4   0x.... 0x....      BL       appSnprintf
    664            
    665            data[0] = thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value;
   \   000000D8   0x0020             MOVS     R0,R4
   \   000000DA   0x3061             ADDS     R0,R0,#+97
   \   000000DC   0x7801             LDRB     R1,[R0, #+0]
   \   000000DE   0x7842             LDRB     R2,[R0, #+1]
   \   000000E0   0x0612             LSLS     R2,R2,#+24
   \   000000E2   0x1412             ASRS     R2,R2,#+16
   \   000000E4   0x4311             ORRS     R1,R1,R2
   \   000000E6   0xAE01             ADD      R6,SP,#+4
   \   000000E8   0x8031             STRH     R1,[R6, #+0]
    666            data[1] = thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value;
   \   000000EA   0x346B             ADDS     R4,R4,#+107
   \   000000EC   0x7820             LDRB     R0,[R4, #+0]
   \   000000EE   0x7861             LDRB     R1,[R4, #+1]
   \   000000F0   0x0609             LSLS     R1,R1,#+24
   \   000000F2   0x1409             ASRS     R1,R1,#+16
   \   000000F4   0x4308             ORRS     R0,R0,R1
   \   000000F6   0x8070             STRH     R0,[R6, #+2]
    667            
    668            reportAttrReq[0].id = ZCL_THERMOSTAT_CLUSTER_OCCUPIED_COOLING_SETPOINT_SERVER_ATTRIBUTE_ID;
   \   000000F8   0xAF02             ADD      R7,SP,#+8
   \   000000FA   0x2011             MOVS     R0,#+17
   \   000000FC   0x8038             STRH     R0,[R7, #+0]
   \   000000FE   0x2029             MOVS     R0,#+41
   \   00000100   0x70B8             STRB     R0,[R7, #+2]
    669            reportAttrReq[0].type = ZCL_S16BIT_DATA_TYPE_ID;
    670            reportAttrReq[0].properties= ZCL_READWRITE_ATTRIBUTE;
   \   00000102   0x2400             MOVS     R4,#+0
   \   00000104   0x70FC             STRB     R4,[R7, #+3]
    671            memcpy(&reportAttrReq[0].value, &data[0],sizeof(int16_t));
   \   00000106   0x2202             MOVS     R2,#+2
   \   00000108   0xA901             ADD      R1,SP,#+4
   \   0000010A   0x1D38             ADDS     R0,R7,#+4
   \   0000010C   0x.... 0x....      BL       __aeabi_memcpy4
    672            
    673            reportAttrReq[1].id = ZCL_THERMOSTAT_CLUSTER_OCCUPIED_HEATING_SETPOINT_SERVER_ATTRIBUTE_ID;
   \   00000110   0x2012             MOVS     R0,#+18
   \   00000112   0x80F8             STRH     R0,[R7, #+6]
    674            reportAttrReq[1].type = ZCL_S16BIT_DATA_TYPE_ID;
   \   00000114   0x2029             MOVS     R0,#+41
   \   00000116   0x7238             STRB     R0,[R7, #+8]
    675            reportAttrReq[1].properties= ZCL_READWRITE_ATTRIBUTE;
   \   00000118   0x727C             STRB     R4,[R7, #+9]
    676            memcpy(&reportAttrReq[1].value, &data[1],sizeof(int16_t));
   \   0000011A   0x1CB6             ADDS     R6,R6,#+2
   \   0000011C   0x370A             ADDS     R7,R7,#+10
   \   0000011E   0x7830             LDRB     R0,[R6, #0]
   \   00000120   0x7038             STRB     R0,[R7, #0]
   \   00000122   0x7870             LDRB     R0,[R6, #+1]
   \   00000124   0x7078             STRB     R0,[R7, #+1]
    677            
    678            memcpy(req->requestPayload, (uint8_t *)&reportAttrReq, sizeof(reportAttrReq));
   \   00000126   0x220C             MOVS     R2,#+12
   \   00000128   0xA902             ADD      R1,SP,#+8
   \   0000012A   0x6CE8             LDR      R0,[R5, #+76]
   \   0000012C   0x.... 0x....      BL       __aeabi_memcpy
    679          
    680            fillCommandRequest(req, ZCL_REPORT_ATTRIBUTES_COMMAND_ID, sizeof(reportAttrReq));
   \   00000130   0x220C             MOVS     R2,#+12
   \   00000132   0x210A             MOVS     R1,#+10
   \   00000134   0x0028             MOVS     R0,R5
   \   00000136   0x.... 0x....      BL       fillCommandRequest
    681          
    682            req->dstAddressing.addrMode             = APS_NO_ADDRESS;
   \   0000013A   0x0028             MOVS     R0,R5
   \   0000013C   0x3018             ADDS     R0,R0,#+24
   \   0000013E   0x7204             STRB     R4,[R0, #+8]
    683            req->dstAddressing.addr.shortAddress    = 0;
   \   00000140   0x8204             STRH     R4,[R0, #+16]
    684            req->dstAddressing.profileId            = PROFILE_ID_HOME_AUTOMATION;
   \   00000142   0x2182             MOVS     R1,#+130
   \   00000144   0x0049             LSLS     R1,R1,#+1        ;; #+260
   \   00000146   0x8401             STRH     R1,[R0, #+32]
    685            req->dstAddressing.endpointId           = APP_ENDPOINT_COMBINED_INTERFACE;
   \   00000148   0x0029             MOVS     R1,R5
   \   0000014A   0x313A             ADDS     R1,R1,#+58
   \   0000014C   0x2214             MOVS     R2,#+20
   \   0000014E   0x700A             STRB     R2,[R1, #+0]
    686            req->dstAddressing.clusterId            = THERMOSTAT_CLUSTER_ID;
   \   00000150   0x....             LDR      R2,??DataTable20  ;; 0x201
   \   00000152   0x804A             STRH     R2,[R1, #+2]
    687            req->dstAddressing.clusterSide          = ZCL_CLUSTER_SIDE_CLIENT;
   \   00000154   0x2201             MOVS     R2,#+1
   \   00000156   0x710A             STRB     R2,[R1, #+4]
    688            req->dstAddressing.manufacturerSpecCode = 0;
   \   00000158   0x80CC             STRH     R4,[R1, #+6]
    689            req->dstAddressing.sequenceNumber       = ZCL_GetNextSeqNumber();
   \   0000015A   0x....             LDR      R2,??DataTable25_2
   \   0000015C   0x7813             LDRB     R3,[R2, #+0]
   \   0000015E   0x1C5C             ADDS     R4,R3,#+1
   \   00000160   0x7014             STRB     R4,[R2, #+0]
   \   00000162   0x720B             STRB     R3,[R1, #+8]
    690            req->ZCL_Notify = ZCL_ReportAttributeResp;
   \   00000164   0x....             LDR      R1,??DataTable25_3
   \   00000166   0x6001             STR      R1,[R0, #+0]
    691          
    692            commandManagerSendAttribute(req);
   \   00000168   0x0028             MOVS     R0,R5
   \   0000016A   0x.... 0x....      BL       commandManagerSendAttribute
    693          }
   \                     ??thermostatSetPointsChangeButton_0: (+1)
   \   0000016E   0xB021             ADD      SP,SP,#+132
   \   00000170   0xBDF0             POP      {R4-R7,PC}       ;; return
    694          #endif
    695          
    696          #ifdef ZCL_THERMOSTAT_CLUSTER_INCLUDE_OPTIONAL_ATTRIBUTES
    697          /**************************************************************************//**
    698            \brief  Sets the occupancy attribute value         
    699          
    700            \param[in] value - Occupied or Not occupied
    701            \return Success(if valid value) / Failure (if not valid value)
    702           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    703          ZCL_Status_t thermostatSetOccupancy(ZCL_ThOccupancy_t value)
    704          {
    705            if ((ZCL_OCCUPIED == value) || (ZCL_NOT_OCCUPIED == value))
   \                     thermostatSetOccupancy: (+1)
   \   00000000   0x2801             CMP      R0,#+1
   \   00000002   0xD001             BEQ      ??thermostatSetOccupancy_0
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD10B             BNE      ??thermostatSetOccupancy_1
    706            {
    707              thThermostatClusterServerAttributes.occupancy.value.occupied = value;
   \                     ??thermostatSetOccupancy_0: (+1)
   \   00000008   0x....             LDR      R1,??DataTable25
   \   0000000A   0x2224             MOVS     R2,#+36
   \   0000000C   0x5C8A             LDRB     R2,[R1, R2]
   \   0000000E   0x23FE             MOVS     R3,#+254
   \   00000010   0x4013             ANDS     R3,R3,R2
   \   00000012   0x07C2             LSLS     R2,R0,#+31
   \   00000014   0x0FD2             LSRS     R2,R2,#+31
   \   00000016   0x431A             ORRS     R2,R2,R3
   \   00000018   0x3124             ADDS     R1,R1,#+36
   \   0000001A   0x700A             STRB     R2,[R1, #+0]
    708              return ZCL_SUCCESS_STATUS;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x4770             BX       LR
    709            }
    710            else 
    711              return ZCL_FAILURE_STATUS;
   \                     ??thermostatSetOccupancy_1: (+1)
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x4770             BX       LR               ;; return
    712          }
    713          #endif
    714          /**************************************************************************//**
    715          \brief Trigger alarm condition
    716          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    717          void thermostatSetAlarmCondition(ZclThermostatAlarmCode_t alarmCode, bool alarmSet)
    718          {
   \                     thermostatSetAlarmCondition: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    719            uint8_t attrVal   = *(uint8_t *)&thThermostatClusterServerAttributes.alarmMask.value;
    720            if (attrVal & (1 << alarmCode))
   \   00000006   0x....             LDR      R0,??DataTable25_4
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x40A9             LSLS     R1,R1,R5
   \   0000000E   0x4208             TST      R0,R1
   \   00000010   0xD009             BEQ      ??thermostatSetAlarmCondition_0
    721            {
    722              setAlarmState(alarmCode,alarmSet);
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x.... 0x....      BL       setAlarmState
    723          
    724              if (true == alarmSet)
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD003             BEQ      ??thermostatSetAlarmCondition_0
    725                alarmNotification(alarmCode, THERMOSTAT_CLUSTER_ID);
   \   0000001E   0x....             LDR      R1,??DataTable25_5  ;; 0x201
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x.... 0x....      BL       alarmNotification
    726            }
    727          }
   \                     ??thermostatSetAlarmCondition_0: (+1)
   \   00000026   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    728          /**************************************************************************//**
    729          \brief Set alarm mask
    730          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    731          void thermostatSetAlarmMask(uint8_t alarmMask)
    732          {
   \                     thermostatSetAlarmMask: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    733            uint8_t *ptr = (uint8_t *)&thThermostatClusterServerAttributes.alarmMask.value;
    734            *ptr = alarmMask;
   \   00000002   0x....             LDR      R1,??DataTable25_4
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    735            for (uint8_t i = 0; i < NO_OF_ALARM_CODES; i++)
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             LDR      R2,??DataTable25_6
   \   0000000A   0x7813             LDRB     R3,[R2, #+0]
    736            {
    737              if (!(alarmMask & ((uint8_t)1 << i)))
   \                     ??thermostatSetAlarmMask_0: (+1)
   \   0000000C   0x2401             MOVS     R4,#+1
   \   0000000E   0x408C             LSLS     R4,R4,R1
   \   00000010   0x4220             TST      R0,R4
   \   00000012   0xD100             BNE      ??thermostatSetAlarmMask_1
    738                activeAlarms &= ~((uint8_t)1 << i);
   \   00000014   0x43A3             BICS     R3,R3,R4
    739            }
   \                     ??thermostatSetAlarmMask_1: (+1)
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0x2903             CMP      R1,#+3
   \   0000001A   0xDBF7             BLT      ??thermostatSetAlarmMask_0
   \   0000001C   0x7013             STRB     R3,[R2, #+0]
    740          }
   \   0000001E   0xBD30             POP      {R4,R5,PC}       ;; return
    741          /**************************************************************************//**
    742            \brief set/reset alarm
    743          
    744            \param[in] alarmCode - alarmCode to be set/reset
    745            \param[in] setAlarm  - true - set the alarm
    746                                   false - reset the alarm.
    747          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    748          static void setAlarmState(ZclThermostatAlarmCode_t alarmCode, bool setAlarm)
    749          {
   \                     setAlarmState: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    750            if (setAlarm)
   \   00000002   0x....             LDR      R2,??DataTable25_6
   \   00000004   0x7813             LDRB     R3,[R2, #+0]
   \   00000006   0x2401             MOVS     R4,#+1
   \   00000008   0x4084             LSLS     R4,R4,R0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD002             BEQ      ??setAlarmState_0
    751              activeAlarms |= (1 << alarmCode);
   \   0000000E   0x431C             ORRS     R4,R4,R3
   \   00000010   0x0023             MOVS     R3,R4
   \   00000012   0xE000             B        ??setAlarmState_1
    752            else
    753              activeAlarms &= ~((uint8_t)1 << alarmCode);
   \                     ??setAlarmState_0: (+1)
   \   00000014   0x43A3             BICS     R3,R3,R4
   \                     ??setAlarmState_1: (+1)
   \   00000016   0x7013             STRB     R3,[R2, #+0]
    754          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    755          
    756          /**************************************************************************//**
    757            \brief To check whether alarm is active or not
    758          
    759            \param[in] alarmCode - alarmCode to be set/reset
    760            \return    retStatus  - true if it is active
    761                                    false if it is not active.
    762          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    763          static bool isAlarmActive(ZclThermostatAlarmCode_t alarmCode)
    764          {
   \                     isAlarmActive: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0001             MOVS     R1,R0
    765            bool retStatus = false;
   \   00000004   0x2000             MOVS     R0,#+0
    766            if (activeAlarms & ((uint8_t)1 << alarmCode))
   \   00000006   0x....             LDR      R3,??DataTable25_6
   \   00000008   0x781B             LDRB     R3,[R3, #+0]
   \   0000000A   0x2401             MOVS     R4,#+1
   \   0000000C   0x408C             LSLS     R4,R4,R1
   \   0000000E   0x4223             TST      R3,R4
   \   00000010   0xD000             BEQ      ??isAlarmActive_0
    767              retStatus = true;
   \   00000012   0x2001             MOVS     R0,#+1
    768            return retStatus;
   \                     ??isAlarmActive_0: (+1)
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    769          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x00000201         DC32     0x201

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     thThermostatAttrEventInd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     tempMeasTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x00002328         DC32     0x2328

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     readTemperature

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     thThermostatClusterServerAttributes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x00000BB8         DC32     0xbb8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x00000A28         DC32     0xa28

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x2D 0x3E          DC8 "->SetPoints updated by CI: \015\012"
   \              0x53 0x65    
   \              0x74 0x50    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x62 0x79    
   \              0x20 0x43    
   \              0x49 0x3A    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x23 0x73          DC8 "#setpoint mode: %d\015\012"
   \              0x65 0x74    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x2D 0x3E          DC8 "->setpoint amount updated by: %d.%d C\015\012"
   \              0x73 0x65    
   \              0x74 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x20 0x61    
   \              0x6D 0x6F    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x62 0x79    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x20    
   \              0x43 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x00000201         DC32     0x201

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x2D 0x3E          DC8 2DH, 3EH, 74H, 65H, 6DH, 70H, 65H, 72H
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \   00000008   0x61 0x74          DC8 61H, 74H, 75H, 72H, 65H, 20H, 72H, 65H
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x72 0x65    
   \   00000010   0x70 0x6F          DC8 70H, 6FH, 72H, 74H, 20H, 63H, 6FH, 6EH
   \              0x72 0x74    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \   00000018   0x66 0x69          DC8 66H, 69H, 67H, 75H, 72H, 61H, 74H, 69H
   \              0x67 0x75    
   \              0x72 0x61    
   \              0x74 0x69    
   \   00000020   0x6F 0x6E          DC8 6FH, 6EH, 20H, 75H, 70H, 64H, 61H, 74H
   \              0x20 0x75    
   \              0x70 0x64    
   \              0x61 0x74    
   \   00000028   0x65 0x64          DC8 65H, 64H, 20H, 62H, 79H, 20H, 43H, 49H
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x43 0x49    
   \   00000030   0x3A 0x0D          DC8 3AH, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x2D 0x3E          DC8 "->min Report Interval: %d secs\015\012"
   \              0x6D 0x69    
   \              0x6E 0x20    
   \              0x52 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x20 0x49    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x76 0x61    
   \              0x6C 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x63 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x2D 0x3E          DC8 "->max Report Interval: %d secs\015\012"
   \              0x6D 0x61    
   \              0x78 0x20    
   \              0x52 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x20 0x49    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x76 0x61    
   \              0x6C 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x63 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x3C 0x2D          DC8 "<-Attr ID 0x%x event 0x%x\015\012"
   \              0x41 0x74    
   \              0x74 0x72    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x20 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     thThermostatClusterServerAttributes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x00000201         DC32     0x201

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x........         DC32     thThermostatClusterServerAttributes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x000005DC         DC32     0x5dc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \   00000000   0x........         DC32     zclMem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \   00000000   0x........         DC32     ZCL_ReportAttributeResp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_4:
   \   00000000   0x........         DC32     thThermostatClusterServerAttributes+0xCD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_5:
   \   00000000   0x00000201         DC32     0x201

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_6:
   \   00000000   0x........         DC32     activeAlarms

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x2D 0x3E          DC8 "->thermostatResetAlarm:%d \015\012"
   \              0x74 0x68    
   \              0x65 0x72    
   \              0x6D 0x6F    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x41    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x2D 0x3E          DC8 "->thermostatResetAllAlarm\015\012"
   \              0x74 0x68    
   \              0x65 0x72    
   \              0x6D 0x6F    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x41    
   \              0x6C 0x6C    
   \              0x41 0x6C    
   \              0x61 0x72    
   \              0x6D 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x2D 0x3E          DC8 "->Report setpoint update to CI success\015\012"
   \              0x52 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x43 0x49    
   \              0x20 0x73    
   \              0x75 0x63    
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x2D 0x3E          DC8 2DH, 3EH, 52H, 65H, 70H, 6FH, 72H, 74H
   \              0x52 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \   00000008   0x20 0x73          DC8 20H, 73H, 65H, 74H, 70H, 6FH, 69H, 6EH
   \              0x65 0x74    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \   00000010   0x74 0x20          DC8 74H, 20H, 75H, 70H, 64H, 61H, 74H, 65H
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \   00000018   0x20 0x74          DC8 20H, 74H, 6FH, 20H, 43H, 49H, 20H, 66H
   \              0x6F 0x20    
   \              0x43 0x49    
   \              0x20 0x66    
   \   00000020   0x61 0x69          DC8 61H, 69H, 6CH, 65H, 64H, 3AH, 20H, 73H
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x73    
   \   00000028   0x74 0x61          DC8 74H, 61H, 74H, 75H, 73H, 20H, 3DH, 20H
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x3D 0x20    
   \   00000030   0x30 0x78          DC8 30H, 78H, 25H, 32H, 78H, 0DH, 0AH, 0
   \              0x25 0x32    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x4C 0x6F          DC8 "Local update of setpoints done\015\012"
   \              0x63 0x61    
   \              0x6C 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x73 0x65    
   \              0x74 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x64 0x6F    
   \              0x6E 0x65    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x23 0x63          DC8 "#current cool setpoint: %d.%d C\015\012"
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x63    
   \              0x6F 0x6F    
   \              0x6C 0x20    
   \              0x73 0x65    
   \              0x74 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x20    
   \              0x43 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x23 0x63          DC8 "#current heat setpoint: %d.%d C\015\012"
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x61    
   \              0x74 0x20    
   \              0x73 0x65    
   \              0x74 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x20    
   \              0x43 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0
    770          
    771          #endif // APP_DEVICE_TYPE_THERMOSTAT
    772          
    773          // eof thThermostatCluster.c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     112   ZCL_ReportAttributeResp
       112   -> __aeabi_memcpy4
       112   -> appSnprintf
       8   isAlarmActive
      24   readTemperature
        24   -> BSP_ReadTempSensor
        24   -> rand
        24 __aeabi_idivmod
       8   setAlarmState
     128   setpointCommandInd
       128   -> ZCL_WriteAttributeValue
       128   -> __aeabi_memcpy4
       128   -> appSnprintf
       128 __aeabi_idiv
       128 __aeabi_idivmod
     168   thThermostatAttrEventInd
       168   -> __aeabi_memcpy4
       168   -> appSnprintf
       168   -> thermostatValidateSystemModeValue
      88   thThermostatEventListener
        88   -> __aeabi_memcpy4
        88   -> alarmNotification
        88   -> appSnprintf
        88   -> isAlarmActive
        88   -> setAlarmState
        88   -> thermostatValidateSystemModeValue
       8   thermostatClusterInit
         8   -> BSP_OpenTempSensor
         8   -> HAL_StartAppTimer
         8   -> HAL_StopAppTimer
         8   -> SYS_SubscribeToEvent
         8   -> ZCL_GetCluster
         8   -> thermostatClusterInitAttributes
      20   thermostatClusterInitAttributes
      16   thermostatSetAlarmCondition
        16   -> alarmNotification
        16   -> setAlarmState
      12   thermostatSetAlarmMask
       0   thermostatSetOccupancy
     152   thermostatSetPointsChangeButton
       152   -> __aeabi_memcpy
       152   -> __aeabi_memcpy4
       152   -> appSnprintf
       152   -> commandManagerSendAttribute
       152   -> fillCommandRequest
       152   -> getFreeCommand
       152 __aeabi_idiv
       152 __aeabi_idivmod
       0   thermostatValidateSystemModeValue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable18
       4  ??DataTable19
       4  ??DataTable20
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_2
       4  ??DataTable25_3
       4  ??DataTable25_4
       4  ??DataTable25_5
       4  ??DataTable25_6
      32  ?_0
      24  ?_1
      56  ?_10
      36  ?_11
      36  ?_12
      36  ?_13
      40  ?_2
      52  ?_3
      36  ?_4
      36  ?_5
      28  ?_6
      32  ?_7
      28  ?_8
      44  ?_9
      56  ZCL_ReportAttributeResp
       1  activeAlarms
      22  isAlarmActive
     148  readTemperature
      26  setAlarmState
     422  setpointCommandInd
      36  tempMeasTimer
          thEventReceiver
     126  thThermostatAttrEventInd
     228  thThermostatClusterServerAttributes
       8  thThermostatClusterServerCommands
     394  thThermostatEventListener
      66  thermostatClusterInit
     216  thermostatClusterInitAttributes
      40  thermostatSetAlarmCondition
      32  thermostatSetAlarmMask
      36  thermostatSetOccupancy
     370  thermostatSetPointsChangeButton
      40  thermostatValidateSystemModeValue

 
     1 byte  in section .bss
   272 bytes in section .data
 2 582 bytes in section .text
 
 2 582 bytes of CODE memory
   273 bytes of DATA memory

Errors: none
Warnings: none
