###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        22/May/2015  10:17:20
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\BSP\QTouch_XPRO\src\touch.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\BSP\QTouch_XPRO\src\touch.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\touch.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\touch.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\BSP\QTouch_XPRO\src\touch.c
      1          /**************************************************************************//**
      2          \file  touch.c
      3          
      4          \brief Implementation of Touch module.
      5          
      6          \author
      7              Atmel Corporation: http://www.atmel.com \n
      8              Support email: avr@atmel.com
      9          
     10            Copyright (c) 2008-2012, Atmel Corporation. All rights reserved.
     11            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     12          
     13          \internal
     14            History:
     15             14.08.14 Kanchana - Created.
     16          *******************************************************************************/
     17          
     18          /*----------------------------------------------------------------------------
     19          *                               include files
     20          *  ----------------------------------------------------------------------------*/
     21          #ifdef BOARD_QTOUCH_XPRO
     22          /**
     23           * Includes for Touch Library.
     24           */
     25          #include "touch_api_ptc.h"
     26          #include "atsamr21.h"
     27          
     28          /*----------------------------------------------------------------------------
     29          *                           manifest constants
     30          *  ----------------------------------------------------------------------------*/
     31          #define   DEF_MUTLCAP_CAL_SEQ1_COUNT            8
     32          #define   DEF_MUTLCAP_CAL_SEQ2_COUNT            4
     33          #define   DEF_MUTLCAP_CC_CAL_CLK_PRESCALE       PRSC_DIV_SEL_1
     34          #define   DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR     RSEL_VAL_0
     35          #define   DEF_MUTLCAP_QUICK_REBURST_ENABLE      1u
     36             /*
     37          #define   DEF_SELFCAP_CAL_SEQ1_COUNT	8
     38          #define   DEF_SELFCAP_CAL_SEQ2_COUNT	4
     39          #define   DEF_SELFCAP_CC_CAL_CLK_PRESCALE PRSC_DIV_SEL_8
     40          #define   DEF_SELFCAP_CC_CAL_SENSE_RESISTOR RSEL_VAL_100
     41          #define DEF_SELFCAP_QUICK_REBURST_ENABLE 1u
     42             */
     43          
     44          /*----------------------------------------------------------------------------
     45          *                                   macros
     46          *  ----------------------------------------------------------------------------*/
     47          
     48          #define PTC_GCLK_ID 0x22
     49          #define PTC_APBC_BITMASK (1u << 19u)
     50          
     51          /*----------------------------------------------------------------------------
     52          *                           type definitions
     53          *  ----------------------------------------------------------------------------*/
     54          
     55          /*----------------------------------------------------------------------------
     56          *                           Structure Declarations
     57          *  ----------------------------------------------------------------------------*/
     58          
     59          /*----------------------------------------------------------------------------
     60          *                               global variables
     61          *  ----------------------------------------------------------------------------*/
     62          /* ! QTouch Library Timing info. */
     63          touch_time_t touch_time;
     64          
     65          /**
     66           * Mutual Cap sensors measured data pointer.
     67           * Note: This pointer is initialized by the QTouch library once the
     68           * touch_mutlcap_sensors_init API is called. */

   \                                 In section .bss, align 4
     69          touch_measure_data_t *p_mutlcap_measure_data = NULL;
   \                     p_mutlcap_measure_data:
   \   00000000                      DS8 4
     70          
     71          /**
     72           * Self Cap sensors measured data pointer.
     73           * Note: This pointer is initialized by the QTouch library once the
     74           * touch_selfcap_sensors_init API is called. */

   \                                 In section .bss, align 4
     75          touch_measure_data_t *p_selfcap_measure_data = NULL;
   \                     p_selfcap_measure_data:
   \   00000000                      DS8 4
     76          
     77          /*----------------------------------------------------------------------------
     78          *                               static variables
     79          *  ----------------------------------------------------------------------------*/
     80          
     81          /**
     82           * Mutual Cap Data block provided as input to Touch library.
     83           */

   \                                 In section .bss, align 4
     84          static uint8_t mutlcap_data_blk[PRIV_MUTLCAP_DATA_BLK_SIZE];
   \                     mutlcap_data_blk:
   \   00000000                      DS8 256
     85          
     86          /**
     87           * Mutual Cap Sensor Pins Info.
     88           */
     89          
     90          uint16_t mutlcap_xy_nodes[DEF_MUTLCAP_NUM_CHANNELS * 2] = {DEF_MUTLCAP_NODES};
     91          
     92          gain_t mutlcap_gain_per_node[DEF_MUTLCAP_NUM_CHANNELS] = {DEF_MUTLCAP_GAIN_PER_NODE};
     93          

   \                                 In section .bss, align 4
     94          rsel_val_t mutlcap_resistor_per_node[DEF_MUTLCAP_NUM_CHANNELS] = 
   \                     mutlcap_resistor_per_node:
   \   00000000                      DS8 8
     95          {
     96            DEF_MUTLCAP_SENSE_RESISTOR,
     97            DEF_MUTLCAP_SENSE_RESISTOR,
     98            DEF_MUTLCAP_SENSE_RESISTOR,
     99            DEF_MUTLCAP_SENSE_RESISTOR,
    100            DEF_MUTLCAP_SENSE_RESISTOR,
    101            DEF_MUTLCAP_SENSE_RESISTOR,
    102             DEF_MUTLCAP_SENSE_RESISTOR,  
    103            DEF_MUTLCAP_SENSE_RESISTOR,
    104          
    105          #if DEF_MUTLCAP_NUM_CHANNELS > 8  
    106           DEF_MUTLCAP_SENSE_RESISTOR,
    107            DEF_MUTLCAP_SENSE_RESISTOR,
    108            DEF_MUTLCAP_SENSE_RESISTOR,
    109            DEF_MUTLCAP_SENSE_RESISTOR,
    110            DEF_MUTLCAP_SENSE_RESISTOR,
    111            DEF_MUTLCAP_SENSE_RESISTOR,
    112            DEF_MUTLCAP_SENSE_RESISTOR,  
    113            DEF_MUTLCAP_SENSE_RESISTOR,  
    114          #endif
    115          #if DEF_MUTLCAP_NUM_CHANNELS >= 16  
    116           DEF_MUTLCAP_SENSE_RESISTOR,
    117            DEF_MUTLCAP_SENSE_RESISTOR,
    118            DEF_MUTLCAP_SENSE_RESISTOR,
    119            DEF_MUTLCAP_SENSE_RESISTOR,
    120            DEF_MUTLCAP_SENSE_RESISTOR,
    121            DEF_MUTLCAP_SENSE_RESISTOR,
    122            DEF_MUTLCAP_SENSE_RESISTOR,  
    123            DEF_MUTLCAP_SENSE_RESISTOR,  
    124          #endif
    125          };
    126          

   \                                 In section .bss, align 4
    127          prsc_div_sel_t mutlcap_prsc_per_node[DEF_MUTLCAP_NUM_CHANNELS] = 
   \                     mutlcap_prsc_per_node:
   \   00000000                      DS8 8
    128          {
    129            DEF_MUTLCAP_CLK_PRESCALE,
    130            DEF_MUTLCAP_CLK_PRESCALE,
    131           DEF_MUTLCAP_CLK_PRESCALE,
    132            DEF_MUTLCAP_CLK_PRESCALE,
    133            DEF_MUTLCAP_CLK_PRESCALE,
    134            DEF_MUTLCAP_CLK_PRESCALE,
    135             DEF_MUTLCAP_CLK_PRESCALE,  
    136            DEF_MUTLCAP_CLK_PRESCALE,
    137          
    138          #if DEF_MUTLCAP_NUM_CHANNELS > 8  
    139            DEF_MUTLCAP_CLK_PRESCALE,
    140            DEF_MUTLCAP_CLK_PRESCALE,
    141            DEF_MUTLCAP_CLK_PRESCALE,
    142            DEF_MUTLCAP_CLK_PRESCALE,
    143            DEF_MUTLCAP_CLK_PRESCALE,
    144            DEF_MUTLCAP_CLK_PRESCALE,
    145            DEF_MUTLCAP_CLK_PRESCALE,  
    146            DEF_MUTLCAP_CLK_PRESCALE,  
    147          #endif
    148          #if DEF_MUTLCAP_NUM_CHANNELS >= 16  
    149            DEF_MUTLCAP_CLK_PRESCALE,
    150            DEF_MUTLCAP_CLK_PRESCALE,
    151            DEF_MUTLCAP_CLK_PRESCALE,
    152            DEF_MUTLCAP_CLK_PRESCALE,
    153            DEF_MUTLCAP_CLK_PRESCALE,
    154            DEF_MUTLCAP_CLK_PRESCALE,
    155            DEF_MUTLCAP_CLK_PRESCALE,  
    156            DEF_MUTLCAP_CLK_PRESCALE,  
    157          #endif
    158          };
    159          

   \                                 In section .bss, align 4
    160          prsc_div_sel_t mutlcap_boot_prsc_per_node[DEF_MUTLCAP_NUM_CHANNELS] = 
   \                     mutlcap_boot_prsc_per_node:
   \   00000000                      DS8 8
    161          {
    162            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    163            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    164           DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    165           DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    166            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    167            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    168             DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,  
    169            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    170          
    171          #if DEF_MUTLCAP_NUM_CHANNELS > 8  
    172            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    173            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    174            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    175            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    176            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    177            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    178            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,  
    179            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE, 
    180          #endif
    181          #if DEF_MUTLCAP_NUM_CHANNELS >= 16  
    182            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    183            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    184            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    185            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    186            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    187            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,
    188            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE,  
    189            DEF_MUTLCAP_CC_CAL_CLK_PRESCALE, 
    190          #endif
    191          };
    192          

   \                                 In section .bss, align 4
    193          rsel_val_t mutlcap_boot_resistor_per_node[DEF_MUTLCAP_NUM_CHANNELS] = 
   \                     mutlcap_boot_resistor_per_node:
   \   00000000                      DS8 8

   \                                 In section .data, align 4
   \                     touch_time:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    194          { 
    195            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    196            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    197            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    198            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    199            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    200            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    201             DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,  
    202            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    203          
    204          #if DEF_MUTLCAP_NUM_CHANNELS > 8  
    205            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    206            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    207            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    208            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    209            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    210            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    211            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,  
    212            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    213          #endif
    214          #if DEF_MUTLCAP_NUM_CHANNELS >= 16  
    215            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    216            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    217            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    218            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    219            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    220            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    221            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,  
    222            DEF_MUTLCAP_CC_CAL_SENSE_RESISTOR,
    223          #endif
    224            
    225          };
    226          freq_hop_sel_t mutlcap_freq_hops[3u] = {DEF_MUTLCAP_HOP_FREQS};
    227          
    228          /**
    229           * Mutual Cap Configuration structure provided as input to Touch Library.
    230           *
    231           * Note: Use the touch.h configuration header file to fill in
    232           * the elements of this structure.  DO NOT modify any of the input values
    233           * directly in this structure.
    234           */
    235          static touch_mutlcap_config_t mutlcap_config = {
    236          	DEF_MUTLCAP_NUM_CHANNELS,       /* Mutual Cap number of channels. */
    237          	DEF_MUTLCAP_NUM_SENSORS,        /* Mutual Cap number of sensors. */
    238          	DEF_MUTLCAP_NUM_ROTORS_SLIDERS, /* Mutual Cap number of rotors and
    239          	                                 * sliders. */
    240          
    241          	/* Mutual Cap GLOBAL SENSOR CONFIGURATION INFO. */
    242          	{
    243          		DEF_MUTLCAP_DI,         /* uint8_t  di; Sensor detect
    244          		                         * integration (DI) limit. */
    245          
    246          		/* Interchanging Negative and Positive Drift rate, since Signal
    247          		 * increases on Touch. */
    248          		DEF_MUTLCAP_ATCH_DRIFT_RATE, /* uint8_t  neg_drift_rate; Sensor
    249          		                              * negative drift rate. */
    250          		DEF_MUTLCAP_TCH_DRIFT_RATE, /* uint8_t  pos_drift_rate; Sensor
    251          		                             * positive drift rate. */
    252          		DEF_MUTLCAP_MAX_ON_DURATION, /* uint8_t  max_on_duration; Sensor
    253          		                              * maximum on duration. */
    254          		DEF_MUTLCAP_DRIFT_HOLD_TIME, /* uint8_t  drift_hold_time; Sensor
    255          		                              * drift hold time. */
    256          		DEF_MUTLCAP_ATCH_RECAL_DELAY,   /* uint8_t  pos_recal_delay;
    257          		                                 * Sensor positive recalibration
    258          		                                 * delay. */
    259          		DEF_MUTLCAP_CAL_SEQ1_COUNT,
    260          		DEF_MUTLCAP_CAL_SEQ2_COUNT,
    261          		DEF_MUTLCAP_ATCH_RECAL_THRESHOLD, /* recal_threshold_t
    262          		                                   * recal_threshold; Sensor
    263          		                                   * recalibration threshold. */
    264          		DEF_MUTLCAP_TOUCH_POSTPROCESS_MODE,
    265          		DEF_MUTLCAP_FREQ_AUTO_TUNE_SIGNAL_STABILITY_LIMIT,
    266          		DEF_MUTLCAP_FREQ_AUTO_TUNE_IN_CNT,
    267          		DEF_MUTLCAP_NOISE_MEAS_SIGNAL_STABILITY_LIMIT, /* signal
    268          		                                                *stability */
    269          		DEF_MUTLCAP_NOISE_LIMIT,
    270          		DEF_MUTLCAP_LOCKOUT_SEL,
    271          		DEF_MUTLCAP_LOCKOUT_CNTDOWN,
    272          	},
    273          	{
    274          		mutlcap_gain_per_node,  /* Mutual Cap channel gain setting. */
    275          		DEF_MUTLCAP_FREQ_MODE, /* Mutual Cap noise counter measure
    276          		                        * enable/disable. */
    277          		mutlcap_prsc_per_node,
    278          		mutlcap_resistor_per_node,
    279          		mutlcap_boot_prsc_per_node,
    280          		mutlcap_boot_resistor_per_node,
    281          		mutlcap_freq_hops,
    282          		DEF_MUTLCAP_FILTER_LEVEL, /* Mutual Cap filter level setting. */
    283          		DEF_MUTLCAP_AUTO_OS,    /* Mutual Cap auto oversamples setting.
    284          		                        **/
    285          	},
    286          	mutlcap_data_blk,               /* Mutual Cap data block index. */
    287          	PRIV_MUTLCAP_DATA_BLK_SIZE, /* Mutual Cap data block size. */
    288          	mutlcap_xy_nodes,                       /* Mutual Cap channel nodes. */
    289          	DEF_MUTLCAP_QUICK_REBURST_ENABLE,
    290          	DEF_MUTLCAP_FILTER_CALLBACK,     /* Mutual Cap filter callback function
    291          	                                 * pointer. */
    292          	DEF_MUTLCAP_FREQ_AUTO_TUNE_ENABLE,
    293          	DEF_MUTLCAP_NOISE_MEAS_ENABLE,
    294          	DEF_MUTLCAP_NOISE_MEAS_BUFFER_CNT
    295          };
    296          
    297          /**
    298           * Touch Library input configuration structure.
    299           */
    300          touch_config_t touch_config = {
   \                     touch_config:
   \   00000008   0x........         DC32 mutlcap_config, 0H
   \              0x00000000   
   \   00000010   0x03 0x00          DC8 3, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     mutlcap_xy_nodes:
   \   00000000   0x0001 0x0004      DC16 1, 4, 2, 4, 1024, 4, 2048, 4, 1, 8, 2, 8, 1024, 8, 2048, 8
   \              0x0002 0x0004
   \              0x0400 0x0004
   \              0x0800 0x0004
   \              0x0001 0x0008
   \              0x0002 0x0008
   \              0x0400 0x0008
   \              0x0800 0x0008

   \                                 In section .data, align 4
   \                     mutlcap_gain_per_node:
   \   00000000   0x01 0x01          DC8 1, 1, 1, 1, 1, 1, 1, 1
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x01 0x01    

   \                                 In section .data, align 4
   \                     mutlcap_freq_hops:
   \   00000000   0x00 0x01          DC8 0, 1, 2, 0
   \              0x02 0x00    

   \                                 In section .data, align 4
   \                     mutlcap_config:
   \   00000000   0x0008 0x0005      DC16 8, 5
   \   00000004   0x01 0x00          DC8 1, 0, 2, 5, 20, 0, 20, 10, 8, 4, 1, 0
   \              0x02 0x05    
   \              0x14 0x00    
   \              0x14 0x0A    
   \              0x08 0x04    
   \              0x01 0x00    
   \   00000010   0x0000 0x000A      DC16 0, 10
   \   00000014   0x0C 0x00          DC8 12, 0
   \   00000016   0x000A             DC16 10
   \   00000018   0x0C 0x00          DC8 12, 0, 10, 0
   \              0x0A 0x00    
   \   0000001C   0x........         DC32 mutlcap_gain_per_node
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x........         DC32 mutlcap_prsc_per_node, mutlcap_resistor_per_node
   \              0x........   
   \   0000002C   0x........         DC32 mutlcap_boot_prsc_per_node, mutlcap_boot_resistor_per_node
   \              0x........   
   \   00000034   0x........         DC32 mutlcap_freq_hops
   \   00000038   0x03 0x00          DC8 3, 0, 0, 0
   \              0x00 0x00    
   \   0000003C   0x........         DC32 mutlcap_data_blk
   \   00000040   0x00FD             DC16 253
   \   00000042   0x00 0x00          DC8 0, 0
   \   00000044   0x........         DC32 mutlcap_xy_nodes
   \   00000048   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000004C   0x00000000         DC32 0H
   \   00000050   0x00 0x00          DC8 0, 0, 5, 0
   \              0x05 0x00    
    301          	&mutlcap_config,                /* Pointer to Mutual Cap configuration
    302          	                                 * structure. */
    303          	NULL,
    304          
    305          	DEF_TOUCH_PTC_ISR_LVL,          /* PTC interrupt level. */
    306          };
    307          /*----------------------------------------------------------------------------
    308          *                               prototypes
    309          *  ----------------------------------------------------------------------------*/
    310          
    311          /*! \brief configure keys, rotors and sliders.
    312           */
    313          static touch_ret_t touch_sensors_config(void);
    314          
    315          /*! \brief Mutual Cap measure complete callback function example prototype.
    316           */
    317          void touch_mutlcap_measure_complete_callback( void );
    318          
    319          /*! \brief Initialize and enable PTC clock.
    320           */
    321          void touch_configure_ptc_clock(void);
    322          /*----------------------------------------------------------------------------
    323          *  static functions
    324          *  ----------------------------------------------------------------------------*/
    325          

   \                                 In section .text, align 2, keep-with-next
    326          void touch_configure_ptc_clock(void)
    327          {
    328            PM_APBCMASK_s.ptc = 1;
   \                     touch_configure_ptc_clock: (+1)
   \   00000000   0x....             LDR      R0,??DataTable3  ;; 0x40000420
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x0AC2             LSRS     R2,R0,#+11
   \   00000006   0x430A             ORRS     R2,R2,R1
   \   00000008   0x6002             STR      R2,[R0, #+0]
    329            
    330            GCLK_CLKCTRL_s.id = 0x22;  // enabling clock for PTC
   \   0000000A   0x....             LDR      R0,??DataTable3_1  ;; 0x40000c02
   \   0000000C   0x8801             LDRH     R1,[R0, #+0]
   \   0000000E   0x....             LDR      R2,??DataTable3_2  ;; 0xffc0
   \   00000010   0x400A             ANDS     R2,R2,R1
   \   00000012   0x2122             MOVS     R1,#+34
   \   00000014   0x4311             ORRS     R1,R1,R2
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    331            GCLK_CLKCTRL_s.gen = 3;
   \   00000018   0x8801             LDRH     R1,[R0, #+0]
   \   0000001A   0x....             LDR      R2,??DataTable3_3  ;; 0xf0ff
   \   0000001C   0x400A             ANDS     R2,R2,R1
   \   0000001E   0x21C0             MOVS     R1,#+192
   \   00000020   0x0089             LSLS     R1,R1,#+2        ;; #+768
   \   00000022   0x4311             ORRS     R1,R1,R2
   \   00000024   0x8001             STRH     R1,[R0, #+0]
    332            GCLK_CLKCTRL_s.clken = 1;
   \   00000026   0x8801             LDRH     R1,[R0, #+0]
   \   00000028   0x0C02             LSRS     R2,R0,#+16
   \   0000002A   0x430A             ORRS     R2,R2,R1
   \   0000002C   0x8002             STRH     R2,[R0, #+0]
    333          }
   \   0000002E   0x4770             BX       LR               ;; return
    334          
    335          /* ! [setup] */
    336          
    337          /*! \brief Example application entry function.
    338           */

   \                                 In section .text, align 2, keep-with-next
    339          touch_ret_t touch_sensors_init(void)
    340          {
   \                     touch_sensors_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    341          	touch_ret_t touch_ret = TOUCH_SUCCESS;
    342          
    343          	/* Setup and enable generic clock source for PTC module. */
    344          	touch_configure_ptc_clock();
   \   00000004   0x.... 0x....      BL       touch_configure_ptc_clock
    345          
    346          	touch_time.measurement_period_ms = DEF_TOUCH_MEASUREMENT_PERIOD_MS;
   \   00000008   0x....             LDR      R0,??DataTable3_4
   \   0000000A   0x2164             MOVS     R1,#+100
   \   0000000C   0x8001             STRH     R1,[R0, #+0]
    347          
    348          	/* Initialize touch library for Self Cap operation. */
    349          	touch_ret = touch_mutlcap_sensors_init(&touch_config);
    350          	if (touch_ret != TOUCH_SUCCESS) {
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x....             LDR      R1,??DataTable3_5
   \   00000012   0x3008             ADDS     R0,R0,#+8
   \   00000014   0x.... 0x....      BL       touch_mutlcap_sensors_init_with_rs_table
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD000             BEQ      ??touch_sensors_init_0
    351          		while (1u) {    /* Check API Error return code. */
   \                     ??touch_sensors_init_1: (+1)
   \   0000001C   0xE7FE             B        ??touch_sensors_init_1
    352          		}
    353          	}
    354          
    355          #if 0//DEF_TOUCH_QDEBUG_ENABLE == 1
    356          	QDebug_Init();
    357          #endif
    358          
    359          	/* configure the touch library sensors. */
    360          	touch_ret = touch_sensors_config();
   \                     ??touch_sensors_init_0: (+1)
   \   0000001E   0xA805             ADD      R0,SP,#+20
   \   00000020   0x9004             STR      R0,[SP, #+16]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x9003             STR      R0,[SP, #+12]
   \   00000026   0x2007             MOVS     R0,#+7
   \   00000028   0x9002             STR      R0,[SP, #+8]
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x9001             STR      R0,[SP, #+4]
   \   0000002E   0x201E             MOVS     R0,#+30
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0x2300             MOVS     R3,#+0
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       touch_mutlcap_sensor_config
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD000             BEQ      ??touch_sensors_init_2
   \                     ??touch_sensors_init_3: (+1)
   \   00000042   0xE7FE             B        ??touch_sensors_init_3
   \                     ??touch_sensors_init_2: (+1)
   \   00000044   0xA805             ADD      R0,SP,#+20
   \   00000046   0x9004             STR      R0,[SP, #+16]
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x9003             STR      R0,[SP, #+12]
   \   0000004C   0x2007             MOVS     R0,#+7
   \   0000004E   0x9002             STR      R0,[SP, #+8]
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0x201E             MOVS     R0,#+30
   \   00000056   0x9000             STR      R0,[SP, #+0]
   \   00000058   0x2300             MOVS     R3,#+0
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x.... 0x....      BL       touch_mutlcap_sensor_config
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD000             BEQ      ??touch_sensors_init_4
   \                     ??touch_sensors_init_5: (+1)
   \   00000068   0xE7FE             B        ??touch_sensors_init_5
   \                     ??touch_sensors_init_4: (+1)
   \   0000006A   0xA805             ADD      R0,SP,#+20
   \   0000006C   0x9004             STR      R0,[SP, #+16]
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x9003             STR      R0,[SP, #+12]
   \   00000072   0x2007             MOVS     R0,#+7
   \   00000074   0x9002             STR      R0,[SP, #+8]
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x9001             STR      R0,[SP, #+4]
   \   0000007A   0x201E             MOVS     R0,#+30
   \   0000007C   0x9000             STR      R0,[SP, #+0]
   \   0000007E   0x2300             MOVS     R3,#+0
   \   00000080   0x2202             MOVS     R2,#+2
   \   00000082   0x2102             MOVS     R1,#+2
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0x.... 0x....      BL       touch_mutlcap_sensor_config
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD000             BEQ      ??touch_sensors_init_6
   \                     ??touch_sensors_init_7: (+1)
   \   0000008E   0xE7FE             B        ??touch_sensors_init_7
   \                     ??touch_sensors_init_6: (+1)
   \   00000090   0xA805             ADD      R0,SP,#+20
   \   00000092   0x9004             STR      R0,[SP, #+16]
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x9003             STR      R0,[SP, #+12]
   \   00000098   0x2007             MOVS     R0,#+7
   \   0000009A   0x9002             STR      R0,[SP, #+8]
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x9001             STR      R0,[SP, #+4]
   \   000000A0   0x201E             MOVS     R0,#+30
   \   000000A2   0x9000             STR      R0,[SP, #+0]
   \   000000A4   0x2300             MOVS     R3,#+0
   \   000000A6   0x2203             MOVS     R2,#+3
   \   000000A8   0x2103             MOVS     R1,#+3
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0x.... 0x....      BL       touch_mutlcap_sensor_config
   \   000000B0   0x2800             CMP      R0,#+0
   \   000000B2   0xD000             BEQ      ??touch_sensors_init_8
   \                     ??touch_sensors_init_9: (+1)
   \   000000B4   0xE7FE             B        ??touch_sensors_init_9
   \                     ??touch_sensors_init_8: (+1)
   \   000000B6   0xA805             ADD      R0,SP,#+20
   \   000000B8   0x9004             STR      R0,[SP, #+16]
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x9003             STR      R0,[SP, #+12]
   \   000000BE   0x2007             MOVS     R0,#+7
   \   000000C0   0x9002             STR      R0,[SP, #+8]
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0x9001             STR      R0,[SP, #+4]
   \   000000C6   0x201E             MOVS     R0,#+30
   \   000000C8   0x9000             STR      R0,[SP, #+0]
   \   000000CA   0x2300             MOVS     R3,#+0
   \   000000CC   0x2207             MOVS     R2,#+7
   \   000000CE   0x2104             MOVS     R1,#+4
   \   000000D0   0x2003             MOVS     R0,#+3
   \   000000D2   0x.... 0x....      BL       touch_mutlcap_sensor_config
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xD000             BEQ      ??touch_sensors_init_10
   \                     ??touch_sensors_init_11: (+1)
   \   000000DA   0xE7FE             B        ??touch_sensors_init_11
    361          	if (touch_ret != TOUCH_SUCCESS) {
    362          		while (1u) {    /* Check API Error return code. */
    363          		}
    364          	}
    365          
    366          	/* Auto Tuning setting for calibration.
    367          	 *
    368          	 * AUTO_TUNE_PRSC: When Auto tuning of pre-scaler is selected
    369          	 * the PTC uses the user defined internal series resistor setting
    370          	 * (DEF_MUTLCAP_SENSE_RESISTOR) and the pre-scaler is adjusted
    371          	 * to slow down the PTC operation to ensure full charge transfer.
    372          	 *
    373          	 * AUTO_TUNE_RSEL: When Auto tuning of the series resistor is
    374          	 * selected the PTC runs at user defined pre-scaler setting speed
    375          	 * (DEF_MUTLCAP_CLK_PRESCALE) and the internal series resistor is
    376          	 * tuned automatically to the optimum value to allow for full
    377          	 * charge transfer.
    378          	 *
    379          	 * AUTO_TUNE_NONE: When manual tuning option is selected (AUTO_TUNE_NONE),
    380          	 * the user defined values of PTC pre-scaler and series resistor is used
    381          	 * for PTC operation as given in DEF_MUTLCAP_CLK_PRESCALE and
    382          	 * DEF_MUTLCAP_SENSE_RESISTOR
    383          	 *
    384          	 */
    385          	touch_ret = touch_mutlcap_sensors_calibrate(AUTO_TUNE_NONE);
    386          	if (touch_ret != TOUCH_SUCCESS) {
   \                     ??touch_sensors_init_10: (+1)
   \   000000DC   0x.... 0x....      BL       touch_mutlcap_sensors_calibrate
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD000             BEQ      ??touch_sensors_init_12
    387          		while (1u) {    /* Check API Error return code. */
   \                     ??touch_sensors_init_13: (+1)
   \   000000E4   0xE7FE             B        ??touch_sensors_init_13
    388          		}
    389          	}
    390                  
    391                  //GPIO for acq time measurement
    392                  PORT->Group[0].DIRSET.reg = PORTA_DIRSET_P15;
   \                     ??touch_sensors_init_12: (+1)
   \   000000E6   0x....             LDR      R0,??DataTable3_6  ;; 0x41004408
   \   000000E8   0x2180             MOVS     R1,#+128
   \   000000EA   0x0209             LSLS     R1,R1,#+8        ;; #+32768
   \   000000EC   0x6001             STR      R1,[R0, #+0]
    393                  PORT->Group[0].OUTCLR.reg = PORTA_OUTCLR_P15;
   \   000000EE   0x60C1             STR      R1,[R0, #+12]
    394          
    395          	return (touch_ret);
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0xB007             ADD      SP,SP,#+28
   \   000000F4   0xBD00             POP      {PC}             ;; return
    396          }
    397          

   \                                 In section .text, align 2, keep-with-next
    398          touch_ret_t touch_sensors_measure(void)
    399          {
   \                     touch_sensors_measure: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    400          	touch_ret_t touch_ret = TOUCH_SUCCESS;
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0x2000             MOVS     R0,#+0
    401          
    402          	if (touch_time.time_to_measure_touch == 1u) {
   \   00000006   0x....             LDR      R4,??DataTable3_4
   \   00000008   0x7921             LDRB     R1,[R4, #+4]
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xD10D             BNE      ??touch_sensors_measure_0
    403                    PORT->Group[0].OUTSET.reg = PORTA_OUTSET_P15;
   \   0000000E   0x2080             MOVS     R0,#+128
   \   00000010   0x0200             LSLS     R0,R0,#+8        ;; #+32768
   \   00000012   0x....             LDR      R1,??DataTable3_7  ;; 0x41004418
   \   00000014   0x6008             STR      R0,[R1, #+0]
    404          		touch_ret = touch_mutlcap_sensors_measure(
    405          				touch_time.current_time_ms,
    406          				NORMAL_ACQ_MODE,
    407          				touch_mutlcap_measure_complete_callback);
   \   00000016   0x....             LDR      R2,??DataTable3_8
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x8860             LDRH     R0,[R4, #+2]
   \   0000001C   0x.... 0x....      BL       touch_mutlcap_sensors_measure
    408          
    409          		if ((touch_ret != TOUCH_ACQ_INCOMPLETE) &&
    410          				(touch_ret == TOUCH_SUCCESS)) {
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD002             BEQ      ??touch_sensors_measure_0
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD101             BNE      ??touch_sensors_measure_1
    411          			touch_time.time_to_measure_touch = 0u;
   \   00000028   0x7125             STRB     R5,[R4, #+4]
    412          		} else if ((touch_ret != TOUCH_SUCCESS) &&
    413          				(touch_ret != TOUCH_ACQ_INCOMPLETE)) {
    414          			while (1) {
    415          			}
    416          
    417          			/* Reaching this point can be due to -
    418          			 *     1. The api has retured an error due to a invalid
    419          			 * input parameter.
    420          			 *     2. The api has been called during a invalid Touch
    421          			 * Library state. */
    422          		}
    423          	}
    424          
    425          	return (touch_ret);
   \                     ??touch_sensors_measure_0: (+1)
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??touch_sensors_measure_1: (+1)
   \   0000002C   0xE7FE             B        ??touch_sensors_measure_1
    426          }
    427          
    428          /*! \brief Example configuration for touch keys, rotors and sliders.
    429           *
    430           * \retval TOUCH_SUCCESS   Configuration setting successful.
    431           * \retval TOUCH_INVALID_xx   Invalid input configuration setting.
    432           */
    433          touch_ret_t touch_sensors_config(void)
    434          {
    435          	touch_ret_t touch_ret = TOUCH_SUCCESS;
    436          	sensor_id_t sensor_id;
    437          
    438          	touch_ret = touch_mutlcap_sensor_config(SENSOR_TYPE_KEY, CHANNEL_0,CHANNEL_0, NO_AKS_GROUP, 30u, HYST_25,RES_8_BIT, 0u, &sensor_id);
    439          	if (touch_ret != TOUCH_SUCCESS)
    440          	{
    441          		while (1) ;
    442          	}
    443          
    444          	touch_ret = touch_mutlcap_sensor_config(SENSOR_TYPE_KEY, CHANNEL_1,CHANNEL_1, NO_AKS_GROUP, 30u, HYST_25,RES_8_BIT, 0u, &sensor_id);
    445          	if (touch_ret != TOUCH_SUCCESS)
    446          	{
    447          		while (1) ;
    448          	}
    449          
    450          	touch_ret = touch_mutlcap_sensor_config(SENSOR_TYPE_KEY, CHANNEL_2,CHANNEL_2, NO_AKS_GROUP, 30u, HYST_25,RES_8_BIT, 0u, &sensor_id);
    451          	if (touch_ret != TOUCH_SUCCESS)
    452          	{
    453          		while (1) ;
    454          	}
    455          
    456          	touch_ret = touch_mutlcap_sensor_config(SENSOR_TYPE_KEY, CHANNEL_3,CHANNEL_3, NO_AKS_GROUP, 30u, HYST_25,RES_8_BIT, 0u, &sensor_id);
    457          	if (touch_ret != TOUCH_SUCCESS)
    458          	{
    459          		while (1) ;
    460          	}
    461                  
    462                  touch_ret = touch_mutlcap_sensor_config(SENSOR_TYPE_SLIDER, CHANNEL_4,CHANNEL_7, NO_AKS_GROUP, 30u, HYST_25,RES_8_BIT, 0u, &sensor_id);
    463          	if (touch_ret != TOUCH_SUCCESS)
    464          	{
    465          		while (1) ;
    466          	} 
    467                  
    468          	return (touch_ret);
    469          }
    470          
    471          /*! \brief Mutual Cap measure complete callback function.
    472           *
    473           * This function is called by the library when the touch measurement
    474           * process for Mutual Cap sensors is completed.
    475           *
    476           * \param p_measure_data   Base address of touch_measure_data_t instance.
    477           * \note A touch_mutlcap_measure_complete_callback() call signifies that fresh
    478           * values of touch status, rotor/slider position, measured signals,
    479           * references and Sensor data is available.
    480           * The Mutual Cap measured data can be accessed using the p_measure_data
    481           * pointer.
    482           */

   \                                 In section .text, align 2, keep-with-next
    483          void touch_mutlcap_measure_complete_callback( void )
    484          {
    485          #if 0//DEF_TOUCH_QDEBUG_ENABLE == 1
    486          
    487          	/* Send out the Touch debug information data each time when Touch
    488          	 *   measurement process is completed .
    489          	 *   The Touch Signal and Touch Delta values are always sent.
    490          	 *   Touch Status change, Rotor-Slider Position change and Sensor
    491          	 * Reference
    492          	 *   values can be optionally sent using the masks below.
    493          	 */
    494          	QDebug_SendData( TOUCH_CHANNEL_REF_CHANGE |
    495          			TOUCH_ROTOR_SLIDER_POS_CHANGE |
    496          			TOUCH_STATUS_CHANGE );
    497          	/* QT600 two-way QDebug communication application Example. */
    498          	/* Process any commands received from QTouch Studio. */
    499          	QDebug_ProcessCommands();
    500          #endif
    501          
    502          
    503          	if (!(p_mutlcap_measure_data->acq_status & TOUCH_BURST_AGAIN)) {
   \                     touch_mutlcap_measure_complete_callback: (+1)
   \   00000000   0x....             LDR      R0,??DataTable3_9
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x8841             LDRH     R1,[R0, #+2]
   \   00000006   0x05C9             LSLS     R1,R1,#+23
   \   00000008   0xD404             BMI      ??touch_mutlcap_measure_complete_callback_0
    504          		/* Set the Mutual Cap measurement done flag. */
    505          		p_mutlcap_measure_data->measurement_done_touch = 1u;
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    506          		
    507          		PORT->Group[0].OUTCLR.reg = PORTA_OUTCLR_P15;
   \   0000000E   0x03C8             LSLS     R0,R1,#+15
   \   00000010   0x....             LDR      R1,??DataTable3_10  ;; 0x41004414
   \   00000012   0x6008             STR      R0,[R1, #+0]
    508          	}
    509          }
   \                     ??touch_mutlcap_measure_complete_callback_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40000420         DC32     0x40000420

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40000C02         DC32     0x40000c02

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x0000FFC0         DC32     0xffc0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x0000F0FF         DC32     0xf0ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     touch_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     touch_mutlcap_rs_table_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x41004408         DC32     0x41004408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x41004418         DC32     0x41004418

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     touch_mutlcap_measure_complete_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     p_mutlcap_measure_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x41004414         DC32     0x41004414
    510          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   touch_configure_ptc_clock
       0   touch_mutlcap_measure_complete_callback
      32   touch_sensors_init
        32   -> touch_configure_ptc_clock
        32   -> touch_mutlcap_sensor_config
        32   -> touch_mutlcap_sensors_calibrate
        32   -> touch_mutlcap_sensors_init_with_rs_table
      16   touch_sensors_measure
        16   -> touch_mutlcap_sensors_measure


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       8  mutlcap_boot_prsc_per_node
       8  mutlcap_boot_resistor_per_node
      84  mutlcap_config
     256  mutlcap_data_blk
       4  mutlcap_freq_hops
       8  mutlcap_gain_per_node
       8  mutlcap_prsc_per_node
       8  mutlcap_resistor_per_node
      32  mutlcap_xy_nodes
       4  p_mutlcap_measure_data
       4  p_selfcap_measure_data
      48  touch_configure_ptc_clock
      22  touch_mutlcap_measure_complete_callback
     246  touch_sensors_init
      46  touch_sensors_measure
      20  touch_time
          touch_config

 
 296 bytes in section .bss
 148 bytes in section .data
 406 bytes in section .text
 
 406 bytes of CODE memory
 444 bytes of DATA memory

Errors: none
Warnings: none
