###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:41:04
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thOccupancySensingCluster.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thOccupancySensingCluster.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\thOccupancySensingCluster.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\thOccupancySensingCluster.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thOccupancySensingCluster.c
      1          /**************************************************************************//**
      2            \file thOccupancySensingCluster.c
      3          
      4            \brief
      5              Thermostat Occupancy Sensing cluster implementation.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16              17.10.14 Viswanadham Kotla - Created.
     17          ******************************************************************************/
     18          #if defined APP_DEVICE_TYPE_THERMOSTAT
     19          
     20          /******************************************************************************
     21                              Includes section
     22          ******************************************************************************/
     23          #include <thOccupancySensingCluster.h>
     24          #include <thFanControlCluster.h>
     25          #include <commandManager.h>
     26          #include <uartManager.h>
     27          
     28          
     29          /******************************************************************************
     30                                       Defines section
     31          ******************************************************************************/
     32          #define MOVEMENT_DETECTION_PERIOD                       2000UL
     33          #define AMOUNT_MSEC_IN_SEC                              1000UL
     34          #define NO_OF_MOVEMENT_DETECTION_EVENTS_ALLOWED         7U
     35          
     36          /******************************************************************************
     37                              Global variables
     38          ******************************************************************************/

   \                                 In section .data, align 4
     39          ZCL_OccupancySensingClusterServerAttributes_t thOccupancySensingClusterServerAttributes =
   \                     thOccupancySensingClusterServerAttributes:
   \   00000000   0x0000             DC16 0
   \   00000002   0x18 0x13          DC8 24, 19, 0
   \              0x00         
   \   00000005   0x0000 0x000A      DC16 0, 10, 20
   \              0x0014       
   \   0000000B   0x00               DC8 0
   \   0000000C   0x0000             DC16 0
   \   0000000E   0x00 0x00          DC8 0, 0, 1
   \              0x01         
   \   00000011   0x0001             DC16 1
   \   00000013   0x30 0x12          DC8 48, 18, 0, 0, 254
   \              0x00 0x00    
   \              0xFE         
   \   00000018   0x0010             DC16 16
   \   0000001A   0x21 0x10          DC8 33, 16
   \   0000001C   0x0000 0x0000      DC16 0, 0, 65534, 17
   \              0xFFFE 0x0011
   \   00000024   0x21 0x10          DC8 33, 16
   \   00000026   0x0000 0x0000      DC16 0, 0, 65534, 18
   \              0xFFFE 0x0012
   \   0000002E   0x20 0x10          DC8 32, 16, 0, 1, 254
   \              0x00 0x01    
   \              0xFE         
   \   00000033   0x0020             DC16 32
   \   00000035   0x21 0x10          DC8 33, 16
   \   00000037   0x0000 0x0000      DC16 0, 0, 65534, 33
   \              0xFFFE 0x0021
   \   0000003F   0x21 0x10          DC8 33, 16
   \   00000041   0x0000 0x0000      DC16 0, 0, 65534, 34
   \              0xFFFE 0x0022
   \   00000049   0x20 0x10          DC8 32, 16, 0, 1, 254, 0, 0
   \              0x00 0x01    
   \              0xFE 0x00    
   \              0x00         
     40          {
     41            ZCL_DEFINE_OCCUPANCY_SENSING_CLUSTER_SERVER_ATTRIBUTES(OCCUPANCY_SENSING_VAL_MIN_REPORT_PERIOD, OCCUPANCY_SENSING_VAL_MAX_REPORT_PERIOD)
     42          };
     43          
     44          /*******************************************************************************
     45                             Types section
     46          *******************************************************************************/
     47          typedef enum
     48          {
     49            OCCUPANCY_CHANGE_STATE_IDLE,
     50            OCCUPANCY_CHANGE_STATE_OCCUPIED_TO_UNOCCUPIED_IN_PROGRESS,
     51            OCCUPANCY_CHANGE_STATE_UNOCCUPIED_TO_OCCUPIED_IN_PROGRESS,
     52          } OccupancyChangeState_t;
     53          
     54          /******************************************************************************
     55                              Static functions
     56          ******************************************************************************/
     57          static void occupancySensingSetOccupancyState(void);
     58          static void ZCL_ReadAttributeResp(ZCL_Notify_t *ntfy);
     59          static void ZCL_WriteAttributeResp(ZCL_Notify_t *ntfy);
     60          static void ZCL_ConfigureReportingResp(ZCL_Notify_t *ntfy);
     61          static void thOccupancySensorReportInd(ZCL_Addressing_t *addressing, uint8_t reportLength, uint8_t *reportPayload);
     62          static void occupiedToUnoccupiedHandler(void);
     63          static void unoccupiedToOccupiedHandler(void);
     64          static void movementDetected(void);
     65          static bool verifyOccupancySensorDetection(bool state);
     66          
     67          /******************************************************************************
     68                              Static variables
     69          ******************************************************************************/
     70          static HAL_AppTimer_t sensorAttributeUpdateTimer;

   \                                 In section .bss, align 4
     71          static AttibuteReadCallback_t   readAttributeCallback;
   \                     readAttributeCallback:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     72          static AttributeWriteCallback_t writeAttributeCallback;
   \                     writeAttributeCallback:
   \   00000000                      DS8 4

   \                                 In section .data, align 8
   \                     sensorAttributeUpdateTimer:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00               DC8 0
   \   00000015   0x00               DC8 0
   \   00000016   0x00               DC8 0
   \   00000017   0x00               DC8 0
   \   00000018   0x00 0x00          DC8 0, 0
   \   0000001A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000020   0x00000000         DC32 0, 0
   \              0x00000000   
   \   00000028   0x00000000         DC32 0H
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000030   0x000007D0         DC32 2000
   \   00000034   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000038   0x........         DC32 movementDetected
     73          static uint8_t occupancyChangeState = OCCUPANCY_CHANGE_STATE_IDLE;
     74          static uint64_t delayStartTime = 0;
     75          static uint8_t eventCount = 0;
     76          static uint8_t threshold;
     77          static uint16_t delay;
     78          
     79          static HAL_AppTimer_t movementEventTimer =
     80          {
     81            .interval = MOVEMENT_DETECTION_PERIOD,
     82            .mode     = TIMER_REPEAT_MODE,
     83            .callback = movementDetected,
     84          };
     85          
     86          /******************************************************************************
     87                              Implementation section
     88          ******************************************************************************/
     89          /**************************************************************************//**
     90          \brief Initializes Occupancy Sensing cluster
     91          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     92          void occupancySensingClusterInit(void)
     93          {
   \                     occupancySensingClusterInit: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     94            ZCL_Cluster_t *cluster = ZCL_GetCluster(APP_SRC_ENDPOINT_ID, OCCUPANCY_SENSING_CLUSTER_ID, ZCL_CLUSTER_SIDE_CLIENT);
   \   00000002   0x....             LDR      R4,??DataTable12  ;; 0x406
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0x2019             MOVS     R0,#+25
   \   0000000A   0x.... 0x....      BL       ZCL_GetCluster
     95          
     96            if (cluster)
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD001             BEQ      ??occupancySensingClusterInit_0
     97              cluster->ZCL_ReportInd = thOccupancySensorReportInd;
   \   00000012   0x....             LDR      R1,??DataTable12_1
   \   00000014   0x6141             STR      R1,[R0, #+20]
     98          
     99            cluster = ZCL_GetCluster(APP_SRC_ENDPOINT_ID, OCCUPANCY_SENSING_CLUSTER_ID, ZCL_CLUSTER_SIDE_SERVER);
    100            
    101            if (cluster)
   \                     ??occupancySensingClusterInit_0: (+1)
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x0021             MOVS     R1,R4
   \   0000001A   0x2019             MOVS     R0,#+25
   \   0000001C   0x.... 0x....      BL       ZCL_GetCluster
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD015             BEQ      ??occupancySensingClusterInit_1
    102            {
    103              thOccupancySensingClusterServerAttributes.occupancySensorType.value = OCCUPANYC_SENSOR_TYPE_ATTRIBUTE_VALUE_PIR;
   \   00000024   0x....             LDR      R4,??DataTable13
   \   00000026   0x1D25             ADDS     R5,R4,#+4
   \   00000028   0x2600             MOVS     R6,#+0
   \   0000002A   0x746E             STRB     R6,[R5, #+17]
    104              thOccupancySensingClusterServerAttributes.occupancy.value = OCCUPANCY_ATTRIBUTE_VALUE_UNOCCUPIED;
   \   0000002C   0x702E             STRB     R6,[R5, #+0]
    105          
    106              ZCL_ReportOnChangeIfNeeded(&thOccupancySensingClusterServerAttributes.occupancy);
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       ZCL_ReportOnChangeIfNeeded
    107          
    108              thOccupancySensingClusterServerAttributes.PIROccupiedToUnoccupiedDelay.value = ZCL_OCCUPANCY_SENSING_CL_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY_SER_ATTR_DEFAULT_VAL;
   \   00000034   0x832E             STRH     R6,[R5, #+24]
    109              thOccupancySensingClusterServerAttributes.PIRUnoccupiedToOccupiedDelay.value = ZCL_OCCUPANCY_SENSING_CL_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY_SER_ATTR_DEFAULT_VAL;
   \   00000036   0x846E             STRH     R6,[R5, #+34]
    110              thOccupancySensingClusterServerAttributes.PIRUnoccupiedToOccupiedThreshold.value = ZCL_OCCUPANCY_SENSING_CL_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_SER_ATTR_DEFAULT_VAL;
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x3030             ADDS     R0,R0,#+48
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x7001             STRB     R1,[R0, #+0]
    111          
    112              thOccupancySensingClusterServerAttributes.UltrasonicOccupiedToUnoccupiedDelay.value = ZCL_OCCUPANCY_SENSING_CL_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY_SER_ATTR_DEFAULT_VAL;
   \   00000040   0x0022             MOVS     R2,R4
   \   00000042   0x3237             ADDS     R2,R2,#+55
   \   00000044   0x7016             STRB     R6,[R2, #+0]
   \   00000046   0x7056             STRB     R6,[R2, #+1]
    113              thOccupancySensingClusterServerAttributes.UltrasonicUnoccupiedToOccupiedDelay.value = ZCL_OCCUPANCY_SENSING_CL_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY_SER_ATTR_DEFAULT_VAL;
   \   00000048   0x3441             ADDS     R4,R4,#+65
   \   0000004A   0x7026             STRB     R6,[R4, #+0]
   \   0000004C   0x7066             STRB     R6,[R4, #+1]
    114              thOccupancySensingClusterServerAttributes.UltrasonicUnoccupiedToOccupiedThreshold.value = ZCL_OCCUPANCY_SENSING_CL_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD_SER_ATTR_DEFAULT_VAL;
   \   0000004E   0x76C1             STRB     R1,[R0, #+27]
    115            }
    116          }
   \                     ??occupancySensingClusterInit_1: (+1)
   \   00000050   0xBD70             POP      {R4-R6,PC}       ;; return
    117          
    118          /**************************************************************************//**
    119          \brief Initiates occupancy to Occupied state or Unoccupied state otr vice versa
    120          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    121          void occupancySensingInitiateSetOccupancyState(bool state)
    122          {
   \                     occupancySensingInitiateSetOccupancyState: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    123            if (OCCUPANCY_CHANGE_STATE_IDLE == occupancyChangeState)
   \   00000002   0x....             LDR      R4,??DataTable13_1
   \   00000004   0x7D21             LDRB     R1,[R4, #+20]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD157             BNE      ??occupancySensingInitiateSetOccupancyState_0
    124            {
    125              if (OCCUPANCY_ATTRIBUTE_VALUE_UNOCCUPIED == state)
   \   0000000A   0x....             LDR      R1,??DataTable13
   \   0000000C   0x000D             MOVS     R5,R1
   \   0000000E   0x351C             ADDS     R5,R5,#+28
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD123             BNE      ??occupancySensingInitiateSetOccupancyState_1
    126                occupiedToUnoccupiedHandler();
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x7522             STRB     R2,[R4, #+20]
   \   00000018   0x7D48             LDRB     R0,[R1, #+21]
   \   0000001A   0x23FA             MOVS     R3,#+250
   \   0000001C   0x009B             LSLS     R3,R3,#+2        ;; #+1000
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD103             BNE      ??occupancySensingInitiateSetOccupancyState_2
   \   00000022   0x8828             LDRH     R0,[R5, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD00A             BEQ      ??occupancySensingInitiateSetOccupancyState_3
   \   00000028   0xE012             B        ??occupancySensingInitiateSetOccupancyState_4
   \                     ??occupancySensingInitiateSetOccupancyState_2: (+1)
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xD112             BNE      ??occupancySensingInitiateSetOccupancyState_5
   \   0000002E   0x0008             MOVS     R0,R1
   \   00000030   0x3037             ADDS     R0,R0,#+55
   \   00000032   0x7805             LDRB     R5,[R0, #+0]
   \   00000034   0x7846             LDRB     R6,[R0, #+1]
   \   00000036   0x0636             LSLS     R6,R6,#+24
   \   00000038   0x0C36             LSRS     R6,R6,#+16
   \   0000003A   0x4335             ORRS     R5,R5,R6
   \   0000003C   0xD102             BNE      ??occupancySensingInitiateSetOccupancyState_6
   \                     ??occupancySensingInitiateSetOccupancyState_3: (+1)
   \   0000003E   0x.... 0x....      BL       occupancySensingSetOccupancyState
   \   00000042   0xBD70             POP      {R4-R6,PC}
   \                     ??occupancySensingInitiateSetOccupancyState_6: (+1)
   \   00000044   0x3137             ADDS     R1,R1,#+55
   \   00000046   0x7808             LDRB     R0,[R1, #+0]
   \   00000048   0x784D             LDRB     R5,[R1, #+1]
   \   0000004A   0x062D             LSLS     R5,R5,#+24
   \   0000004C   0x0C2D             LSRS     R5,R5,#+16
   \   0000004E   0x4328             ORRS     R0,R0,R5
   \                     ??occupancySensingInitiateSetOccupancyState_4: (+1)
   \   00000050   0x4343             MULS     R3,R0,R3
   \   00000052   0x60A3             STR      R3,[R4, #+8]
   \                     ??occupancySensingInitiateSetOccupancyState_5: (+1)
   \   00000054   0x7322             STRB     R2,[R4, #+12]
   \   00000056   0x....             LDR      R0,??DataTable14
   \   00000058   0x6120             STR      R0,[R4, #+16]
   \   0000005A   0xE02A             B.N      ??occupancySensingInitiateSetOccupancyState_7
    127              else
    128                unoccupiedToOccupiedHandler();
   \                     ??occupancySensingInitiateSetOccupancyState_1: (+1)
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x7520             STRB     R0,[R4, #+20]
   \   00000060   0x7D48             LDRB     R0,[R1, #+21]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD107             BNE      ??occupancySensingInitiateSetOccupancyState_8
   \   00000066   0x7D28             LDRB     R0,[R5, #+20]
   \   00000068   0x8969             LDRH     R1,[R5, #+10]
   \   0000006A   0x2900             CMP      R1,#+0
   \   0000006C   0xD101             BNE      ??occupancySensingInitiateSetOccupancyState_9
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD0E5             BEQ      ??occupancySensingInitiateSetOccupancyState_3
   \                     ??occupancySensingInitiateSetOccupancyState_9: (+1)
   \   00000072   0x8321             STRH     R1,[R4, #+24]
   \   00000074   0xE013             B        ??occupancySensingInitiateSetOccupancyState_10
   \                     ??occupancySensingInitiateSetOccupancyState_8: (+1)
   \   00000076   0x2801             CMP      R0,#+1
   \   00000078   0xD112             BNE      ??occupancySensingInitiateSetOccupancyState_11
   \   0000007A   0x0008             MOVS     R0,R1
   \   0000007C   0x3041             ADDS     R0,R0,#+65
   \   0000007E   0x7802             LDRB     R2,[R0, #+0]
   \   00000080   0x7843             LDRB     R3,[R0, #+1]
   \   00000082   0x061B             LSLS     R3,R3,#+24
   \   00000084   0x0C1B             LSRS     R3,R3,#+16
   \   00000086   0x431A             ORRS     R2,R2,R3
   \   00000088   0xD0D9             BEQ      ??occupancySensingInitiateSetOccupancyState_3
   \   0000008A   0x0008             MOVS     R0,R1
   \   0000008C   0x3041             ADDS     R0,R0,#+65
   \   0000008E   0x7802             LDRB     R2,[R0, #+0]
   \   00000090   0x7843             LDRB     R3,[R0, #+1]
   \   00000092   0x061B             LSLS     R3,R3,#+24
   \   00000094   0x0C1B             LSRS     R3,R3,#+16
   \   00000096   0x431A             ORRS     R2,R2,R3
   \   00000098   0x8322             STRH     R2,[R4, #+24]
   \   0000009A   0x314B             ADDS     R1,R1,#+75
   \   0000009C   0x7808             LDRB     R0,[R1, #+0]
   \                     ??occupancySensingInitiateSetOccupancyState_10: (+1)
   \   0000009E   0x75A0             STRB     R0,[R4, #+22]
   \                     ??occupancySensingInitiateSetOccupancyState_11: (+1)
   \   000000A0   0x7D60             LDRB     R0,[R4, #+21]
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0x7560             STRB     R0,[R4, #+21]
   \   000000A6   0x.... 0x....      BL       HAL_GetSystemTime
   \   000000AA   0x0022             MOVS     R2,R4
   \   000000AC   0x3220             ADDS     R2,R2,#+32
   \   000000AE   0xC203             STM      R2!,{R0,R1}
   \   000000B0   0x3428             ADDS     R4,R4,#+40
   \                     ??occupancySensingInitiateSetOccupancyState_7: (+1)
   \   000000B2   0x0020             MOVS     R0,R4
   \   000000B4   0x.... 0x....      BL       HAL_StartAppTimer
   \   000000B8   0xBD70             POP      {R4-R6,PC}
    129            }
    130            else
    131              /* Consider this as movement event detetced from sensor */
    132              verifyOccupancySensorDetection(state);
   \                     ??occupancySensingInitiateSetOccupancyState_0: (+1)
   \   000000BA   0x.... 0x....      BL       verifyOccupancySensorDetection
    133          
    134          }
   \   000000BE   0xBD70             POP      {R4-R6,PC}       ;; return
    135          
    136          /***************************************************************************//**
    137          \brief checks the detected movement whether Occupied to Unoccupied or Unoccupied to Occupied
    138          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    139          static bool verifyOccupancySensorDetection(bool state)
    140          {
   \                     verifyOccupancySensorDetection: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    141            /* check the occupancy state detected */
    142            switch(occupancyChangeState)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x....             LDR      R5,??DataTable13_1
   \   00000006   0x7D29             LDRB     R1,[R5, #+20]
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD002             BEQ      ??verifyOccupancySensorDetection_0
   \   0000000C   0x2902             CMP      R1,#+2
   \   0000000E   0xD008             BEQ      ??verifyOccupancySensorDetection_1
   \   00000010   0xE005             B        ??verifyOccupancySensorDetection_2
    143            {
    144              case OCCUPANCY_CHANGE_STATE_OCCUPIED_TO_UNOCCUPIED_IN_PROGRESS:
    145                if (state)
   \                     ??verifyOccupancySensorDetection_0: (+1)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD003             BEQ      ??verifyOccupancySensorDetection_2
    146                {
    147                  HAL_StopAppTimer(&sensorAttributeUpdateTimer);
   \                     ??verifyOccupancySensorDetection_3: (+1)
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x.... 0x....      BL       HAL_StopAppTimer
    148                  occupancyChangeState = OCCUPANCY_CHANGE_STATE_IDLE;
   \   0000001C   0x752C             STRB     R4,[R5, #+20]
    149                }
    150                break;
    151              case OCCUPANCY_CHANGE_STATE_UNOCCUPIED_TO_OCCUPIED_IN_PROGRESS:
    152                if (!state)
    153                {
    154                  HAL_StopAppTimer(&movementEventTimer);
    155                  HAL_StopAppTimer(&sensorAttributeUpdateTimer);
    156                  occupancyChangeState = OCCUPANCY_CHANGE_STATE_IDLE;
    157                }
    158                else
    159                  return true;
    160                break;
    161            }
    162            return false;
   \                     ??verifyOccupancySensorDetection_2: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??verifyOccupancySensorDetection_1: (+1)
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD104             BNE      ??verifyOccupancySensorDetection_4
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0x3028             ADDS     R0,R0,#+40
   \   0000002A   0x.... 0x....      BL       HAL_StopAppTimer
   \   0000002E   0xE7F2             B        ??verifyOccupancySensorDetection_3
   \                     ??verifyOccupancySensorDetection_4: (+1)
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}
    163          }
    164          
    165          /**************************************************************************//**
    166          \brief Handler for changing the occupancy state from occupied to unoccupied
    167          ******************************************************************************/
    168          static void occupiedToUnoccupiedHandler(void)
    169          {
    170            occupancyChangeState = OCCUPANCY_CHANGE_STATE_OCCUPIED_TO_UNOCCUPIED_IN_PROGRESS;
    171          
    172            if (OCCUPANYC_SENSOR_TYPE_ATTRIBUTE_VALUE_PIR == thOccupancySensingClusterServerAttributes.occupancySensorType.value)
    173            {
    174              if (!thOccupancySensingClusterServerAttributes.PIROccupiedToUnoccupiedDelay.value)
    175              {
    176                occupancySensingSetOccupancyState();
    177                return;
    178              }
    179              else
    180                sensorAttributeUpdateTimer.interval = thOccupancySensingClusterServerAttributes.PIROccupiedToUnoccupiedDelay.value * AMOUNT_MSEC_IN_SEC;//msec
    181            }
    182            else if (OCCUPANYC_SENSOR_TYPE_ATTRIBUTE_VALUE_ULTRASONIC == thOccupancySensingClusterServerAttributes.occupancySensorType.value)
    183            {
    184              if (!thOccupancySensingClusterServerAttributes.UltrasonicOccupiedToUnoccupiedDelay.value)
    185                {
    186                  occupancySensingSetOccupancyState();
    187                  return;
    188                }
    189                else
    190                  sensorAttributeUpdateTimer.interval = thOccupancySensingClusterServerAttributes.UltrasonicOccupiedToUnoccupiedDelay.value * AMOUNT_MSEC_IN_SEC;//msec
    191            }
    192          
    193            sensorAttributeUpdateTimer.mode     = TIMER_ONE_SHOT_MODE,
    194            sensorAttributeUpdateTimer.callback = occupancySensingSetOccupancyState,
    195            HAL_StartAppTimer(&sensorAttributeUpdateTimer);
    196          }
    197          
    198          /**************************************************************************//**
    199          \brief Handler for changing the occupancy state from unoccupied to occupied 
    200          ******************************************************************************/
    201          static void unoccupiedToOccupiedHandler(void)
    202          {
    203            occupancyChangeState = OCCUPANCY_CHANGE_STATE_UNOCCUPIED_TO_OCCUPIED_IN_PROGRESS;
    204          
    205            if (OCCUPANYC_SENSOR_TYPE_ATTRIBUTE_VALUE_PIR == thOccupancySensingClusterServerAttributes.occupancySensorType.value)
    206            {
    207              if (!thOccupancySensingClusterServerAttributes.PIRUnoccupiedToOccupiedDelay.value && !thOccupancySensingClusterServerAttributes.PIRUnoccupiedToOccupiedThreshold.value)
    208              {
    209                occupancySensingSetOccupancyState();
    210                return;
    211              }
    212              else
    213              {
    214                delay = thOccupancySensingClusterServerAttributes.PIRUnoccupiedToOccupiedDelay.value;
    215                threshold = thOccupancySensingClusterServerAttributes.PIRUnoccupiedToOccupiedThreshold.value;
    216              }
    217            }
    218            else if (OCCUPANYC_SENSOR_TYPE_ATTRIBUTE_VALUE_ULTRASONIC == thOccupancySensingClusterServerAttributes.occupancySensorType.value)
    219            {
    220              if (!thOccupancySensingClusterServerAttributes.UltrasonicUnoccupiedToOccupiedDelay.value)
    221              {
    222                occupancySensingSetOccupancyState();
    223                return;
    224              }
    225              else
    226              {
    227                delay = thOccupancySensingClusterServerAttributes.UltrasonicUnoccupiedToOccupiedDelay.value;
    228                threshold = thOccupancySensingClusterServerAttributes.UltrasonicUnoccupiedToOccupiedThreshold.value;
    229              }
    230            }
    231            eventCount++; //this is considered as first movement detetcted
    232            delayStartTime = HAL_GetSystemTime();
    233            HAL_StartAppTimer(&movementEventTimer);
    234          }
    235          
    236          /**************************************************************************//**
    237          \brief Simulation of occupied movement detection events (for every 2secs )
    238          
    239          \param[in] resp - pointer to response
    240          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    241          static void movementDetected(void)
    242          {
   \                     movementDetected: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    243            uint64_t currentTime = 0;
    244            /* In general , this should be called on any kind of movement unoccupied to occupied
    245               or occcupied to unoccupied , but here only called on unoccipied to occupied movement 
    246               detection event only */
    247            /* API can added here to read sensor detection event - 0 to 1 or 1 to 0 */
    248            if (!verifyOccupancySensorDetection(1))
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       verifyOccupancySensorDetection
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD03C             BEQ      ??movementDetected_0
    249              return;
    250          
    251            if (++eventCount > (threshold & NO_OF_MOVEMENT_DETECTION_EVENTS_ALLOWED) - 1 )
   \   0000000C   0x....             LDR      R4,??DataTable13_1
   \   0000000E   0x7D60             LDRB     R0,[R4, #+21]
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0x7560             STRB     R0,[R4, #+21]
   \   00000014   0x7DA1             LDRB     R1,[R4, #+22]
   \   00000016   0x0749             LSLS     R1,R1,#+29
   \   00000018   0x0F49             LSRS     R1,R1,#+29
   \   0000001A   0x1E49             SUBS     R1,R1,#+1
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x4281             CMP      R1,R0
   \   00000020   0xD231             BCS      ??movementDetected_0
    252            {
    253              HAL_StopAppTimer(&movementEventTimer);
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x3028             ADDS     R0,R0,#+40
   \   00000026   0x.... 0x....      BL       HAL_StopAppTimer
    254              HAL_StopAppTimer(&sensorAttributeUpdateTimer);
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       HAL_StopAppTimer
    255              eventCount = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x7560             STRB     R0,[R4, #+21]
    256              currentTime = HAL_GetSystemTime();
   \   00000034   0x.... 0x....      BL       HAL_GetSystemTime
   \   00000038   0x0006             MOVS     R6,R0
   \   0000003A   0x000B             MOVS     R3,R1
    257              if ((currentTime - delayStartTime)/AMOUNT_MSEC_IN_SEC >= delay )
   \   0000003C   0x8B25             LDRH     R5,[R4, #+24]
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x3020             ADDS     R0,R0,#+32
   \   00000042   0xC803             LDM      R0,{R0,R1}
   \   00000044   0x1A32             SUBS     R2,R6,R0
   \   00000046   0x418B             SBCS     R3,R3,R1
   \   00000048   0x0010             MOVS     R0,R2
   \   0000004A   0x0019             MOVS     R1,R3
   \   0000004C   0x22FA             MOVS     R2,#+250
   \   0000004E   0x0092             LSLS     R2,R2,#+2        ;; #+1000
   \   00000050   0x2300             MOVS     R3,#+0
   \   00000052   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000056   0x2300             MOVS     R3,#+0
   \   00000058   0x4299             CMP      R1,R3
   \   0000005A   0xD801             BHI      ??movementDetected_1
   \   0000005C   0x42A8             CMP      R0,R5
   \   0000005E   0xD302             BCC      ??movementDetected_2
    258              {
    259                occupancySensingSetOccupancyState();
   \                     ??movementDetected_1: (+1)
   \   00000060   0x.... 0x....      BL       occupancySensingSetOccupancyState
   \   00000064   0xBD70             POP      {R4-R6,PC}
    260              }
    261              else
    262              {
    263                /* remaining time before occupancy delay expires */
    264                sensorAttributeUpdateTimer.interval = delay * AMOUNT_MSEC_IN_SEC - (currentTime - delayStartTime);
   \                     ??movementDetected_2: (+1)
   \   00000066   0x20FA             MOVS     R0,#+250
   \   00000068   0x0080             LSLS     R0,R0,#+2        ;; #+1000
   \   0000006A   0x4368             MULS     R0,R5,R0
   \   0000006C   0x1B82             SUBS     R2,R0,R6
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0x3020             ADDS     R0,R0,#+32
   \   00000072   0xC803             LDM      R0,{R0,R1}
   \   00000074   0x1810             ADDS     R0,R2,R0
   \   00000076   0x60A0             STR      R0,[R4, #+8]
    265                sensorAttributeUpdateTimer.mode     = TIMER_ONE_SHOT_MODE;
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0x7320             STRB     R0,[R4, #+12]
    266                sensorAttributeUpdateTimer.callback = occupancySensingSetOccupancyState;
   \   0000007C   0x....             LDR      R0,??DataTable14
   \   0000007E   0x6120             STR      R0,[R4, #+16]
    267          
    268                HAL_StartAppTimer(&sensorAttributeUpdateTimer);
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x.... 0x....      BL       HAL_StartAppTimer
    269              }
    270            }
    271          }
   \                     ??movementDetected_0: (+1)
   \   00000086   0xBD70             POP      {R4-R6,PC}       ;; return
    272          
    273          /**************************************************************************//**
    274          \brief Sets occupancy to Occupied state or Unoccupied state
    275          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    276          static void occupancySensingSetOccupancyState(void)
    277          {
   \                     occupancySensingSetOccupancyState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    278            thOccupancySensingClusterServerAttributes.occupancy.value = !(thOccupancySensingClusterServerAttributes.occupancy.value & 0x01);
   \   00000002   0x....             LDR      R0,??DataTable13
   \   00000004   0x7901             LDRB     R1,[R0, #+4]
   \   00000006   0x07CA             LSLS     R2,R1,#+31
   \   00000008   0x0FD2             LSRS     R2,R2,#+31
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x4051             EORS     R1,R1,R2
   \   0000000E   0x7101             STRB     R1,[R0, #+4]
    279            ZCL_ReportOnChangeIfNeeded(&thOccupancySensingClusterServerAttributes.occupancy);
   \   00000010   0x.... 0x....      BL       ZCL_ReportOnChangeIfNeeded
    280            occupancyChangeState = OCCUPANCY_CHANGE_STATE_IDLE;
   \   00000014   0x....             LDR      R0,??DataTable13_1
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x8281             STRH     R1,[R0, #+20]
    281            eventCount = 0;
    282          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    283          
    284          /**************************************************************************//**
    285          \brief Sets occupancy to Occupied state or Unoccupied state
    286          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    287          void occupancySensingSetSensorType(uint8_t sensorType)
    288          {
    289            if (thOccupancySensingClusterServerAttributes.occupancySensorType.value != sensorType)
   \                     occupancySensingSetSensorType: (+1)
   \   00000000   0x....             LDR      R1,??DataTable13
   \   00000002   0x7D4A             LDRB     R2,[R1, #+21]
   \   00000004   0x4282             CMP      R2,R0
   \   00000006   0xD100             BNE      ??occupancySensingSetSensorType_0
   \   00000008   0x4770             BX       LR
    290            {
    291              thOccupancySensingClusterServerAttributes.occupancySensorType.value = sensorType;
   \                     ??occupancySensingSetSensorType_0: (+1)
   \   0000000A   0xB538             PUSH     {R3-R5,LR}
   \   0000000C   0x7548             STRB     R0,[R1, #+21]
    292              thOccupancySensingClusterServerAttributes.occupancy.value = OCCUPANCY_ATTRIBUTE_VALUE_UNOCCUPIED;
   \   0000000E   0x2400             MOVS     R4,#+0
   \   00000010   0x710C             STRB     R4,[R1, #+4]
    293              HAL_StopAppTimer(&movementEventTimer);
   \   00000012   0x....             LDR      R5,??DataTable15
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x3028             ADDS     R0,R0,#+40
   \   00000018   0x.... 0x....      BL       HAL_StopAppTimer
    294              HAL_StopAppTimer(&sensorAttributeUpdateTimer);
   \   0000001C   0x0028             MOVS     R0,R5
   \   0000001E   0x.... 0x....      BL       HAL_StopAppTimer
    295              eventCount = 0;
   \   00000022   0x756C             STRB     R4,[R5, #+21]
    296            }
    297          }
   \   00000024   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    298          
    299          /**************************************************************************//**
    300          \brief Sends Read Attribute command unicastly
    301          
    302          \param[in] mode - address mode;
    303          \param[in] addr - short address of destination node;
    304          \param[in] ep   - destination endpoint;
    305          \param[in] attr - attribute id;
    306          \param[in] cb   - callback function
    307          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    308          void occupancySensingReadAttribute(APS_AddrMode_t mode,ShortAddr_t addr, Endpoint_t ep,
    309            uint16_t attr, AttibuteReadCallback_t cb)
    310          {
   \                     occupancySensingReadAttribute: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
    311            ZCL_Request_t *req;
    312            ZCL_NextElement_t element;
    313            ZCL_ReadAttributeReq_t readAttrReqElement;
    314          
    315            if (!(req = getFreeCommand()))
   \   0000000A   0x.... 0x....      BL       getFreeCommand
   \   0000000E   0x0004             MOVS     R4,R0
   \   00000010   0xD023             BEQ      ??occupancySensingReadAttribute_0
    316              return;
    317          
    318            readAttributeCallback = cb;
   \   00000012   0x980C             LDR      R0,[SP, #+48]
   \   00000014   0x....             LDR      R1,??DataTable15_1
   \   00000016   0x6008             STR      R0,[R1, #+0]
    319          
    320            readAttrReqElement.id = attr;
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x8086             STRH     R6,[R0, #+4]
    321          
    322            element.payloadLength = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xAE02             ADD      R6,SP,#+8
   \   00000020   0x7070             STRB     R0,[R6, #+1]
    323            element.payload = req->requestPayload;
   \   00000022   0x6CE1             LDR      R1,[R4, #+76]
   \   00000024   0x9103             STR      R1,[SP, #+12]
    324            element.id = ZCL_READ_ATTRIBUTES_COMMAND_ID;
   \   00000026   0x7030             STRB     R0,[R6, #+0]
    325            element.content = &readAttrReqElement;
   \   00000028   0xA801             ADD      R0,SP,#+4
   \   0000002A   0x9004             STR      R0,[SP, #+16]
    326            ZCL_PutNextElement(&element);
   \   0000002C   0xA802             ADD      R0,SP,#+8
   \   0000002E   0x.... 0x....      BL       ZCL_PutNextElement
    327          
    328            fillCommandRequest(req, ZCL_READ_ATTRIBUTES_COMMAND_ID, element.payloadLength);
   \   00000032   0x7872             LDRB     R2,[R6, #+1]
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x.... 0x....      BL       fillCommandRequest
    329            fillDstAddressing(&req->dstAddressing, mode, addr, ep, OCCUPANCY_SENSING_CLUSTER_ID);
   \   0000003C   0x....             LDR      R0,??DataTable12  ;; 0x406
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x002B             MOVS     R3,R5
   \   00000042   0x003A             MOVS     R2,R7
   \   00000044   0x4668             MOV      R0,SP
   \   00000046   0x7E01             LDRB     R1,[R0, #+24]
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x3020             ADDS     R0,R0,#+32
   \   0000004C   0x.... 0x....      BL       fillDstAddressing
    330            req->ZCL_Notify = ZCL_ReadAttributeResp;
   \   00000050   0x....             LDR      R0,??DataTable15_2
   \   00000052   0x61A0             STR      R0,[R4, #+24]
    331          
    332            commandManagerSendAttribute(req);
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       commandManagerSendAttribute
    333          }
   \                     ??occupancySensingReadAttribute_0: (+1)
   \   0000005A   0xB007             ADD      SP,SP,#+28
   \   0000005C   0xBDF0             POP      {R4-R7,PC}       ;; return
    334          
    335          /**************************************************************************//**
    336          \brief Sends Write Attribute command unicastly
    337          
    338          \param[in] mode - address mode;
    339          \param[in] addr - short address of destination node;
    340          \param[in] attr - attribute id;
    341          \param[in] ep   - destination endpoint;
    342          \param[in] type - attribute type;
    343          \param[in] cb   - callback function;
    344          \param[in] data - the pointer to memory with value to be written;
    345          \param[in] size - size of data parameter in octets
    346          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    347          void occupancySensingWriteAttribute(APS_AddrMode_t mode, ShortAddr_t addr, Endpoint_t ep,
    348            uint16_t attr, uint8_t type, AttributeWriteCallback_t cb, void *data, uint8_t size)
    349          {
   \                     occupancySensingWriteAttribute: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
    350            ZCL_Request_t *req;
    351            ZCL_WriteAttributeReq_t writeAttrReq;
    352          
    353            if (!(req = getFreeCommand()))
   \   0000000A   0x.... 0x....      BL       getFreeCommand
   \   0000000E   0x0004             MOVS     R4,R0
   \   00000010   0xD027             BEQ      ??occupancySensingWriteAttribute_0
    354              return;
    355          
    356            writeAttributeCallback = cb;
   \   00000012   0x9809             LDR      R0,[SP, #+36]
   \   00000014   0x....             LDR      R1,??DataTable15_3
   \   00000016   0x6008             STR      R0,[R1, #+0]
    357          
    358            writeAttrReq.id = attr;
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x8086             STRH     R6,[R0, #+4]
    359            writeAttrReq.type = type;
   \   0000001C   0x9808             LDR      R0,[SP, #+32]
   \   0000001E   0xA901             ADD      R1,SP,#+4
   \   00000020   0x7088             STRB     R0,[R1, #+2]
    360            memcpy(req->requestPayload, (uint8_t *)&writeAttrReq, sizeof(ZCL_WriteAttributeReq_t) - sizeof(uint8_t));
   \   00000022   0x2203             MOVS     R2,#+3
   \   00000024   0x6CE0             LDR      R0,[R4, #+76]
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy
   \   0000002A   0x9E0B             LDR      R6,[SP, #+44]
    361            memcpy(req->requestPayload + sizeof(ZCL_WriteAttributeReq_t) - sizeof(uint8_t), (uint8_t *)data, size);
   \   0000002C   0x0032             MOVS     R2,R6
   \   0000002E   0x990A             LDR      R1,[SP, #+40]
   \   00000030   0x6CE0             LDR      R0,[R4, #+76]
   \   00000032   0x1CC0             ADDS     R0,R0,#+3
   \   00000034   0x.... 0x....      BL       __aeabi_memcpy
    362          
    363            fillCommandRequest(req, ZCL_WRITE_ATTRIBUTES_COMMAND_ID, size + sizeof(ZCL_WriteAttributeReq_t) - sizeof(uint8_t));
   \   00000038   0x1CF6             ADDS     R6,R6,#+3
   \   0000003A   0xB2F2             UXTB     R2,R6
   \   0000003C   0x2102             MOVS     R1,#+2
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       fillCommandRequest
    364            fillDstAddressing(&req->dstAddressing, mode, addr, ep, OCCUPANCY_SENSING_CLUSTER_ID);
   \   00000044   0x....             LDR      R0,??DataTable12  ;; 0x406
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \   00000048   0x002B             MOVS     R3,R5
   \   0000004A   0x003A             MOVS     R2,R7
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x7A01             LDRB     R1,[R0, #+8]
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x3020             ADDS     R0,R0,#+32
   \   00000054   0x.... 0x....      BL       fillDstAddressing
    365            req->ZCL_Notify = ZCL_WriteAttributeResp;
   \   00000058   0x....             LDR      R0,??DataTable15_4
   \   0000005A   0x61A0             STR      R0,[R4, #+24]
    366          
    367            commandManagerSendAttribute(req);
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x.... 0x....      BL       commandManagerSendAttribute
    368          }
   \                     ??occupancySensingWriteAttribute_0: (+1)
   \   00000062   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    369          
    370          /**************************************************************************//**
    371          \brief Sends the Configure Reporting for Occupancy Sensing cluster
    372          
    373          \param[in] mode - address mode;
    374          \param[in] addr - short address of destination node;
    375          \param[in] ep   - destination endpoint;
    376          \param[in] min  - the minimum reporting interval;
    377          \param[in] max  - the maximum reporting interval
    378          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    379          void occupancySensingConfigureReporting(APS_AddrMode_t mode, ShortAddr_t addr, Endpoint_t ep,
    380            ZCL_AttributeId_t attrId, uint8_t attrType, ZCL_ReportTime_t min, ZCL_ReportTime_t max)
    381          {
   \                     occupancySensingConfigureReporting: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
    382            ZCL_Request_t *req;
    383            ZCL_NextElement_t element;
    384            ZCL_ConfigureReportingReq_t configureReportingReq;
    385          
    386            if (!(req = getFreeCommand()))
   \   0000000A   0x.... 0x....      BL       getFreeCommand
   \   0000000E   0x0004             MOVS     R4,R0
   \   00000010   0xD02A             BEQ      ??occupancySensingConfigureReporting_0
    387              return;
    388          
    389            configureReportingReq.direction            = ZCL_FRAME_CONTROL_DIRECTION_CLIENT_TO_SERVER;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xA904             ADD      R1,SP,#+16
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    390            configureReportingReq.attributeId          = attrId;
   \   00000018   0x704E             STRB     R6,[R1, #+1]
   \   0000001A   0x0A36             LSRS     R6,R6,#+8
   \   0000001C   0x708E             STRB     R6,[R1, #+2]
    391            configureReportingReq.attributeType        = attrType;
   \   0000001E   0x9A0E             LDR      R2,[SP, #+56]
   \   00000020   0x70CA             STRB     R2,[R1, #+3]
    392            configureReportingReq.minReportingInterval = min;
   \   00000022   0x9A0F             LDR      R2,[SP, #+60]
   \   00000024   0x808A             STRH     R2,[R1, #+4]
    393            configureReportingReq.maxReportingInterval = max;
   \   00000026   0x9A10             LDR      R2,[SP, #+64]
   \   00000028   0x80CA             STRH     R2,[R1, #+6]
    394          
    395            element.payloadLength = 0;
   \   0000002A   0xAE01             ADD      R6,SP,#+4
   \   0000002C   0x7070             STRB     R0,[R6, #+1]
    396            element.payload = req->requestPayload;
   \   0000002E   0x6CE0             LDR      R0,[R4, #+76]
   \   00000030   0x9002             STR      R0,[SP, #+8]
    397            element.id = ZCL_CONFIGURE_REPORTING_COMMAND_ID;
   \   00000032   0x2006             MOVS     R0,#+6
   \   00000034   0x7030             STRB     R0,[R6, #+0]
    398            element.content = &configureReportingReq;
   \   00000036   0xA804             ADD      R0,SP,#+16
   \   00000038   0x9003             STR      R0,[SP, #+12]
    399            ZCL_PutNextElement(&element);
   \   0000003A   0xA801             ADD      R0,SP,#+4
   \   0000003C   0x.... 0x....      BL       ZCL_PutNextElement
    400          
    401            fillCommandRequest(req, ZCL_CONFIGURE_REPORTING_COMMAND_ID, element.payloadLength);
   \   00000040   0x7872             LDRB     R2,[R6, #+1]
   \   00000042   0x2106             MOVS     R1,#+6
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x.... 0x....      BL       fillCommandRequest
    402            fillDstAddressing(&req->dstAddressing, mode, addr, ep, OCCUPANCY_SENSING_CLUSTER_ID);
   \   0000004A   0x....             LDR      R0,??DataTable15_5  ;; 0x406
   \   0000004C   0x9000             STR      R0,[SP, #+0]
   \   0000004E   0x002B             MOVS     R3,R5
   \   00000050   0x003A             MOVS     R2,R7
   \   00000052   0xA808             ADD      R0,SP,#+32
   \   00000054   0x7801             LDRB     R1,[R0, #+0]
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0x3020             ADDS     R0,R0,#+32
   \   0000005A   0x.... 0x....      BL       fillDstAddressing
    403            req->ZCL_Notify = ZCL_ConfigureReportingResp;
   \   0000005E   0x....             LDR      R0,??DataTable15_6
   \   00000060   0x61A0             STR      R0,[R4, #+24]
    404          
    405            commandManagerSendAttribute(req);
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x.... 0x....      BL       commandManagerSendAttribute
    406          }
   \                     ??occupancySensingConfigureReporting_0: (+1)
   \   00000068   0xB009             ADD      SP,SP,#+36
   \   0000006A   0xBDF0             POP      {R4-R7,PC}       ;; return
    407          
    408          /**************************************************************************//**
    409          \brief Report attribute indication handler
    410          
    411          \param[in] addressing - pointer to addressing information;
    412          \param[in] reportLength - data payload length;
    413          \param[in] reportPayload - data pointer
    414          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    415          static void thOccupancySensorReportInd(ZCL_Addressing_t *addressing, uint8_t reportLength, uint8_t *reportPayload)
    416          {
   \                     thOccupancySensorReportInd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x0014             MOVS     R4,R2
    417            ZCL_Report_t *rep = (ZCL_Report_t *)reportPayload;
    418          
    419            LOG_STRING(reportAttrIndStr, "<-Occupancy Sensor Attr Report: t = %d\r\n");
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x....             ADR.N    R1,?_0
   \   0000000A   0x222C             MOVS     R2,#+44
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    420            appSnprintf(reportAttrIndStr, (uint8_t)rep->value[0]);
   \   00000010   0x78E1             LDRB     R1,[R4, #+3]
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       appSnprintf
    421          
    422            thFanControlOccupancyNotify((bool)rep->value[0]);
   \   00000018   0x78E0             LDRB     R0,[R4, #+3]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD000             BEQ      ??thOccupancySensorReportInd_0
   \   0000001E   0x2001             MOVS     R0,#+1
   \                     ??thOccupancySensorReportInd_0: (+1)
   \   00000020   0x.... 0x....      BL       thFanControlOccupancyNotify
    423            (void)addressing, (void)reportLength, (void)rep;
    424          }
   \   00000024   0xB00C             ADD      SP,SP,#+48
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    425          
    426          /**************************************************************************//**
    427          \brief Indication of read attribute response
    428          
    429          \param[in] resp - pointer to response
    430          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    431          static void ZCL_ReadAttributeResp(ZCL_Notify_t *ntfy)
    432          {
   \                     ZCL_ReadAttributeResp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0A4             SUB      SP,SP,#+144
   \   00000004   0x0004             MOVS     R4,R0
    433            ZCL_NextElement_t element;
    434            ZCL_ReadAttributeResp_t *readAttributeResp;
    435          
    436            if (ZCL_SUCCESS_STATUS == ntfy->status)
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD121             BNE      ??ZCL_ReadAttributeResp_0
    437            {
    438              element.id            = ZCL_READ_ATTRIBUTES_RESPONSE_COMMAND_ID;
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x7001             STRB     R1,[R0, #+0]
    439              element.payloadLength = ntfy->responseLength;
   \   00000012   0x7A21             LDRB     R1,[R4, #+8]
   \   00000014   0x7041             STRB     R1,[R0, #+1]
    440              element.payload       = ntfy->responsePayload;
   \   00000016   0x68E0             LDR      R0,[R4, #+12]
   \   00000018   0x9001             STR      R0,[SP, #+4]
    441              element.content       = NULL;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9002             STR      R0,[SP, #+8]
    442          
    443              ZCL_GetNextElement(&element);
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x.... 0x....      BL       ZCL_GetNextElement
    444              readAttributeResp = (ZCL_ReadAttributeResp_t *) element.content;
   \   00000024   0x9C02             LDR      R4,[SP, #+8]
    445          
    446              if (readAttributeCallback)
   \   00000026   0x....             LDR      R0,??DataTable15_1
   \   00000028   0x6801             LDR      R1,[R0, #+0]
   \   0000002A   0x0008             MOVS     R0,R1
   \   0000002C   0xD001             BEQ      ??ZCL_ReadAttributeResp_1
    447                readAttributeCallback((void *)&readAttributeResp->value[0]);
   \   0000002E   0x1D20             ADDS     R0,R4,#+4
   \   00000030   0x4788             BLX      R1
    448          
    449              LOG_STRING(readAttrSuccessStr, " <-Read Occupancy Sensing attribute (0x%x) response: success t = %u\r\n");
   \                     ??ZCL_ReadAttributeResp_1: (+1)
   \   00000032   0xA812             ADD      R0,SP,#+72
   \   00000034   0x....             ADR.N    R1,?_1
   \   00000036   0x2248             MOVS     R2,#+72
   \   00000038   0x.... 0x....      BL       __aeabi_memcpy4
    450              appSnprintf(readAttrSuccessStr, (unsigned)readAttributeResp->id, *((uint8_t*)&readAttributeResp->value[0]));
   \   0000003C   0x7821             LDRB     R1,[R4, #+0]
   \   0000003E   0x7860             LDRB     R0,[R4, #+1]
   \   00000040   0x0600             LSLS     R0,R0,#+24
   \   00000042   0x0C00             LSRS     R0,R0,#+16
   \   00000044   0x4301             ORRS     R1,R1,R0
   \   00000046   0x7922             LDRB     R2,[R4, #+4]
   \   00000048   0xA812             ADD      R0,SP,#+72
   \   0000004A   0x.... 0x....      BL       appSnprintf
   \   0000004E   0xE009             B        ??ZCL_ReadAttributeResp_2
    451            }
    452            else
    453            {
    454              LOG_STRING(readAttrFailStr, " +Read Occupancy Sensing attribute failed: status = 0x%2x\r\n");
   \                     ??ZCL_ReadAttributeResp_0: (+1)
   \   00000050   0xA803             ADD      R0,SP,#+12
   \   00000052   0xBF00             Nop      
   \   00000054   0x....             ADR.N    R1,?_2
   \   00000056   0x223C             MOVS     R2,#+60
   \   00000058   0x.... 0x....      BL       __aeabi_memcpy4
    455              appSnprintf(readAttrFailStr, (unsigned)ntfy->status);
   \   0000005C   0x7821             LDRB     R1,[R4, #+0]
   \   0000005E   0xA803             ADD      R0,SP,#+12
   \   00000060   0x.... 0x....      BL       appSnprintf
    456            }
    457          }
   \                     ??ZCL_ReadAttributeResp_2: (+1)
   \   00000064   0xB024             ADD      SP,SP,#+144
   \   00000066   0xBD10             POP      {R4,PC}          ;; return
    458          
    459          /**************************************************************************//**
    460          \brief Indication of write attribute response
    461          
    462          \param[in] resp - pointer to response
    463          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    464          static void ZCL_WriteAttributeResp(ZCL_Notify_t *ntfy)
    465          {
   \                     ZCL_WriteAttributeResp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB090             SUB      SP,SP,#+64
   \   00000004   0x0004             MOVS     R4,R0
    466            if (ZCL_SUCCESS_STATUS == ntfy->status)
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD10D             BNE      ??ZCL_WriteAttributeResp_0
    467            {
    468              if (writeAttributeCallback)
   \   0000000C   0x....             LDR      R0,??DataTable15_3
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x0001             MOVS     R1,R0
   \   00000012   0xD000             BEQ      ??ZCL_WriteAttributeResp_1
    469                writeAttributeCallback();
   \   00000014   0x4780             BLX      R0
    470          
    471              LOG_STRING(writeAttrSuccessStr, " <-Write Occupancy Sensing attribute response: success\r\n");
   \                     ??ZCL_WriteAttributeResp_1: (+1)
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x....             ADR.N    R1,?_3
   \   0000001A   0x223C             MOVS     R2,#+60
   \   0000001C   0x.... 0x....      BL       __aeabi_memcpy4
    472              appSnprintf(writeAttrSuccessStr);
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x.... 0x....      BL       appSnprintf
   \   00000026   0xE009             B        ??ZCL_WriteAttributeResp_2
    473            }
    474            else
    475            {
    476              LOG_STRING(writeAttrFailStrTwo, " +Write Occupancy Sensing attribute failed: status = 0x%x\r\n");
   \                     ??ZCL_WriteAttributeResp_0: (+1)
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0xBF00             Nop      
   \   0000002C   0x....             ADR.N    R1,?_4
   \   0000002E   0x223C             MOVS     R2,#+60
   \   00000030   0x.... 0x....      BL       __aeabi_memcpy4
    477              appSnprintf(writeAttrFailStrTwo, (unsigned)ntfy->status);
   \   00000034   0x7821             LDRB     R1,[R4, #+0]
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x.... 0x....      BL       appSnprintf
    478            }
    479          }
   \                     ??ZCL_WriteAttributeResp_2: (+1)
   \   0000003C   0xB010             ADD      SP,SP,#+64
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    480          
    481          /**************************************************************************//**
    482          \brief Indication of configure reporting response
    483          
    484          \param[in] resp - pointer to response
    485          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    486          static void ZCL_ConfigureReportingResp(ZCL_Notify_t *ntfy)
    487          {
    488            (void)ntfy;
    489          }
   \                     ZCL_ConfigureReportingResp: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x00000406         DC32     0x406

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     thOccupancySensorReportInd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     thOccupancySensingClusterServerAttributes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     sensorAttributeUpdateTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     occupancySensingSetOccupancyState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     sensorAttributeUpdateTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     readAttributeCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x........         DC32     ZCL_ReadAttributeResp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x........         DC32     writeAttributeCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0x........         DC32     ZCL_WriteAttributeResp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0x00000406         DC32     0x406

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \   00000000   0x........         DC32     ZCL_ConfigureReportingResp

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x3C 0x2D          DC8 "<-Occupancy Sensor Attr Report: t = %d\015\012"
   \              0x4F 0x63    
   \              0x63 0x75    
   \              0x70 0x61    
   \              0x6E 0x63    
   \              0x79 0x20    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x41    
   \              0x74 0x74    
   \              0x72 0x20    
   \              0x52 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x3A 0x20    
   \              0x74 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x20 0x3C          DC8 20H, 3CH, 2DH, 52H, 65H, 61H, 64H, 20H
   \              0x2D 0x52    
   \              0x65 0x61    
   \              0x64 0x20    
   \   00000008   0x4F 0x63          DC8 4FH, 63H, 63H, 75H, 70H, 61H, 6EH, 63H
   \              0x63 0x75    
   \              0x70 0x61    
   \              0x6E 0x63    
   \   00000010   0x79 0x20          DC8 79H, 20H, 53H, 65H, 6EH, 73H, 69H, 6EH
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x69 0x6E    
   \   00000018   0x67 0x20          DC8 67H, 20H, 61H, 74H, 74H, 72H, 69H, 62H
   \              0x61 0x74    
   \              0x74 0x72    
   \              0x69 0x62    
   \   00000020   0x75 0x74          DC8 75H, 74H, 65H, 20H, 28H, 30H, 78H, 25H
   \              0x65 0x20    
   \              0x28 0x30    
   \              0x78 0x25    
   \   00000028   0x78 0x29          DC8 78H, 29H, 20H, 72H, 65H, 73H, 70H, 6FH
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \   00000030   0x6E 0x73          DC8 6EH, 73H, 65H, 3AH, 20H, 73H, 75H, 63H
   \              0x65 0x3A    
   \              0x20 0x73    
   \              0x75 0x63    
   \   00000038   0x63 0x65          DC8 63H, 65H, 73H, 73H, 20H, 74H, 20H, 3DH
   \              0x73 0x73    
   \              0x20 0x74    
   \              0x20 0x3D    
   \   00000040   0x20 0x25          DC8 20H, 25H, 75H, 0DH, 0AH, 0
   \              0x75 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x20 0x2B          DC8 20H, 2BH, 52H, 65H, 61H, 64H, 20H, 4FH
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x20 0x4F    
   \   00000008   0x63 0x63          DC8 63H, 63H, 75H, 70H, 61H, 6EH, 63H, 79H
   \              0x75 0x70    
   \              0x61 0x6E    
   \              0x63 0x79    
   \   00000010   0x20 0x53          DC8 20H, 53H, 65H, 6EH, 73H, 69H, 6EH, 67H
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6E 0x67    
   \   00000018   0x20 0x61          DC8 20H, 61H, 74H, 74H, 72H, 69H, 62H, 75H
   \              0x74 0x74    
   \              0x72 0x69    
   \              0x62 0x75    
   \   00000020   0x74 0x65          DC8 74H, 65H, 20H, 66H, 61H, 69H, 6CH, 65H
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \   00000028   0x64 0x3A          DC8 64H, 3AH, 20H, 73H, 74H, 61H, 74H, 75H
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \   00000030   0x73 0x20          DC8 73H, 20H, 3DH, 20H, 30H, 78H, 25H, 32H
   \              0x3D 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \   00000038   0x78 0x0D          DC8 78H, 0DH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x20 0x3C          DC8 20H, 3CH, 2DH, 57H, 72H, 69H, 74H, 65H
   \              0x2D 0x57    
   \              0x72 0x69    
   \              0x74 0x65    
   \   00000008   0x20 0x4F          DC8 20H, 4FH, 63H, 63H, 75H, 70H, 61H, 6EH
   \              0x63 0x63    
   \              0x75 0x70    
   \              0x61 0x6E    
   \   00000010   0x63 0x79          DC8 63H, 79H, 20H, 53H, 65H, 6EH, 73H, 69H
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x69    
   \   00000018   0x6E 0x67          DC8 6EH, 67H, 20H, 61H, 74H, 74H, 72H, 69H
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x72 0x69    
   \   00000020   0x62 0x75          DC8 62H, 75H, 74H, 65H, 20H, 72H, 65H, 73H
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x65 0x73    
   \   00000028   0x70 0x6F          DC8 70H, 6FH, 6EH, 73H, 65H, 3AH, 20H, 73H
   \              0x6E 0x73    
   \              0x65 0x3A    
   \              0x20 0x73    
   \   00000030   0x75 0x63          DC8 75H, 63H, 63H, 65H, 73H, 73H, 0DH, 0AH
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x0D 0x0A    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x20 0x2B          DC8 20H, 2BH, 57H, 72H, 69H, 74H, 65H, 20H
   \              0x57 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \   00000008   0x4F 0x63          DC8 4FH, 63H, 63H, 75H, 70H, 61H, 6EH, 63H
   \              0x63 0x75    
   \              0x70 0x61    
   \              0x6E 0x63    
   \   00000010   0x79 0x20          DC8 79H, 20H, 53H, 65H, 6EH, 73H, 69H, 6EH
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x69 0x6E    
   \   00000018   0x67 0x20          DC8 67H, 20H, 61H, 74H, 74H, 72H, 69H, 62H
   \              0x61 0x74    
   \              0x74 0x72    
   \              0x69 0x62    
   \   00000020   0x75 0x74          DC8 75H, 74H, 65H, 20H, 66H, 61H, 69H, 6CH
   \              0x65 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \   00000028   0x65 0x64          DC8 65H, 64H, 3AH, 20H, 73H, 74H, 61H, 74H
   \              0x3A 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \   00000030   0x75 0x73          DC8 75H, 73H, 20H, 3DH, 20H, 30H, 78H, 25H
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \   00000038   0x78 0x0D          DC8 78H, 0DH, 0AH, 0
   \              0x0A 0x00    
    490          
    491          #endif // APP_DEVICE_TYPE_THERMOSTAT
    492          
    493          // eof thOccupancySensingCluster.c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ZCL_ConfigureReportingResp
     152   ZCL_ReadAttributeResp
       152   -- Indirect call
       152   -> ZCL_GetNextElement
       152   -> __aeabi_memcpy4
       152   -> appSnprintf
      72   ZCL_WriteAttributeResp
        72   -- Indirect call
        72   -> __aeabi_memcpy4
        72   -> appSnprintf
      16   movementDetected
        16   -> HAL_GetSystemTime
        16   -> HAL_StartAppTimer
        16   -> HAL_StopAppTimer
        16   -> occupancySensingSetOccupancyState
        16   -> verifyOccupancySensorDetection
        16 __aeabi_uldivmod
      16   occupancySensingClusterInit
        16   -> ZCL_GetCluster
        16   -> ZCL_ReportOnChangeIfNeeded
      56   occupancySensingConfigureReporting
        56   -> ZCL_PutNextElement
        56   -> commandManagerSendAttribute
        56   -> fillCommandRequest
        56   -> fillDstAddressing
        56   -> getFreeCommand
      16   occupancySensingInitiateSetOccupancyState
        16   -> HAL_GetSystemTime
        16   -> HAL_StartAppTimer
        16   -> occupancySensingSetOccupancyState
        16   -> verifyOccupancySensorDetection
      48   occupancySensingReadAttribute
        48   -> ZCL_PutNextElement
        48   -> commandManagerSendAttribute
        48   -> fillCommandRequest
        48   -> fillDstAddressing
        48   -> getFreeCommand
       8   occupancySensingSetOccupancyState
         8   -> ZCL_ReportOnChangeIfNeeded
      16   occupancySensingSetSensorType
        16   -> HAL_StopAppTimer
      32   occupancySensingWriteAttribute
        32   -> __aeabi_memcpy
        32   -> commandManagerSendAttribute
        32   -> fillCommandRequest
        32   -> fillDstAddressing
        32   -> getFreeCommand
      56   thOccupancySensorReportInd
        56   -> __aeabi_memcpy4
        56   -> appSnprintf
        56   -> thFanControlOccupancyNotify
      16   verifyOccupancySensorDetection
        16   -> HAL_StopAppTimer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable14
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
      44  ?_0
      72  ?_1
      60  ?_2
      60  ?_3
      60  ?_4
       2  ZCL_ConfigureReportingResp
     104  ZCL_ReadAttributeResp
      64  ZCL_WriteAttributeResp
     136  movementDetected
      82  occupancySensingClusterInit
     108  occupancySensingConfigureReporting
     192  occupancySensingInitiateSetOccupancyState
      94  occupancySensingReadAttribute
      28  occupancySensingSetOccupancyState
      38  occupancySensingSetSensorType
     100  occupancySensingWriteAttribute
       4  readAttributeCallback
      60  sensorAttributeUpdateTimer
          occupancyChangeState
          eventCount
          threshold
          delay
          delayStartTime
          movementEventTimer
      80  thOccupancySensingClusterServerAttributes
      40  thOccupancySensorReportInd
      52  verifyOccupancySensorDetection
       4  writeAttributeCallback

 
     8 bytes in section .bss
   140 bytes in section .data
 1 384 bytes in section .text
 
 1 384 bytes of CODE memory
   148 bytes of DATA memory

Errors: none
Warnings: none
