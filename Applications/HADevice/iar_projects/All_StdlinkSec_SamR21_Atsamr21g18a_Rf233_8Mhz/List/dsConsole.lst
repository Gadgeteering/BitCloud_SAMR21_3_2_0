###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:40:26
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\dimmerSwitch\src\dsConsole.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\dimmerSwitch\src\dsConsole.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\dsConsole.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\dsConsole.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\dimmerSwitch\src\dsConsole.c
      1          /**************************************************************************//**
      2            \file dsConsole.c
      3          
      4            \brief
      5              Dimmer Switch console implementation.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16              13.12.2012 N.Fomin - Created
     17          ******************************************************************************/
     18          #ifdef APP_DEVICE_TYPE_DIMMER_SWITCH
     19          #if APP_ENABLE_CONSOLE == 1
     20          
     21          /******************************************************************************
     22                              Includes section
     23          ******************************************************************************/
     24          #include <uartManager.h>
     25          #include <console.h>
     26          #include <dsOnOffCluster.h>
     27          #include <dsLevelControlCluster.h>
     28          #include <dsPowerConfigurationCluster.h>
     29          #include <resetReason.h>
     30          #include <zclDevice.h>
     31          #include <pdsDataServer.h>
     32          #include <ezModeManager.h>
     33          
     34          /* This value used in ZLL tests to identify non-ZLL EndDevice */
     35          #define TEST_DEVICE_TYPE_HA_END_DEVICE 0x04U
     36          
     37          /******************************************************************************
     38                              Prototypes section
     39          ******************************************************************************/
     40          static void processHelpCmd(const ScanValue_t *args);
     41          static void processResetCmd(const ScanValue_t *args);
     42          static void processInvokeEzModeCmd(const ScanValue_t *args);
     43          static void processOnOffToggleCmd(const ScanValue_t *args);
     44          static void processMoveToLevelCmd(const ScanValue_t *args);
     45          static void processMoveCmd(const ScanValue_t *args);
     46          static void processStepCmd(const ScanValue_t *args);
     47          static void processStopCmd(const ScanValue_t *args);
     48          static void processGetDeviceTypeCmd(const ScanValue_t *args);
     49          static void processResetToFactoryFreshCmd(const ScanValue_t *args);
     50          static void processPseudoPowerOffCmd(const ScanValue_t *args);
     51          static APS_AddrMode_t determineAddressMode(const ScanValue_t *arg);
     52          static void processRestartNwkCmd(const ScanValue_t *args);
     53          static void processGetNetworkAddressCmd(const ScanValue_t *args);
     54          #if (APP_ENABLE_CERTIFICATION_EXTENSION == 0)
     55          static void processSetBatteryVoltage(const ScanValue_t *args);
     56          static void processSetBatteryPercentage(const ScanValue_t *args);
     57          static void processSetBatteryVoltageMinThreshold(const ScanValue_t *args);
     58          static void processSetBatteryVoltageThresholdOne(const ScanValue_t *args);
     59          static void processSetBatteryVoltageThresholdTwo(const ScanValue_t *args);
     60          static void processSetBatteryVoltageThresholdThree(const ScanValue_t *args);
     61          static void processSetBatteryPercentageMinThreshold(const ScanValue_t *args);
     62          static void processSetBatteryPercentageThresholdOne(const ScanValue_t *args);
     63          static void processSetBatteryPercentageThresholdTwo(const ScanValue_t *args);
     64          static void processSetBatteryPercentageThresholdThree(const ScanValue_t *args);
     65          static void processSetBatteryAlarmMask(const ScanValue_t *args);
     66          static void processReadBatteryVoltage(const ScanValue_t *args);
     67          static void processReadBatteryPercentage(const ScanValue_t *args);
     68          static void processReadBatteryVoltageMinThreshold(const ScanValue_t *args);
     69          static void processReadBatteryVoltageThresholdOne(const ScanValue_t *args);
     70          static void processReadBatteryVoltageThresholdTwo(const ScanValue_t *args);
     71          static void processReadBatteryVoltageThresholdThree(const ScanValue_t *args);
     72          static void processReadBatteryPercentageMinThreshold(const ScanValue_t *args);
     73          static void processReadBatteryPercentageThresholdOne(const ScanValue_t *args);
     74          static void processReadBatteryPercentageThresholdTwo(const ScanValue_t *args);
     75          static void processReadBatteryPercentageThresholdThree(const ScanValue_t *args);
     76          static void processReadBatteryAlarmMask(const ScanValue_t *args);
     77          static void processReadBatteryAlarmState(const ScanValue_t *args);
     78          static void processResetBatteryState(const ScanValue_t *args);
     79          #endif
     80          
     81          /******************************************************************************
     82                              Local variables section
     83          ******************************************************************************/
     84          static uint8_t readBuffer[USART_RX_BUFFER_LENGTH];
     85          static const ConsoleCommand_t cmds[] =
     86          {
     87            {"help", "",processHelpCmd, "->Show help you're reading now:  help\r\n"},
     88            {"reset", "", processResetCmd, "->Reset device\r\n"},
     89            {"getDeviceType", "", processGetDeviceTypeCmd, "-> Request for device type: getDeviceType\r\n"},
     90            {"powerOff", "", processPseudoPowerOffCmd, "-> Powers off device: powerOff\r\n"},
     91            {"invokeEZMode", "", processInvokeEzModeCmd, "->Start finding and binding process\r\n"},
     92            {"onOff", "sdds", processOnOffToggleCmd,
     93              "Sends On/Off command: onOff [addrMode][addr][ep][onOff: -on for On, -off for Off]\r\n"},
     94            {"moveToLevel", "sddddd", processMoveToLevelCmd,
     95              "->Send Move To Level (with On/Off) command: moveToLevel [addrMode][addr][ep][level][transitionTime][onOff]\r\n"},
     96            {"move", "sddddd", processMoveCmd,
     97              "->Send Move (with On/Off) command: move [addrMode][addr][ep][mode][rate][onOff]\r\n"},
     98            {"step", "sdddddd", processStepCmd,
     99              "->Send Step (with On/Off) command: step [addrMode][addr][ep][mode][stepSize][transitionTime][onOff]\r\n"},
    100            {"stop", "sddd", processStopCmd, "->Send Stop (with On/Off) command: stop [addrMode][addr][ep][onOff]\r\n"},
    101            {"resetToFN", "", processResetToFactoryFreshCmd, "->Reset to factory fresh settings: resetToFN\r\n"},
    102            {"getNetworkAddress", "", processGetNetworkAddressCmd, "-> Returns network address: getNetworkAddress\r\n"},
    103            {"restartNwk", "d", processRestartNwkCmd, "-> Restarts network on particular channel [channel]\r\n"},
    104          #if (APP_ENABLE_CERTIFICATION_EXTENSION == 0)
    105            {"setBattVolt", "d", processSetBatteryVoltage, "-> Sets Battery Voltage: setBattVolt [volt]\r\n"},
    106            {"setBattPer", "d", processSetBatteryPercentage, "-> Sets Battery Percentage: setBattPer [per]\r\n"},
    107            {"setBattAlarmMask", "d", processSetBatteryAlarmMask, "-> Sets Battery Alarm Mask: setBattAlarmMask [mask]\r\n"},
    108            {"setBattVoltMinTh", "d", processSetBatteryVoltageMinThreshold, "-> Sets Battery Voltage Min Threshold: setBattVoltMinTh [volt]\r\n"},
    109            {"setBattVoltThOne", "d", processSetBatteryVoltageThresholdOne, "-> Sets Battery Voltage Threshold One: setBattVoltThOne [volt]\r\n"},
    110            {"setBattVoltThTwo", "d", processSetBatteryVoltageThresholdTwo, "-> Sets Battery Voltage Threshold Two: setBattVoltThTwo [volt]\r\n"},
    111            {"setBattVoltThThree", "d", processSetBatteryVoltageThresholdThree, "-> Sets Battery Voltage Threshold Three: setBattVoltThThree [volt]\r\n"},
    112            {"setBattPerMinTh", "d", processSetBatteryPercentageMinThreshold, "-> Sets Battery Voltage Min Threshold: setBattPerMinTh [per]\r\n"},
    113            {"setBattPerThOne", "d", processSetBatteryPercentageThresholdOne, "-> Sets Battery Voltage Threshold One: setBattPerThOne [per]\r\n"},
    114            {"setBattPerThTwo", "d", processSetBatteryPercentageThresholdTwo, "-> Sets Battery Voltage Threshold Two: setBattPerThTwo [per]\r\n"},
    115            {"setBattPerThThree", "d", processSetBatteryPercentageThresholdThree, "-> Sets Battery Voltage Threshold Three: setBattPerThThree [per]\r\n"},
    116            {"readBattVoltMinTh", "", processReadBatteryVoltageMinThreshold, "-> Reads Battery Voltage Min Threshold: readBattVoltMinTh [volt]\r\n"},
    117            {"readBattVoltThOne", "", processReadBatteryVoltageThresholdOne, "-> Reads Battery Voltage Threshold One: readBattVoltThOne [volt]\r\n"},
    118            {"readBattVoltThTwo", "", processReadBatteryVoltageThresholdTwo, "-> Reads Battery Voltage Threshold Two: readBattVoltThTwo [volt]\r\n"},
    119            {"readBattVoltThThree", "", processReadBatteryVoltageThresholdThree, "-> Reads Battery Voltage Threshold Three: readBattVoltThThree [volt]\r\n"},
    120            {"readBattPerMinTh", "", processReadBatteryPercentageMinThreshold, "-> Reads Battery Voltage Min Threshold: readBattPerMinTh [per]\r\n"},
    121            {"readBattPerThOne", "", processReadBatteryPercentageThresholdOne, "-> Reads Battery Voltage Threshold One: readBattPerThOne [per]\r\n"},
    122            {"readBattPerThTwo", "", processReadBatteryPercentageThresholdTwo, "-> Reads Battery Voltage Threshold Two: readBattPerThTwo [per]\r\n"},
    123            {"readBattPerThThree", "", processReadBatteryPercentageThresholdThree, "-> Reads Battery Voltage Threshold Three: readBattPerThThree [per]\r\n"},
    124            {"readBattAlarmMask", "", processReadBatteryAlarmMask, "-> Reads Battery Alarm Mask: readBattAlarmMask [mask]\r\n"},
    125            {"readBattAlarmState", "", processReadBatteryAlarmState, "-> Reads Battery Alarm State: readBattAlarmState [state]\r\n"},
    126            {"resetBattState", "", processResetBatteryState, "-> Resets Battery State: resetBattState [state]\r\n"},
    127            {"readBattVolt", "", processReadBatteryVoltage, "-> Reads Battery Voltage: readBattPerMinTh [volts]\r\n"},
    128            {"readBattPer", "", processReadBatteryPercentage, "-> Reads Battery Percentage: readBattPerMinTh [per]\r\n"},
    129          #endif
    130            {0,0,0,0},
    131          };
    132          
    133          /******************************************************************************
    134                              Implementation section
    135          ******************************************************************************/
    136          /**************************************************************************//**
    137          \brief Sends single char to serial interface
    138          ******************************************************************************/
    139          void consoleTx(char chr)
    140          {
    141            appSnprintf(&chr);
    142          }
    143          
    144          /**************************************************************************//**
    145          \brief Processes single char read from serial interface
    146          
    147          \param[in] char - read char
    148          ******************************************************************************/
    149          void consoleTxStr(const char *str)
    150          {
    151            appSnprintf(str);
    152          }
    153          
    154          /**************************************************************************//**
    155          \brief Initializes console
    156          ******************************************************************************/
    157          void initConsole(void)
    158          {
    159            consoleRegisterCommands(cmds);
    160          }
    161          
    162          /**************************************************************************//**
    163          \brief Processes data received by console
    164          ******************************************************************************/
    165          void processConsole(uint16_t length)
    166          {
    167            int8_t bytesRead = readDataFromUart(readBuffer, MIN(USART_RX_BUFFER_LENGTH, length));
    168          
    169            for (int8_t i = 0; i < bytesRead; i++)
    170              consoleRx(readBuffer[i]);
    171          }
    172          
    173          /**************************************************************************//**
    174          \brief Determines address mode for command
    175          
    176          \param[in] arg - pointer to command argument with address mode string
    177          
    178          \returns address mode
    179          ******************************************************************************/
    180          static APS_AddrMode_t determineAddressMode(const ScanValue_t *arg)
    181          {
    182            if (!memcmp("-g", arg->str, 2))
    183              return APS_GROUP_ADDRESS;
    184          
    185            if (!memcmp("-b", arg->str, 2))
    186              return APS_NO_ADDRESS;
    187          
    188            return APS_SHORT_ADDRESS;
    189          }
    190          
    191          /**************************************************************************//**
    192          \brief Processes request for device type obtaining
    193          
    194          \param[in] args - array of command arguments
    195          ******************************************************************************/
    196          static void processGetDeviceTypeCmd(const ScanValue_t *args)
    197          {
    198            LOG_STRING(deviceFnStatusStr, "DeviceType = %d\r\n");
    199            appSnprintf(deviceFnStatusStr, TEST_DEVICE_TYPE_HA_END_DEVICE);
    200            (void)args;
    201          }
    202          
    203          /**************************************************************************//**
    204          \brief Processes help command
    205          
    206          \param[in] args - array of command arguments
    207          ******************************************************************************/
    208          static void processHelpCmd(const ScanValue_t *args)
    209          {
    210            (void)args;
    211            LOG_STRING(commandStr, "Commands: \r\n");
    212            appSnprintf(commandStr);
    213            for (const ConsoleCommand_t *cmd = cmds; cmd->name; cmd++)
    214              appSnprintf("%s\r\n", cmd->name);
    215          }
    216          
    217          /**************************************************************************//**
    218          \brief Processes reset command: reset device
    219          
    220          \param[in] args - array of command arguments
    221          ******************************************************************************/
    222          static void processResetCmd(const ScanValue_t *args)
    223          {
    224            (void)args;
    225            HAL_WarmReset();
    226          }
    227          
    228          /**************************************************************************//**
    229          \brief Processes start finding and binding command
    230          
    231          \param[in] args - array of command arguments
    232          ******************************************************************************/
    233          static void processInvokeEzModeCmd(const ScanValue_t *args)
    234          {
    235            (void)args;
    236            invokeEzMode(NULL);
    237          }
    238          
    239          /**************************************************************************//**
    240          \brief Processes On/Off/Toggle command
    241          
    242          \param[in] args - array of command arguments
    243          ******************************************************************************/
    244          static void processOnOffToggleCmd(const ScanValue_t *args)
    245          {
    246            uint8_t command;
    247          
    248            if (!memcmp("-on", args[3].str, 3))
    249              command = 1;
    250            else if (!memcmp("-toggle", args[3].str, 7))
    251              command = 2;
    252            else
    253              command = 0;
    254          
    255            onOffSendOnOffToggle(determineAddressMode(args), args[1].uint16, args[2].uint8, command);
    256          }
    257          
    258          /**************************************************************************//**
    259          \brief Processes Move to level command
    260          
    261          \param[in] args - array of command arguments
    262          ******************************************************************************/
    263          static void processMoveToLevelCmd(const ScanValue_t *args)
    264          {
    265            levelControlSendMoveToLevel(determineAddressMode(args), args[1].uint16, args[2].uint8,
    266              args[3].uint8, args[4].uint16, args[5].uint8);
    267          }
    268          
    269          /**************************************************************************//**
    270          \brief Processes Move command
    271          
    272          \param[in] args - array of command arguments
    273          ******************************************************************************/
    274          static void processMoveCmd(const ScanValue_t *args)
    275          {
    276            levelControlSendMove(determineAddressMode(args), args[1].uint16, args[2].uint8,
    277              args[3].uint8, args[4].uint8, args[5].uint8);
    278          }
    279          
    280          /**************************************************************************//**
    281          \brief Processes Step command
    282          
    283          \param[in] args - array of command arguments
    284          ******************************************************************************/
    285          static void processStepCmd(const ScanValue_t *args)
    286          {
    287            levelControlSendStep(determineAddressMode(args), args[1].uint16, args[2].uint8,
    288              args[3].uint8, args[4].uint8, args[5].uint16, args[6].uint8);
    289          }
    290          
    291          /**************************************************************************//**
    292          \brief Processes Stop command
    293          
    294          \param[in] args - array of command arguments
    295          ******************************************************************************/
    296          static void processStopCmd(const ScanValue_t *args)
    297          {
    298            levelControlSendStop(determineAddressMode(args), args[1].uint16, args[2].uint8,
    299              args[3].uint8);
    300          }
    301          
    302          /**************************************************************************//**
    303          \brief Processes reset to factory fresh
    304          
    305          \param[in] args - array of command arguments
    306          ******************************************************************************/
    307          static void processResetToFactoryFreshCmd(const ScanValue_t *args)
    308          {
    309            (void)args;
    310            PDS_DeleteAll(false);
    311          
    312            HAL_WarmReset();
    313          }
    314          
    315          /**************************************************************************//**
    316          \brief Processes pseudo power off command
    317          
    318          \param[in] args - array of command arguments
    319          ******************************************************************************/
    320          static void processPseudoPowerOffCmd(const ScanValue_t *args)
    321          {
    322            /* Disable BitCloud tasks for preventing calls to the radio.
    323               HAL is enabled so it it allows to receive commands through UART. */
    324            SYS_DisableTask(ZDO_TASK_ID);
    325            SYS_DisableTask(APS_TASK_ID);
    326            SYS_DisableTask(NWK_TASK_ID);
    327            SYS_DisableTask(MAC_PHY_HWD_TASK_ID);
    328            (void)args;
    329          }
    330          
    331          /**************************************************************************//**
    332          \brief Processes get network address command
    333          
    334          \param[in] args - array of command arguments
    335          ******************************************************************************/
    336          static void processGetNetworkAddressCmd(const ScanValue_t *args)
    337          {
    338            (void)args;
    339            appSnprintf("%04x\r\n", NWK_GetShortAddr());
    340          }
    341          
    342          /**************************************************************************//**
    343          \brief Processes Restart Network command
    344          
    345          \param[in] args - array of command arguments
    346          ******************************************************************************/
    347          static void processRestartNwkCmd(const ScanValue_t *args)
    348          {
    349            CS_WriteParameter(CS_CHANNEL_MASK_ID, &(uint32_t){1ul << args[0].uint8});
    350          
    351            appRestart(false);
    352          }
    353          
    354          #if (APP_ENABLE_CERTIFICATION_EXTENSION == 0)
    355          
    356          /**************************************************************************//**
    357          \brief Processes Set Battery Voltage
    358          
    359          \param[in] args - array of command arguments
    360          ******************************************************************************/
    361          static void processSetBatteryVoltage(const ScanValue_t *args)
    362          {
    363            dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltage.value = args[0].uint8;
    364          }
    365          
    366          /**************************************************************************//**
    367          \brief Processes Set Battery Percentage
    368          
    369          \param[in] args - array of command arguments
    370          ******************************************************************************/
    371          static void processSetBatteryPercentage(const ScanValue_t *args)
    372          {
    373            dsPowerConfigurationClusterServerAttributes.batterySourceOnePercentageRemaining.value = (args[0].uint8)*2;
    374          }
    375          
    376          /**************************************************************************//**
    377          \brief Processes Set Battery Voltage Min Threshold
    378          
    379          \param[in] args - array of command arguments
    380          ******************************************************************************/
    381          static void processSetBatteryVoltageMinThreshold(const ScanValue_t *args)
    382          {
    383            dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageMinThreshold.value = args[0].uint8;
    384          }
    385          
    386          /**************************************************************************//**
    387          \brief Processes Set Battery Voltage Threshold One
    388          
    389          \param[in] args - array of command arguments
    390          ******************************************************************************/
    391          static void processSetBatteryVoltageThresholdOne(const ScanValue_t *args)
    392          {
    393            dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageThreshold_1.value = args[0].uint8;
    394          }
    395          
    396          /**************************************************************************//**
    397          \brief Processes Set Battery Voltage Threshold Two
    398          
    399          \param[in] args - array of command arguments
    400          ******************************************************************************/
    401          static void processSetBatteryVoltageThresholdTwo(const ScanValue_t *args)
    402          {
    403            dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageThreshold_2.value = args[0].uint8;
    404          }
    405          
    406          /**************************************************************************//**
    407          \brief Processes Set Battery Voltage Threshold Three
    408          
    409          \param[in] args - array of command arguments
    410          ******************************************************************************/
    411          static void processSetBatteryVoltageThresholdThree(const ScanValue_t *args)
    412          {
    413            dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageThreshold_3.value = args[0].uint8;
    414          }
    415          
    416          /**************************************************************************//**
    417          \brief Processes Set Battery Percentage Min Threshold
    418          
    419          \param[in] args - array of command arguments
    420          ******************************************************************************/
    421          static void processSetBatteryPercentageMinThreshold(const ScanValue_t *args)
    422          {
    423            dsPowerConfigurationClusterServerAttributes.batterySourceOnePercentageMinThreshold.value = args[0].uint8;
    424          }
    425          
    426          /**************************************************************************//**
    427          \brief Processes Set Battery Percentage Threshold One
    428          
    429          \param[in] args - array of command arguments
    430          ******************************************************************************/
    431          static void processSetBatteryPercentageThresholdOne(const ScanValue_t *args)
    432          {
    433            dsPowerConfigurationClusterServerAttributes.batterySourceOnePercentageThreshold_1.value = args[0].uint8;
    434          }
    435          
    436          /**************************************************************************//**
    437          \brief Processes Set Battery Percentage Threshold Two
    438          
    439          \param[in] args - array of command arguments
    440          ******************************************************************************/
    441          static void processSetBatteryPercentageThresholdTwo(const ScanValue_t *args)
    442          {
    443            dsPowerConfigurationClusterServerAttributes.batterySourceOnePercentageThreshold_2.value = args[0].uint8;
    444          }
    445          
    446          /**************************************************************************//**
    447          \brief Processes Set Battery Percentage Threshold Three
    448          
    449          \param[in] args - array of command arguments
    450          ******************************************************************************/
    451          static void processSetBatteryPercentageThresholdThree(const ScanValue_t *args)
    452          {
    453            dsPowerConfigurationClusterServerAttributes.batterySourceOnePercentageThreshold_3.value = args[0].uint8;
    454          }
    455          
    456          /**************************************************************************//**
    457          \brief Processes Set Battery Alarm Mask
    458          
    459          \param[in] args - array of command arguments
    460          ******************************************************************************/
    461          static void processSetBatteryAlarmMask(const ScanValue_t *args)
    462          {
    463            uint8_t value = ((args[0].uint8) & 0x0F);
    464            memcpy(&dsPowerConfigurationClusterServerAttributes.batterySourceOneAlarmMask.value,&value, sizeof(uint8_t));
    465          }
    466          
    467          /**************************************************************************//**
    468          \brief Processes Read Battery Voltage
    469          
    470          \param[in] args - array of command arguments
    471          ******************************************************************************/
    472          static void processReadBatteryVoltage(const ScanValue_t *args)
    473          {
    474            (void)args;
    475            LOG_STRING(readBattVoltStr, "Battery Voltage = %d\r\n");
    476            appSnprintf(readBattVoltStr, dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltage.value);
    477          }
    478          
    479          /**************************************************************************//**
    480          \brief Processes Read Battery Percentage
    481          
    482          \param[in] args - array of command arguments
    483          ******************************************************************************/
    484          static void processReadBatteryPercentage(const ScanValue_t *args)
    485          {
    486            (void)args;
    487            LOG_STRING(readBattPerStr, "Battery Percentage = %d\r\n");
    488            appSnprintf(readBattPerStr, (dsPowerConfigurationClusterServerAttributes.batterySourceOnePercentageRemaining.value/2));
    489          }
    490          
    491          /**************************************************************************//**
    492          \brief Processes Read Battery Voltage Min Threshold
    493          
    494          \param[in] args - array of command arguments
    495          ******************************************************************************/
    496          static void processReadBatteryVoltageMinThreshold(const ScanValue_t *args)
    497          {
    498            (void)args;
    499            LOG_STRING(readBattVoltMinThStr, "Battery Voltage Min Threshold = %d\r\n");
    500            appSnprintf(readBattVoltMinThStr, dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageMinThreshold.value);
    501          }
    502          
    503          /**************************************************************************//**
    504          \brief Processes Read Battery Voltage Threshold One
    505          
    506          \param[in] args - array of command arguments
    507          ******************************************************************************/
    508          static void processReadBatteryVoltageThresholdOne(const ScanValue_t *args)
    509          {
    510            (void)args;
    511            LOG_STRING(readBattVoltThOneStr, "Battery Voltage Threshold One = %d\r\n");
    512            appSnprintf(readBattVoltThOneStr, dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageThreshold_1.value);
    513          }
    514          
    515          /**************************************************************************//**
    516          \brief Processes Read Battery Voltage Threshold Two
    517          
    518          \param[in] args - array of command arguments
    519          ******************************************************************************/
    520          static void processReadBatteryVoltageThresholdTwo(const ScanValue_t *args)
    521          {
    522            (void)args;
    523            LOG_STRING(readBattVoltThTwoStr, "Battery Voltage Threshold Two = %d\r\n");
    524            appSnprintf(readBattVoltThTwoStr, dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageThreshold_2.value);
    525          }
    526          
    527          /**************************************************************************//**
    528          \brief Processes Read Battery Voltage Threshold Three
    529          
    530          \param[in] args - array of command arguments
    531          ******************************************************************************/
    532          static void processReadBatteryVoltageThresholdThree(const ScanValue_t *args)
    533          {
    534            (void)args;
    535            LOG_STRING(readBattVoltThThreeStr, "Battery Voltage Threshold Three = %d\r\n");
    536            appSnprintf(readBattVoltThThreeStr, dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageThreshold_3.value);
    537          }
    538          
    539          /**************************************************************************//**
    540          \brief Processes Read Battery Percentage Min Threshold
    541          
    542          \param[in] args - array of command arguments
    543          ******************************************************************************/
    544          static void processReadBatteryPercentageMinThreshold(const ScanValue_t *args)
    545          {
    546            (void)args;
    547            LOG_STRING(readBattPerMinThStr, "Battery Percentage Min Threshold = %d\r\n");
    548            appSnprintf(readBattPerMinThStr, dsPowerConfigurationClusterServerAttributes.batterySourceOnePercentageMinThreshold.value);
    549          }
    550          
    551          /**************************************************************************//**
    552          \brief Processes Read Battery Percentage Threshold One
    553          
    554          \param[in] args - array of command arguments
    555          ******************************************************************************/
    556          static void processReadBatteryPercentageThresholdOne(const ScanValue_t *args)
    557          {
    558            (void)args;
    559            LOG_STRING(readBattPerThOneStr, "Battery Percentage Threshold One = %d\r\n");
    560            appSnprintf(readBattPerThOneStr, dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageThreshold_1.value);
    561          }
    562          
    563          /**************************************************************************//**
    564          \brief Processes Read Battery Percentage Threshold Two
    565          
    566          \param[in] args - array of command arguments
    567          ******************************************************************************/
    568          static void processReadBatteryPercentageThresholdTwo(const ScanValue_t *args)
    569          {
    570            (void)args;
    571            LOG_STRING(readBattPerThTwoStr, "Battery Percentage Threshold Two = %d\r\n");
    572            appSnprintf(readBattPerThTwoStr, dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageThreshold_2.value);
    573          }
    574          
    575          /**************************************************************************//**
    576          \brief Processes Read Battery Percentage Threshold Three
    577          
    578          \param[in] args - array of command arguments
    579          ******************************************************************************/
    580          static void processReadBatteryPercentageThresholdThree(const ScanValue_t *args)
    581          {
    582            (void)args;
    583            LOG_STRING(readBattPerThThreeStr, "Battery Percentage Threshold Three = %d\r\n");
    584            appSnprintf(readBattPerThThreeStr, dsPowerConfigurationClusterServerAttributes.batterySourceOneVoltageThreshold_3.value);
    585          }
    586          
    587          /**************************************************************************//**
    588          \brief Processes Read Battery Alarm Mask
    589          
    590          \param[in] args - array of command arguments
    591          ******************************************************************************/
    592          static void processReadBatteryAlarmMask(const ScanValue_t *args)
    593          {
    594            (void)args;
    595            uint8_t value;
    596            memcpy(&value,&dsPowerConfigurationClusterServerAttributes.batterySourceOneAlarmMask.value, sizeof(uint8_t));
    597            LOG_STRING(readBattAlarmMaskStr, "Battery Alarm Mask = %d\r\n");
    598            appSnprintf(readBattAlarmMaskStr, (value & 0x0f));
    599          }
    600          
    601          /**************************************************************************//**
    602          \brief Processes Read Battery Alarm State
    603          
    604          \param[in] args - array of command arguments
    605          ******************************************************************************/
    606          static void processReadBatteryAlarmState(const ScanValue_t *args)
    607          {
    608            (void)args;
    609            LOG_STRING(readBattAlarmStateStr, "currentBatteryAlarmState - 0x%08lx\r\n");
    610            appSnprintf(readBattAlarmStateStr, dsPowerConfigurationClusterServerAttributes.batterySourceOneAlarmState.value);
    611          }
    612          
    613          /**************************************************************************//**
    614          \brief Resets Battery State
    615          
    616          \param[in] args - array of command arguments
    617          ******************************************************************************/
    618          static void processResetBatteryState(const ScanValue_t *args)
    619          {
    620            (void)args;
    621            powerConfigurationClusterInitAttributes();
    622          }
    623          
    624          #endif // APP_ENABLE_CERTIFICATION_EXTENSION
    625          
    626          #endif // APP_ENABLE_CONSOLE == 1
    627          #endif // APP_DEVICE_TYPE_DIMMER_SWITCH
    628          
    629          // eof dsConsole.c


 

 


Errors: none
Warnings: none
