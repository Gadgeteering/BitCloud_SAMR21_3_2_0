###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:44:05
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thermostat.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thermostat.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\thermostat.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\thermostat.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thermostat.c
      1          /**************************************************************************//**
      2            \file thermostat.c
      3          
      4            \brief
      5              Thermostat implementation.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16              09/09/2014 Unithra.C  - Created
     17          ******************************************************************************/
     18          #ifdef APP_DEVICE_TYPE_THERMOSTAT
     19          
     20          /******************************************************************************
     21                                       Includes section
     22          ******************************************************************************/
     23          #include <thClusters.h>
     24          #include <basicCluster.h>
     25          #include <identifyCluster.h>
     26          #include <thThermostatCluster.h>
     27          #include <thThermostatUiConfCluster.h>
     28          #include <zclDevice.h>
     29          #include <zclSecurityManager.h>
     30          #include <commandManager.h>
     31          #include <uartManager.h>
     32          #include <console.h>
     33          #include <pdsDataServer.h>
     34          #include <ezModeManager.h>
     35          #include <haClusters.h>
     36          #include <otauService.h>
     37          #include <thOccupancySensingCluster.h>
     38          #include <thFanControlCluster.h>
     39          #include <thDiagnosticsCluster.h>
     40          #include <thHumidityMeasurementCluster.h>
     41          #include <thGroupsCluster.h>
     42          #include <thScenesCluster.h>
     43          #include <thTemperatureMeasurementCluster.h>
     44          #ifdef BOARD_QTOUCH_XPRO
     45          #include <qtTaskManager.h>
     46          #endif
     47          #include <sleep.h>
     48          #include <halSleep.h>
     49          #include <sysIdleHandler.h>
     50          /******************************************************************************
     51                             Define(s) section
     52          ******************************************************************************/
     53          #define UPDATING_PERIOD                    20000UL
     54          
     55          /******************************************************************************
     56                             type(s) section
     57          ******************************************************************************/
     58          typedef enum _ReportingState_t
     59          {
     60            THERMOSTAT_REPORTING_CONFIGURED = 0,
     61            OCCUPANCY_REPORTING_CONFIGURED,
     62            HUMIDITY_MEASURED_VALUE_REPORTING_CONFIGURED,
     63            HUMIDITY_TOLERANCE_VALUE_REPORTING_CONFIGURED,
     64            TEMPERATURE_MEASURED_VALUE_REPORTING_CONFIGURED,
     65            TEMPERATURE_TOLERANCE_VALUE_REPORTING_CONFIGURED,
     66            CONFIGURATION_COMPLETED
     67          }ReportingState_t;
     68          
     69          /*******************************************************************************
     70                              Static functions section
     71          *******************************************************************************/
     72          static void updateCommissioningStateCb(ZCL_Addressing_t *addressing, ZCL_UpdateCommissioningState_t *payload);
     73          static void updateSensorsAttributeValues(void);
     74          
     75          static void isBusyOrPollCheck(SYS_EventId_t eventId, SYS_EventData_t data);
     76          #if defined (_SLEEP_WHEN_IDLE_)
     77          #if (APP_ENABLE_CONSOLE == 1)
     78          static void sleepModeHandler(SYS_EventId_t eventId, SYS_EventData_t data);
     79          #endif
     80          static void sleepEventHandler(SYS_EventId_t eventId, SYS_EventData_t data);
     81          static void ZDO_WakeUpConf(ZDO_WakeUpConf_t *conf);
     82          #endif
     83          
     84          #ifdef BOARD_QTOUCH_XPRO
     85          #define TOUCH_TIMEOUT 5000
     86          static void appButtonsInd( BSP_TouchEvent_t event, BSP_ButtonId_t button, uint8_t data);
     87          static uint8_t appConvertTemperatureToSliderPosition(int16_t temperature, int16_t min,int16_t max);

   \                                 In section .data, align 4
     88          static bool setPointChangeStatusR = false,setPointChangeStatusL = false;
   \                     setPointChangeStatusR:
   \   00000000   0x00               DC8 0
   \   00000001   0x00               DC8 0
   \   00000002   0x00               DC8 0
   \   00000003   0x00               DC8 0
   \   00000004   0x00               DC8 0
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000008   0x00000000         DC32 0H
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000010   0x00001388         DC32 5000
   \   00000014   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   00000018   0x........         DC32 touchTimeOut
     89          static BSP_ButtonId_t button_prev= NONE;
     90          static bool setPointRecFlag = false;
     91          static uint8_t slider_thershold;
     92          static void touchTimeOut(void);
     93          static HAL_AppTimer_t TouchTimer={
     94            .interval = TOUCH_TIMEOUT,
     95            .mode = TIMER_ONE_SHOT_MODE,
     96            .callback = touchTimeOut,
     97          };
     98          #endif
     99          
    100          static SYS_EventReceiver_t zdoBusyPollCheck = { .func = isBusyOrPollCheck};
    101          #if defined (_SLEEP_WHEN_IDLE_)

   \                                 In section .bss, align 4
    102          static ZDO_WakeUpReq_t zdoWakeUpReq;
   \                     zdoWakeUpReq:
   \   00000000                      DS8 8

   \                                 In section .data, align 4
   \                     zdoBusyPollCheck:
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000000C   0x........         DC32 isBusyOrPollCheck
   \   00000010   0x00000000         DC32 0H
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000001C   0x........         DC32 sleepEventHandler
   \   00000020   0x00000000         DC32 0H
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000002C   0x........         DC32 sleepModeHandler
   \   00000030   0x00000000         DC32 0H
   \   00000034   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x19         
   \   00000045   0x0104 0x0301      DC16 260, 769
   \   00000049   0x00 0x0C          DC8 0, 12
   \   0000004B   0x........         DC32 thServerClusterIds
   \   0000004F   0x04               DC8 4
   \   00000050   0x........         DC32 thClientClusterIds, thServerClusters, thClientClusters
   \              0x........   
   \              0x........   
   \   0000005C   0x00000000         DC32 0H, 0H, 0H, 0H, 0H, updateCommissioningStateCb
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x........   
   \   00000074   0x00000000         DC32 0H
   \   00000078   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   0000007C   0x00004E20         DC32 20000
   \   00000080   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000084   0x........         DC32 updateSensorsAttributeValues
    103          static SYS_EventReceiver_t sleepEventListener = {.func = sleepEventHandler};
    104          #if (APP_ENABLE_CONSOLE == 1)
    105          static SYS_EventReceiver_t sleepModeListener = {.func = sleepModeHandler};
    106          #endif
    107          #endif
    108          
    109          /******************************************************************************
    110                              Local variables section
    111          ******************************************************************************/
    112          static ZCL_DeviceEndpoint_t thEndpoint =
    113          {
    114            .simpleDescriptor =
    115            {
    116              .endpoint            = APP_SRC_ENDPOINT_ID,
    117              .AppProfileId        = PROFILE_ID_HOME_AUTOMATION,
    118              .AppDeviceId         = HA_THERMOSTAT_DEVICE_ID,
    119              .AppInClustersCount  = ARRAY_SIZE(thServerClusterIds),
    120              .AppInClustersList   = thServerClusterIds,
    121              .AppOutClustersCount = ARRAY_SIZE(thClientClusterIds),
    122              .AppOutClustersList  = thClientClusterIds,
    123            },
    124            .serverCluster = thServerClusters,
    125            .clientCluster = thClientClusters,
    126          };
    127          

   \                                 In section .data, align 4
    128          static ZCL_LinkKeyDesc_t thermostatKeyDesc = {APS_UNIVERSAL_EXTENDED_ADDRESS  /*addr*/,
   \                     thermostatKeyDesc:
   \   00000000   0xFFFFFFFF         DC32 4294967295, 4294967295
   \              0xFFFFFFFF   
   \   00000008   0x5A 0x69          DC8 90, 105, 103, 66, 101, 101, 65, 108, 108, 105, 97, 110, 99, 101, 48
   \              0x67 0x42    
   \              0x65 0x65    
   \              0x41 0x6C    
   \              0x6C 0x69    
   \              0x61 0x6E    
   \              0x63 0x65    
   \              0x30         
   \   00000017   0x39               DC8 57
    129                                                   HA_LINK_KEY /*key*/};
    130          
    131          static IdentifySubscriber_t subcriber =
    132          {
    133            .updateCommissioningState = updateCommissioningStateCb
    134          };
    135          
    136          static HAL_AppTimer_t sensorAttributeUpdateTimer =
    137          {
    138            .interval = UPDATING_PERIOD,
    139            .mode     = TIMER_REPEAT_MODE,
    140            .callback = updateSensorsAttributeValues,
    141          };
    142          /******************************************************************************
    143                              Prototypes section
    144          ******************************************************************************/
    145          static void thConfigureReportingResp(ZCL_Notify_t *ntfy);
    146          /******************************************************************************
    147                              Implementation section
    148          ******************************************************************************/
    149          
    150          /**************************************************************************//**
    151          \brief Device initialization routine
    152          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    153          void appDeviceInit(void)
    154          {
   \                     appDeviceInit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    155            ZCL_RegisterEndpoint(&thEndpoint);
   \   00000002   0x....             LDR      R4,??DataTable11
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x3030             ADDS     R0,R0,#+48
   \   00000008   0x.... 0x....      BL       ZCL_RegisterEndpoint
    156          
    157          #if (APP_ENABLE_CONSOLE == 1) || (APP_DEVICE_EVENTS_LOGGING == 1)
    158            uartInit();
   \   0000000C   0x.... 0x....      BL       uartInit
    159          #endif
    160          #if APP_ENABLE_CONSOLE == 1
    161            initConsole();
   \   00000010   0x.... 0x....      BL       initConsole
    162          #endif
    163            /* Subscribe the Commissioning update command for Target devices */
    164            identifySubscribe(&subcriber);
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x305C             ADDS     R0,R0,#+92
   \   00000018   0x.... 0x....      BL       identifySubscribe
    165          
    166            basicClusterInit();
   \   0000001C   0x.... 0x....      BL       basicClusterInit
    167            identifyClusterInit();
   \   00000020   0x.... 0x....      BL       identifyClusterInit
    168            thermostatClusterInit();
   \   00000024   0x.... 0x....      BL       thermostatClusterInit
    169            thermostatUiConfClusterInit();
   \   00000028   0x.... 0x....      BL       thermostatUiConfClusterInit
    170            occupancySensingClusterInit();
   \   0000002C   0x.... 0x....      BL       occupancySensingClusterInit
    171            fanControlClusterInit();
   \   00000030   0x.... 0x....      BL       fanControlClusterInit
    172            diagnosticsClusterInit();
   \   00000034   0x.... 0x....      BL       diagnosticsClusterInit
    173            humidityMeasurementClusterInit();
   \   00000038   0x.... 0x....      BL       humidityMeasurementClusterInit
    174            groupsClusterInit();
   \   0000003C   0x.... 0x....      BL       groupsClusterInit
    175            scenesClusterInit();
   \   00000040   0x.... 0x....      BL       scenesClusterInit
    176            thTemperatureMeasurementClusterInit();
   \   00000044   0x.... 0x....      BL       thTemperatureMeasurementClusterInit
    177            
    178          #ifdef BOARD_QTOUCH_XPRO  
    179            BSP_InitQTouch(appButtonsInd);
   \   00000048   0x....             LDR      R0,??DataTable12
   \   0000004A   0x.... 0x....      BL       BSP_InitQTouch
    180          #endif   
    181          
    182          #if defined (_SLEEP_WHEN_IDLE_)
    183            SYS_EnableSleepWhenIdle();
   \   0000004E   0x.... 0x....      BL       SYS_EnableSleepWhenIdle
    184          #if (APP_ENABLE_CONSOLE == 1)
    185            SYS_SubscribeToEvent(HAL_EVENT_FALLING_ASLEEP, &sleepModeListener);
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0x3120             ADDS     R1,R1,#+32
   \   00000056   0x202C             MOVS     R0,#+44
   \   00000058   0x.... 0x....      BL       SYS_SubscribeToEvent
    186            SYS_SubscribeToEvent(HAL_EVENT_CONTINUING_SLEEP, &sleepModeListener);
   \   0000005C   0x0021             MOVS     R1,R4
   \   0000005E   0x3120             ADDS     R1,R1,#+32
   \   00000060   0x202F             MOVS     R0,#+47
   \   00000062   0x.... 0x....      BL       SYS_SubscribeToEvent
    187          #endif
    188            SYS_SubscribeToEvent(HAL_EVENT_WAKING_UP, &sleepEventListener);
   \   00000066   0x0021             MOVS     R1,R4
   \   00000068   0x3110             ADDS     R1,R1,#+16
   \   0000006A   0x202D             MOVS     R0,#+45
   \   0000006C   0x.... 0x....      BL       SYS_SubscribeToEvent
    189          #endif
    190            SYS_SubscribeToEvent(BC_EVENT_POLL_REQUEST, &zdoBusyPollCheck);  
   \   00000070   0x0021             MOVS     R1,R4
   \   00000072   0x2038             MOVS     R0,#+56
   \   00000074   0x.... 0x....      BL       SYS_SubscribeToEvent
    191            
    192            if (PDS_IsAbleToRestore(HA_APP_MEMORY_MEM_ID))
   \   00000078   0x....             LDR      R5,??DataTable13  ;; 0x4003
   \   0000007A   0x0028             MOVS     R0,R5
   \   0000007C   0x.... 0x....      BL       PDS_IsAbleToRestore
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD002             BEQ      ??appDeviceInit_0
    193              PDS_Restore(HA_APP_MEMORY_MEM_ID);
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0x.... 0x....      BL       PDS_Restore
    194          
    195            ZCL_StartReporting();
   \                     ??appDeviceInit_0: (+1)
   \   0000008A   0x.... 0x....      BL       ZCL_StartReporting
    196          
    197            /* Timer update the attribute values of various sensor types */
    198            HAL_StartAppTimer(&sensorAttributeUpdateTimer);
   \   0000008E   0x3474             ADDS     R4,R4,#+116
   \   00000090   0x0020             MOVS     R0,R4
   \   00000092   0x.... 0x....      BL       HAL_StartAppTimer
    199          }
   \   00000096   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    200          
    201          /**************************************************************************//**
    202            \brief Processes BC_EVENT_POLL_REQUEST event
    203          
    204            \param[in] eventId - id of raised event;
    205            \param[in] data    - event's data.
    206          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    207          static void isBusyOrPollCheck(SYS_EventId_t eventId, SYS_EventData_t data)
    208          {
   \                     isBusyOrPollCheck: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    209          #if defined (_SLEEP_WHEN_IDLE_)
    210            bool *check = (bool *)data;
    211          
    212            *check |= isEzModeInProgress();
   \   00000004   0x.... 0x....      BL       isEzModeInProgress
   \   00000008   0x7821             LDRB     R1,[R4, #+0]
   \   0000000A   0x4308             ORRS     R0,R0,R1
   \   0000000C   0x7020             STRB     R0,[R4, #+0]
    213            (void)eventId;
    214          #else
    215            (void)eventId, (void)data;
    216          #endif
    217          }
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    218          
    219          #if defined (_SLEEP_WHEN_IDLE_)
    220          /**************************************************************************//**
    221            \brief Processes HAL_EVENT_WAKING_UP event
    222          
    223            \param[in] eventId - id of raised event;
    224            \param[in] data    - event's data.
    225          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    226          static void sleepEventHandler(SYS_EventId_t eventId, SYS_EventData_t data)
    227          {
    228            HAL_SleepControl_t *sleepControl = (HAL_SleepControl_t *)data;
    229          
    230            if (HAL_WAKEUP_SOURCE_EXT_IRQ == sleepControl->wakeupSource)
   \                     sleepEventHandler: (+1)
   \   00000000   0x7E48             LDRB     R0,[R1, #+25]
   \   00000002   0x0780             LSLS     R0,R0,#+30
   \   00000004   0xD400             BMI      ??sleepEventHandler_0
   \   00000006   0x4770             BX       LR
    231            {
    232              zdoWakeUpReq.ZDO_WakeUpConf = ZDO_WakeUpConf;
   \                     ??sleepEventHandler_0: (+1)
   \   00000008   0xB580             PUSH     {R7,LR}
   \   0000000A   0x....             LDR      R0,??DataTable13_1
   \   0000000C   0x....             LDR      R1,??DataTable13_2
   \   0000000E   0x6041             STR      R1,[R0, #+4]
    233              ZDO_WakeUpReq(&zdoWakeUpReq);
   \   00000010   0x.... 0x....      BL       ZDO_WakeUpReq
    234            }
    235            (void)eventId;
    236          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    237          
    238          /**************************************************************************//**
    239            \brief Wake up confirmation handler.
    240          
    241            \param[in] conf - confirmation parameters.
    242          *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    243          static void ZDO_WakeUpConf(ZDO_WakeUpConf_t *conf)
    244          {
    245            (void)conf;
    246          }
   \                     ZDO_WakeUpConf: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    247          
    248          #if (APP_ENABLE_CONSOLE == 1)
    249          /**************************************************************************//**
    250            \brief Processes HAL_EVENT_FALL_ASLEEP & HAL_EVENT_CONITUING_SLEEP events
    251          
    252            \param[in] eventId - id of raised event;
    253            \param[in] data    - event's data.
    254          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    255          static void sleepModeHandler(SYS_EventId_t eventId, SYS_EventData_t data)
    256          {
    257            // when console is enabled, we go to idle mode to handle UART Rx interrupt
    258            // because UART Rx interrupt will not wake up the MCU from power save or power down modes
    259            *(HAL_SleepMode_t *)data = HAL_SLEEP_MODE_IDLE;
   \                     sleepModeHandler: (+1)
   \   00000000   0x2003             MOVS     R0,#+3
   \   00000002   0x7008             STRB     R0,[R1, #+0]
    260            (void)eventId;
    261          }
   \   00000004   0x4770             BX       LR               ;; return
    262          #endif // #if (APP_ENABLE_CONSOLE == 1)
    263          #endif // #if defined (_SLEEP_WHEN_IDLE_)
    264          
    265          #ifdef BOARD_QTOUCH_XPRO
    266          
    267          /**************************************************************************//**
    268          \brief callback for touch Timer
    269          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    270          static void touchTimeOut(void)
    271          {
   \                     touchTimeOut: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    272            HAL_StopAppTimer(&TouchTimer);
   \   00000002   0x....             LDR      R4,??DataTable14
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x3008             ADDS     R0,R0,#+8
   \   00000008   0x.... 0x....      BL       HAL_StopAppTimer
    273            setPointChangeStatusR = false;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
    274            button_prev = NONE;
   \   00000010   0x70A0             STRB     R0,[R4, #+2]
    275            setPointRecFlag = false;
   \   00000012   0x70E0             STRB     R0,[R4, #+3]
    276            setPointChangeStatusL = false;
   \   00000014   0x7060             STRB     R0,[R4, #+1]
    277            //ButtonR_LED_Ind(1);
    278            //ButtonL_LED_Ind(1);
    279            //Slider_LED_Off();
    280          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    281          
    282          /**************************************************************************//**
    283          \brief Buttons handler
    284          
    285          \param[in] event - event
    286          \param[in] button - index
    287          \param[in] data - data (AKA hold time)
    288          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    289          void appButtonsInd(BSP_TouchEvent_t event, BSP_ButtonId_t button, uint8_t data)
    290          {
   \                     appButtonsInd: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0xB090             SUB      SP,SP,#+64
    291            uint8_t Pos;
                           ^
Warning[Pe550]: variable "Pos" was set but never used
    292            if (BUTTON_R == button) // Heat set Point  Right
   \   00000004   0x....             LDR      R4,??DataTable14
   \   00000006   0x7862             LDRB     R2,[R4, #+1]
   \   00000008   0x78E3             LDRB     R3,[R4, #+3]
   \   0000000A   0x7827             LDRB     R7,[R4, #+0]
   \   0000000C   0x2600             MOVS     R6,#+0
   \   0000000E   0x....             LDR      R5,??DataTable14_1
   \   00000010   0x2902             CMP      R1,#+2
   \   00000012   0xD154             BNE      ??appButtonsInd_0
    293            {
    294              if( event == TOUCHKEY_PRESSED_EVENT) 
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD12E             BNE      ??appButtonsInd_1
    295              {
    296                if(setPointChangeStatusR != true && setPointRecFlag == false)
   \   00000018   0x431F             ORRS     R7,R7,R3
   \   0000001A   0xD001             BEQ      ??appButtonsInd_2
   \   0000001C   0x7026             STRB     R6,[R4, #+0]
   \   0000001E   0xE0E6             B        ??appButtonsInd_3
    297                {
    298                  if(setPointRecFlag == false && setPointChangeStatusL == true)
   \                     ??appButtonsInd_2: (+1)
   \   00000020   0x4050             EORS     R0,R0,R2
   \   00000022   0x4318             ORRS     R0,R0,R3
   \   00000024   0xD100             BNE      ??appButtonsInd_4
    299                  {
    300                    //ButtonL_LED_Ind(1);  // OFF
    301                    setPointChangeStatusL = false;
   \   00000026   0x7066             STRB     R6,[R4, #+1]
    302                  }        
    303                  //ButtonR_LED_Ind(0);
    304                  Pos = appConvertTemperatureToSliderPosition(thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value,MIN_HEAT_SETPOINT_LIMIT,MAX_HEAT_SETPOINT_LIMIT);
   \                     ??appButtonsInd_4: (+1)
   \   00000028   0x0029             MOVS     R1,R5
   \   0000002A   0x316B             ADDS     R1,R1,#+107
   \   0000002C   0x7808             LDRB     R0,[R1, #+0]
   \   0000002E   0x784A             LDRB     R2,[R1, #+1]
   \   00000030   0x0612             LSLS     R2,R2,#+24
   \   00000032   0x1412             ASRS     R2,R2,#+16
   \   00000034   0x4310             ORRS     R0,R0,R2
   \   00000036   0x....             LDR      R2,??DataTable14_2  ;; 0xf3c
   \   00000038   0x....             LDR      R1,??DataTable14_3  ;; 0x5dc
   \   0000003A   0xB200             SXTH     R0,R0
   \   0000003C   0x.... 0x....      BL       appConvertTemperatureToSliderPosition
    305                  //Slider_LED_On(Pos);
    306                  setPointChangeStatusR = true;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x7020             STRB     R0,[R4, #+0]
    307                  button_prev = BUTTON_R;
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x70A0             STRB     R0,[R4, #+2]
    308                  setPointRecFlag = false;
   \   00000048   0x70E6             STRB     R6,[R4, #+3]
    309                  HAL_StopAppTimer(&TouchTimer);
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x3008             ADDS     R0,R0,#+8
   \   0000004E   0x.... 0x....      BL       HAL_StopAppTimer
    310                  HAL_StartAppTimer(&TouchTimer);
   \   00000052   0x3408             ADDS     R4,R4,#+8
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       HAL_StartAppTimer
    311            
    312                  LOG_STRING(modeStr, "#heat setpoint:%d.%d\r\n");
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x....             ADR.N    R1,?_0
   \   0000005E   0x2218             MOVS     R2,#+24
   \   00000060   0x.... 0x....      BL       __aeabi_memcpy4
    313                  appSnprintf(modeStr, (thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value/100),(int)(thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value%100));
   \   00000064   0x0028             MOVS     R0,R5
   \   00000066   0x306B             ADDS     R0,R0,#+107
   \   00000068   0x7801             LDRB     R1,[R0, #+0]
   \   0000006A   0x7842             LDRB     R2,[R0, #+1]
   \   0000006C   0x0612             LSLS     R2,R2,#+24
   \   0000006E   0x1412             ASRS     R2,R2,#+16
   \   00000070   0x4311             ORRS     R1,R1,R2
   \   00000072   0x356B             ADDS     R5,R5,#+107
   \   00000074   0xE056             B.N      ??appButtonsInd_5
    314                }
    315                else
    316                {
    317                  setPointChangeStatusR = false;
    318                }
    319              }
    320              else
    321              {
    322                if(setPointRecFlag == true && button_prev == BUTTON_R)
   \                     ??appButtonsInd_1: (+1)
   \   00000076   0x2B00             CMP      R3,#+0
   \   00000078   0xD01F             BEQ      ??appButtonsInd_6
   \   0000007A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000007C   0x2802             CMP      R0,#+2
   \   0000007E   0xD11C             BNE      ??appButtonsInd_6
    323                {
    324                  //ButtonR_LED_Ind(1);
    325                  //Slider_LED_Off();
    326                  setPointRecFlag = false;
   \   00000080   0x70E6             STRB     R6,[R4, #+3]
    327                  setPointChangeStatusR = false;
   \   00000082   0x7026             STRB     R6,[R4, #+0]
    328                  thermostatSetPointsChangeButton(0,slider_thershold);
   \   00000084   0x7921             LDRB     R1,[R4, #+4]
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x.... 0x....      BL       thermostatSetPointsChangeButton
    329                  
    330                  LOG_STRING(reportAttrIndStr, "<-Setpoints changed on Thermostat:\r\n");
   \   0000008C   0xA806             ADD      R0,SP,#+24
   \   0000008E   0xBF00             Nop      
   \   00000090   0x....             ADR.N    R1,?_1
   \   00000092   0x2228             MOVS     R2,#+40
   \   00000094   0x.... 0x....      BL       __aeabi_memcpy4
    331                  appSnprintf(reportAttrIndStr);
   \   00000098   0xA806             ADD      R0,SP,#+24
   \   0000009A   0x.... 0x....      BL       appSnprintf
    332                  LOG_STRING(modeStr1, "#heat setpoint:%d.%d\r\n");
   \   0000009E   0x4668             MOV      R0,SP
   \   000000A0   0x....             ADR.N    R1,?_2
   \   000000A2   0x2218             MOVS     R2,#+24
   \   000000A4   0x.... 0x....      BL       __aeabi_memcpy4
    333                  appSnprintf(modeStr1, (thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value/100),(int)(thThermostatClusterServerAttributes.occupiedHeatingSetpoint.value%100));
   \   000000A8   0x0028             MOVS     R0,R5
   \   000000AA   0x306B             ADDS     R0,R0,#+107
   \   000000AC   0x7801             LDRB     R1,[R0, #+0]
   \   000000AE   0x7842             LDRB     R2,[R0, #+1]
   \   000000B0   0x0612             LSLS     R2,R2,#+24
   \   000000B2   0x1412             ASRS     R2,R2,#+16
   \   000000B4   0x4311             ORRS     R1,R1,R2
   \   000000B6   0x356B             ADDS     R5,R5,#+107
   \   000000B8   0xE068             B.N      ??appButtonsInd_7
    334                  
    335                  button_prev = NONE;
    336                  HAL_StopAppTimer(&TouchTimer);
    337                }
    338                else if(setPointRecFlag == false && setPointChangeStatusR == false)
   \                     ??appButtonsInd_6: (+1)
   \   000000BA   0x431F             ORRS     R7,R7,R3
   \   000000BC   0xE07D             B.N      ??appButtonsInd_8
    339                {
    340                  //ButtonR_LED_Ind(1);
    341                  //Slider_LED_Off();
    342                  HAL_StopAppTimer(&TouchTimer);
    343                }
    344              }
    345            }
    346            
    347            if (BUTTON_L == button)  // Left Cool
   \                     ??appButtonsInd_0: (+1)
   \   000000BE   0x2901             CMP      R1,#+1
   \   000000C0   0xD000             BEQ      .+4
   \   000000C2   0xE080             B        ??appButtonsInd_9
    348            {
    349              if( event == TOUCHKEY_PRESSED_EVENT)
   \   000000C4   0x2801             CMP      R0,#+1
   \   000000C6   0xD141             BNE      ??appButtonsInd_10
    350              {
    351                if(setPointChangeStatusL != true && setPointRecFlag == false)
   \   000000C8   0x431A             ORRS     R2,R2,R3
   \   000000CA   0xD001             BEQ      ??appButtonsInd_11
   \   000000CC   0x7066             STRB     R6,[R4, #+1]
   \   000000CE   0xE08E             B        ??appButtonsInd_3
    352                {
    353                  if(setPointRecFlag == false && setPointChangeStatusR == true)
   \                     ??appButtonsInd_11: (+1)
   \   000000D0   0x4078             EORS     R0,R0,R7
   \   000000D2   0x4318             ORRS     R0,R0,R3
   \   000000D4   0xD100             BNE      ??appButtonsInd_12
    354                  {
    355                    //ButtonR_LED_Ind(1);  // OFF
    356                    setPointChangeStatusR = false;
   \   000000D6   0x7026             STRB     R6,[R4, #+0]
    357                  }
    358                  //ButtonL_LED_Ind(0);
    359                  Pos = appConvertTemperatureToSliderPosition(thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value,MIN_COOL_SETPOINT_LIMIT,MAX_COOL_SETPOINT_LIMIT);        
   \                     ??appButtonsInd_12: (+1)
   \   000000D8   0x0028             MOVS     R0,R5
   \   000000DA   0x3061             ADDS     R0,R0,#+97
   \   000000DC   0x7803             LDRB     R3,[R0, #+0]
   \   000000DE   0x7841             LDRB     R1,[R0, #+1]
   \   000000E0   0x0609             LSLS     R1,R1,#+24
   \   000000E2   0x1409             ASRS     R1,R1,#+16
   \   000000E4   0x430B             ORRS     R3,R3,R1
   \   000000E6   0x....             LDR      R2,??DataTable14_2  ;; 0xf3c
   \   000000E8   0x....             LDR      R1,??DataTable14_3  ;; 0x5dc
   \   000000EA   0xB218             SXTH     R0,R3
   \   000000EC   0x.... 0x....      BL       appConvertTemperatureToSliderPosition
    360                  //Slider_LED_On(Pos);
    361                  setPointChangeStatusL = true;
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x7060             STRB     R0,[R4, #+1]
    362                  button_prev = BUTTON_L;
   \   000000F4   0x70A0             STRB     R0,[R4, #+2]
    363                  setPointRecFlag = false;
   \   000000F6   0x70E6             STRB     R6,[R4, #+3]
    364                  HAL_StopAppTimer(&TouchTimer);
   \   000000F8   0x0020             MOVS     R0,R4
   \   000000FA   0x3008             ADDS     R0,R0,#+8
   \   000000FC   0x.... 0x....      BL       HAL_StopAppTimer
    365                  HAL_StartAppTimer(&TouchTimer);
   \   00000100   0x3408             ADDS     R4,R4,#+8
   \   00000102   0x0020             MOVS     R0,R4
   \   00000104   0x.... 0x....      BL       HAL_StartAppTimer
    366                  LOG_STRING(amtStr, "#cool setpoint: %d.%d\r\n");
   \   00000108   0x4668             MOV      R0,SP
   \   0000010A   0xBF00             Nop      
   \   0000010C   0x....             ADR.N    R1,?_3
   \   0000010E   0x2218             MOVS     R2,#+24
   \   00000110   0x.... 0x....      BL       __aeabi_memcpy4
    367                  appSnprintf(amtStr, (thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value/100),(int)(thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value%100));        
   \   00000114   0x0028             MOVS     R0,R5
   \   00000116   0x3061             ADDS     R0,R0,#+97
   \   00000118   0x7801             LDRB     R1,[R0, #+0]
   \   0000011A   0x7842             LDRB     R2,[R0, #+1]
   \   0000011C   0x0612             LSLS     R2,R2,#+24
   \   0000011E   0x1412             ASRS     R2,R2,#+16
   \   00000120   0x4311             ORRS     R1,R1,R2
   \   00000122   0x3561             ADDS     R5,R5,#+97
   \                     ??appButtonsInd_5: (+1)
   \   00000124   0x782C             LDRB     R4,[R5, #+0]
   \   00000126   0x7868             LDRB     R0,[R5, #+1]
   \   00000128   0x0600             LSLS     R0,R0,#+24
   \   0000012A   0x1400             ASRS     R0,R0,#+16
   \   0000012C   0x4304             ORRS     R4,R4,R0
   \   0000012E   0xB208             SXTH     R0,R1
   \   00000130   0x2164             MOVS     R1,#+100
   \   00000132   0x.... 0x....      BL       __aeabi_idivmod
   \   00000136   0x000D             MOVS     R5,R1
   \   00000138   0xB220             SXTH     R0,R4
   \   0000013A   0x2164             MOVS     R1,#+100
   \   0000013C   0x.... 0x....      BL       __aeabi_idiv
   \   00000140   0x0001             MOVS     R1,R0
   \   00000142   0x002A             MOVS     R2,R5
   \   00000144   0x4668             MOV      R0,SP
   \   00000146   0x.... 0x....      BL       appSnprintf
   \   0000014A   0xE050             B        ??appButtonsInd_3
    368                }
    369                else
    370                {
    371                  setPointChangeStatusL = false;
    372                }
    373              }
    374              else
    375              {
    376                if(setPointRecFlag == true && button_prev == BUTTON_L)
   \                     ??appButtonsInd_10: (+1)
   \   0000014C   0x2B00             CMP      R3,#+0
   \   0000014E   0xD033             BEQ      ??appButtonsInd_13
   \   00000150   0x78A0             LDRB     R0,[R4, #+2]
   \   00000152   0x2801             CMP      R0,#+1
   \   00000154   0xD130             BNE      ??appButtonsInd_13
    377                {
    378                  //ButtonL_LED_Ind(1);
    379                  //Slider_LED_Off();
    380                  setPointRecFlag = false;
   \   00000156   0x70E6             STRB     R6,[R4, #+3]
    381                  setPointChangeStatusL = false;
   \   00000158   0x7066             STRB     R6,[R4, #+1]
    382                  thermostatSetPointsChangeButton(1,slider_thershold);
   \   0000015A   0x7921             LDRB     R1,[R4, #+4]
   \   0000015C   0x.... 0x....      BL       thermostatSetPointsChangeButton
    383                  
    384                  LOG_STRING(reportAttrIndStr1, "<-Setpoints changed on Thermostat:\r\n");
   \   00000160   0xA806             ADD      R0,SP,#+24
   \   00000162   0xBF00             Nop      
   \   00000164   0x....             ADR.N    R1,?_4
   \   00000166   0x2228             MOVS     R2,#+40
   \   00000168   0x.... 0x....      BL       __aeabi_memcpy4
    385                  appSnprintf(reportAttrIndStr1);
   \   0000016C   0xA806             ADD      R0,SP,#+24
   \   0000016E   0x.... 0x....      BL       appSnprintf
    386                  LOG_STRING(amtStr1, "#cool setpoint: %d.%d\r\n");
   \   00000172   0x4668             MOV      R0,SP
   \   00000174   0x....             ADR.N    R1,?_5
   \   00000176   0x2218             MOVS     R2,#+24
   \   00000178   0x.... 0x....      BL       __aeabi_memcpy4
    387                  appSnprintf(amtStr1, (thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value/100),(int)(thThermostatClusterServerAttributes.occupiedCoolingSetpoint.value%100));     
   \   0000017C   0x0028             MOVS     R0,R5
   \   0000017E   0x3061             ADDS     R0,R0,#+97
   \   00000180   0x7801             LDRB     R1,[R0, #+0]
   \   00000182   0x7842             LDRB     R2,[R0, #+1]
   \   00000184   0x0612             LSLS     R2,R2,#+24
   \   00000186   0x1412             ASRS     R2,R2,#+16
   \   00000188   0x4311             ORRS     R1,R1,R2
   \   0000018A   0x3561             ADDS     R5,R5,#+97
   \                     ??appButtonsInd_7: (+1)
   \   0000018C   0x7828             LDRB     R0,[R5, #+0]
   \   0000018E   0x786A             LDRB     R2,[R5, #+1]
   \   00000190   0x0612             LSLS     R2,R2,#+24
   \   00000192   0x1412             ASRS     R2,R2,#+16
   \   00000194   0x4310             ORRS     R0,R0,R2
   \   00000196   0x0005             MOVS     R5,R0
   \   00000198   0xB208             SXTH     R0,R1
   \   0000019A   0x2164             MOVS     R1,#+100
   \   0000019C   0x.... 0x....      BL       __aeabi_idivmod
   \   000001A0   0x000F             MOVS     R7,R1
   \   000001A2   0xB228             SXTH     R0,R5
   \   000001A4   0x2164             MOVS     R1,#+100
   \   000001A6   0x.... 0x....      BL       __aeabi_idiv
   \   000001AA   0x0001             MOVS     R1,R0
   \   000001AC   0x003A             MOVS     R2,R7
   \   000001AE   0x4668             MOV      R0,SP
   \   000001B0   0x.... 0x....      BL       appSnprintf
    388                  
    389                  button_prev = NONE;
   \   000001B4   0x70A6             STRB     R6,[R4, #+2]
    390                  HAL_StopAppTimer(&TouchTimer);
   \   000001B6   0xE001             B.N      ??appButtonsInd_14
    391                }
    392                else if(setPointRecFlag == false && setPointChangeStatusL == false)
   \                     ??appButtonsInd_13: (+1)
   \   000001B8   0x431A             ORRS     R2,R2,R3
   \                     ??appButtonsInd_8: (+1)
   \   000001BA   0xD118             BNE      ??appButtonsInd_3
    393                {
    394                  //ButtonL_LED_Ind(1);
    395                  //Slider_LED_Off();
    396                  HAL_StopAppTimer(&TouchTimer);
   \                     ??appButtonsInd_14: (+1)
   \   000001BC   0x3408             ADDS     R4,R4,#+8
   \   000001BE   0x0020             MOVS     R0,R4
   \   000001C0   0x.... 0x....      BL       HAL_StopAppTimer
   \   000001C4   0xE013             B        ??appButtonsInd_3
    397                }
    398              }
    399            }
    400            
    401            if(BUTTON_SLIDER == button)
   \                     ??appButtonsInd_9: (+1)
   \   000001C6   0x2903             CMP      R1,#+3
   \   000001C8   0xD111             BNE      ??appButtonsInd_3
    402            { 
    403              if(button_prev != NONE)
   \   000001CA   0x78A1             LDRB     R1,[R4, #+2]
   \   000001CC   0x2900             CMP      R1,#+0
   \   000001CE   0xD00E             BEQ      ??appButtonsInd_3
    404              {
    405                if( event == TOUCHKEY_PRESSED_EVENT)
   \   000001D0   0x2801             CMP      R0,#+1
   \   000001D2   0xD10C             BNE      ??appButtonsInd_3
    406                {
    407                  slider_thershold = data;
   \   000001D4   0xA810             ADD      R0,SP,#+64
   \   000001D6   0x7800             LDRB     R0,[R0, #+0]
   \   000001D8   0x7120             STRB     R0,[R4, #+4]
    408                  setPointRecFlag = true;
   \   000001DA   0x2001             MOVS     R0,#+1
   \   000001DC   0x70E0             STRB     R0,[R4, #+3]
    409                  HAL_StopAppTimer(&TouchTimer);
   \   000001DE   0x0020             MOVS     R0,R4
   \   000001E0   0x3008             ADDS     R0,R0,#+8
   \   000001E2   0x.... 0x....      BL       HAL_StopAppTimer
    410                  HAL_StartAppTimer(&TouchTimer);
   \   000001E6   0x3408             ADDS     R4,R4,#+8
   \   000001E8   0x0020             MOVS     R0,R4
   \   000001EA   0x.... 0x....      BL       HAL_StartAppTimer
    411                }
    412                  //Slider_LED_On(slider_thershold);
    413              }
    414            }
    415          }
   \                     ??appButtonsInd_3: (+1)
   \   000001EE   0xB011             ADD      SP,SP,#+68
   \   000001F0   0xBDF0             POP      {R4-R7,PC}       ;; return
    416          

   \                                 In section .text, align 2, keep-with-next
    417          static uint8_t appConvertTemperatureToSliderPosition(int16_t temperature, int16_t min,int16_t max)
    418          {
   \                     appConvertTemperatureToSliderPosition: (+1)
   \   00000000   0xB500             PUSH     {LR}
    419            uint8_t slider_position;
    420            uint32_t temp;
    421            temperature = temperature;// / 100;
    422            temp = ((temperature - min) * 255 * 100)/ (max-min);
    423            temp = temp/100;
    424            slider_position = (uint8_t)temp;
    425            return slider_position;
   \   00000002   0x1A40             SUBS     R0,R0,R1
   \   00000004   0x....             LDR      R3,??DataTable14_4  ;; 0x639c
   \   00000006   0x4358             MULS     R0,R3,R0
   \   00000008   0x1A51             SUBS     R1,R2,R1
   \   0000000A   0x.... 0x....      BL       __aeabi_idiv
   \   0000000E   0x2164             MOVS     R1,#+100
   \   00000010   0x.... 0x....      BL       __aeabi_uidiv
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0xBD00             POP      {PC}             ;; return
    426          }
    427          #endif
    428          /**************************************************************************//**
    429          \breif Performs security initialization actions
    430          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    431          void appSecurityInit(void)
    432          {
   \                     appSecurityInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    433            ZCL_Set_t zclSet;
    434          
    435            ZCL_ResetSecurity();
   \   00000004   0x.... 0x....      BL       ZCL_ResetSecurity
    436            zclSet.attr.id = ZCL_LINK_KEY_DESC_ID;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x4669             MOV      R1,SP
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    437            zclSet.attr.value.linkKeyDesc = &thermostatKeyDesc;
   \   0000000E   0x....             LDR      R0,??DataTable14_5
   \   00000010   0x9002             STR      R0,[SP, #+8]
    438            ZCL_Set(&zclSet);
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       ZCL_Set
    439          }
   \   00000018   0xB007             ADD      SP,SP,#+28
   \   0000001A   0xBD00             POP      {PC}             ;; return
    440          /**************************************************************************//**
    441          \brief Device common task handler
    442          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    443          void appDeviceTaskHandler(void)
    444          {
    445            switch (appDeviceState) // Actual device state when one joined network
   \                     appDeviceTaskHandler: (+1)
   \   00000000   0x....             LDR      R0,??DataTable14_6
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD101             BNE      ??appDeviceTaskHandler_0
    446            {
    447              case DEVICE_INITIAL_STATE:
    448                {
    449                  appDeviceState = DEVICE_ACTIVE_IDLE_STATE;
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
    450                }
    451          #ifdef OTAU_CLIENT
    452                startOtauClient(&thClientClusters[TH_CLIENT_CLUSTERS_COUNT - 1]);
    453          #endif
    454                break;
    455              case DEVICE_ACTIVE_IDLE_STATE:
    456              default:
    457                break;
    458            }
    459          }
   \                     ??appDeviceTaskHandler_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
    460          
    461          /**************************************************************************//**
    462          \brief Gets bind request
    463          
    464          \return pointer to a bind request used by HA device
    465          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    466          AppBindReq_t **getDeviceBindRequest(void)
    467          {
    468            return NULL;
   \                     getDeviceBindRequest: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    469          }
    470          
    471          /**************************************************************************//**
    472          \brief Stops application
    473          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    474          void appStop(void)
    475          {
   \                     appStop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    476            identifyClusterStop();
   \   00000002   0x.... 0x....      BL       identifyClusterStop
    477          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    478          
    479          /**************************************************************************//**
    480          \brief Asks device if it is an initiator
    481          
    482          \returns true if it is, false otherwise
    483          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    484          bool appIsInitiator(void)
    485          {
    486            return false;
   \                     appIsInitiator: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    487          }
    488          
    489          /**************************************************************************//**
    490          \brief EZ-Mode done callback
    491          
    492          \returns function which is called by EZ-Mode manager when it is done
    493          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    494          void appEzModeDone(void)
    495          {}
   \                     appEzModeDone: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    496          
    497          /**************************************************************************//**
    498          \brief Update Commissioning State received callback
    499          
    500          \param[in] addressing - pointer to addressing information;
    501          \param[in] payload - data pointer
    502          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    503          static void updateCommissioningStateCb(ZCL_Addressing_t *addressing, ZCL_UpdateCommissioningState_t *payload)
    504          {
   \                     updateCommissioningStateCb: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    505            sendConfigureReportingToNotify(APP_SRC_ENDPOINT_ID, APP_ENDPOINT_COMBINED_INTERFACE, THERMOSTAT_CLUSTER_ID,
    506              ZCL_THERMOSTAT_CLUSTER_LOCAL_TEMPERATURE_SERVER_ATTRIBUTE_ID, THERMOSTAT_LOCAL_TEMPERATURE_MAX_REPORT_PERIOD, thConfigureReportingResp);
   \   00000004   0x....             LDR      R0,??DataTable14_7
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0x2014             MOVS     R0,#+20
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x....             LDR      R2,??DataTable14_8  ;; 0x201
   \   00000010   0x2114             MOVS     R1,#+20
   \   00000012   0x2019             MOVS     R0,#+25
   \   00000014   0x.... 0x....      BL       sendConfigureReportingToNotify
    507          
    508            ZCL_StartReporting();
   \   00000018   0x.... 0x....      BL       ZCL_StartReporting
    509            (void)addressing, (void)payload;
    510          }
   \   0000001C   0xBD07             POP      {R0-R2,PC}       ;; return
    511          /**************************************************************************//**
    512          \brief Indication of configure reporting response
    513          
    514          \param[in] resp - pointer to response
    515          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    516          static void thConfigureReportingResp(ZCL_Notify_t *ntfy)
    517          {
   \                     thConfigureReportingResp: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    518            static ReportingState_t configureReportingState = THERMOSTAT_REPORTING_CONFIGURED;
    519          
    520            switch (configureReportingState)
   \   00000002   0x....             LDR      R2,??DataTable14_9  ;; 0x405
   \   00000004   0x1ED0             SUBS     R0,R2,#+3
   \   00000006   0x....             LDR      R1,??DataTable14_7
   \   00000008   0x....             LDR      R4,??DataTable14_10
   \   0000000A   0x7823             LDRB     R3,[R4, #+0]
   \   0000000C   0x2B00             CMP      R3,#+0
   \   0000000E   0xD006             BEQ      ??thConfigureReportingResp_0
   \   00000010   0x2B02             CMP      R3,#+2
   \   00000012   0xD017             BEQ      ??thConfigureReportingResp_1
   \   00000014   0xD30D             BCC      ??thConfigureReportingResp_2
   \   00000016   0x2B04             CMP      R3,#+4
   \   00000018   0xD028             BEQ      ??thConfigureReportingResp_3
   \   0000001A   0xD31C             BCC      ??thConfigureReportingResp_4
   \   0000001C   0xBD13             POP      {R0,R1,R4,PC}
    521            {
    522              case THERMOSTAT_REPORTING_CONFIGURED:
    523                sendConfigureReportingToNotify(APP_SRC_ENDPOINT_ID, APP_ENDPOINT_COMBINED_INTERFACE, OCCUPANCY_SENSING_CLUSTER_ID,
    524                  ZCL_OCCUPANCY_SENSING_CLUSTER_OCCUPANCY_SERVER_ATTRIBUTE_ID, OCCUPANCY_SENSING_VAL_MAX_REPORT_PERIOD, thConfigureReportingResp);
   \                     ??thConfigureReportingResp_0: (+1)
   \   0000001E   0x9101             STR      R1,[SP, #+4]
   \   00000020   0x2014             MOVS     R0,#+20
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x1C52             ADDS     R2,R2,#+1
   \   00000026   0x2114             MOVS     R1,#+20
   \   00000028   0x2019             MOVS     R0,#+25
   \   0000002A   0x.... 0x....      BL       sendConfigureReportingToNotify
    525                configureReportingState = OCCUPANCY_REPORTING_CONFIGURED;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE026             B        ??thConfigureReportingResp_5
    526                break;
    527          
    528              case OCCUPANCY_REPORTING_CONFIGURED:
    529                sendConfigureReportingToNotify(APP_SRC_ENDPOINT_ID, APP_ENDPOINT_COMBINED_INTERFACE, HUMIDITY_MEASUREMENT_CLUSTER_ID,
    530                  ZCL_HUMIDITY_MEASUREMENT_CLUSTER_SERVER_MEASURED_VALUE_ATTRIBUTE_ID, HUMIDITY_MEASUREMENT_VAL_MAX_REPORT_PERIOD, thConfigureReportingResp);
   \                     ??thConfigureReportingResp_2: (+1)
   \   00000032   0x9101             STR      R1,[SP, #+4]
   \   00000034   0x2019             MOVS     R0,#+25
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x2114             MOVS     R1,#+20
   \   0000003C   0x.... 0x....      BL       sendConfigureReportingToNotify
    531                configureReportingState = HUMIDITY_MEASURED_VALUE_REPORTING_CONFIGURED;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0xE01D             B        ??thConfigureReportingResp_5
    532                break;
    533          
    534              case HUMIDITY_MEASURED_VALUE_REPORTING_CONFIGURED:    
    535                sendConfigureReportingToNotify(APP_SRC_ENDPOINT_ID, APP_ENDPOINT_COMBINED_INTERFACE, HUMIDITY_MEASUREMENT_CLUSTER_ID,
    536                  ZCL_HUMIDITY_MEASUREMENT_CLUSTER_SERVER_TOLERANCE_ATTRIBUTE_ID, HUMIDITY_MEASUREMENT_VAL_MAX_REPORT_PERIOD, thConfigureReportingResp);
   \                     ??thConfigureReportingResp_1: (+1)
   \   00000044   0x9101             STR      R1,[SP, #+4]
   \   00000046   0x2019             MOVS     R0,#+25
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x2303             MOVS     R3,#+3
   \   0000004C   0x2114             MOVS     R1,#+20
   \   0000004E   0x.... 0x....      BL       sendConfigureReportingToNotify
    537                configureReportingState = HUMIDITY_TOLERANCE_VALUE_REPORTING_CONFIGURED;    
   \   00000052   0x2003             MOVS     R0,#+3
   \   00000054   0xE014             B        ??thConfigureReportingResp_5
    538                break;
    539          
    540              case HUMIDITY_TOLERANCE_VALUE_REPORTING_CONFIGURED:
    541                sendConfigureReportingToNotify(APP_SRC_ENDPOINT_ID, APP_ENDPOINT_COMBINED_INTERFACE, TEMPERATURE_MEASUREMENT_CLUSTER_ID,
    542                  ZCL_TEMPERATURE_MEASUREMENT_CLUSTER_SERVER_MEASURED_VALUE_ATTRIBUTE_ID, TEMPERATURE_MEASUREMENT_VAL_MAX_REPORT_PERIOD, thConfigureReportingResp);
   \                     ??thConfigureReportingResp_4: (+1)
   \   00000056   0x9101             STR      R1,[SP, #+4]
   \   00000058   0x2128             MOVS     R1,#+40
   \   0000005A   0x9100             STR      R1,[SP, #+0]
   \   0000005C   0x2300             MOVS     R3,#+0
   \   0000005E   0x0002             MOVS     R2,R0
   \   00000060   0x2114             MOVS     R1,#+20
   \   00000062   0x2019             MOVS     R0,#+25
   \   00000064   0x.... 0x....      BL       sendConfigureReportingToNotify
    543                configureReportingState =  TEMPERATURE_MEASURED_VALUE_REPORTING_CONFIGURED;
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0xE009             B        ??thConfigureReportingResp_5
    544                break;
    545          
    546              case TEMPERATURE_MEASURED_VALUE_REPORTING_CONFIGURED:
    547                sendConfigureReportingToNotify(APP_SRC_ENDPOINT_ID, APP_ENDPOINT_COMBINED_INTERFACE, TEMPERATURE_MEASUREMENT_CLUSTER_ID,
    548                  ZCL_TEMPERATURE_MEASUREMENT_CLUSTER_SERVER_TOLERANCE_ATTRIBUTE_ID, TEMPERATURE_MEASUREMENT_VAL_MAX_REPORT_PERIOD, thConfigureReportingResp);
   \                     ??thConfigureReportingResp_3: (+1)
   \   0000006C   0x9101             STR      R1,[SP, #+4]
   \   0000006E   0x2128             MOVS     R1,#+40
   \   00000070   0x9100             STR      R1,[SP, #+0]
   \   00000072   0x2303             MOVS     R3,#+3
   \   00000074   0x0002             MOVS     R2,R0
   \   00000076   0x2114             MOVS     R1,#+20
   \   00000078   0x2019             MOVS     R0,#+25
   \   0000007A   0x.... 0x....      BL       sendConfigureReportingToNotify
    549                configureReportingState = CONFIGURATION_COMPLETED;
   \   0000007E   0x2006             MOVS     R0,#+6
   \                     ??thConfigureReportingResp_5: (+1)
   \   00000080   0x7020             STRB     R0,[R4, #+0]
    550                break;
    551          
    552            case CONFIGURATION_COMPLETED:
    553            default:
    554              break;
    555            }
    556            (void)ntfy;
    557          }
   \   00000082   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .bss, align 1
   \                     ??configureReportingState:
   \   00000000                      DS8 1
    558          /**************************************************************************//**
    559          \brief ZDO Binding indication function
    560          
    561          \param[out] bindInd - ZDO bind indication parameters structure pointer. For details go to
    562                      ZDO_BindInd_t declaration
    563          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    564          void ZDO_BindIndication(ZDO_BindInd_t *bindInd)
    565          {
    566            (void)bindInd;
    567          }
   \                     ZDO_BindIndication: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    568          
    569          /**************************************************************************//**
    570          \brief ZDO Unbinding indication function
    571          
    572          \param[out] unbindInd - ZDO unbind indication parameters structure pointer. For details go to
    573                      ZDO_UnbindInd_t declaration
    574          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    575          void ZDO_UnbindIndication(ZDO_UnbindInd_t *unbindInd)
    576          {
    577            (void)unbindInd;
    578          }
   \                     ZDO_UnbindIndication: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    579          
    580          /**************************************************************************//**
    581          \brief Periodic update of various attributes of different sensors
    582          *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    583          static void updateSensorsAttributeValues(void)
    584          {
   \                     updateSensorsAttributeValues: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    585            humidityMeasurementUpdateMeasuredValue();
   \   00000002   0x.... 0x....      BL       humidityMeasurementUpdateMeasuredValue
    586            humidityMeasurementUpdateTolerance();
   \   00000006   0x.... 0x....      BL       humidityMeasurementUpdateTolerance
    587          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     zdoBusyPollCheck

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     appButtonsInd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x00004003         DC32     0x4003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     zdoWakeUpReq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     ZDO_WakeUpConf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     setPointChangeStatusR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     thThermostatClusterServerAttributes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x00000F3C         DC32     0xf3c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x000005DC         DC32     0x5dc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x0000639C         DC32     0x639c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x........         DC32     thermostatKeyDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     appDeviceState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x........         DC32     thConfigureReportingResp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x00000201         DC32     0x201

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x00000405         DC32     0x405

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x........         DC32     ??configureReportingState

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x23 0x68          DC8 "#heat setpoint:%d.%d\015\012"
   \              0x65 0x61    
   \              0x74 0x20    
   \              0x73 0x65    
   \              0x74 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x3A 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x3C 0x2D          DC8 "<-Setpoints changed on Thermostat:\015\012"
   \              0x53 0x65    
   \              0x74 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x64 0x20    
   \              0x6F 0x6E    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x6F 0x73    
   \              0x74 0x61    
   \              0x74 0x3A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x23 0x68          DC8 "#heat setpoint:%d.%d\015\012"
   \              0x65 0x61    
   \              0x74 0x20    
   \              0x73 0x65    
   \              0x74 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x3A 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x23 0x63          DC8 "#cool setpoint: %d.%d\015\012"
   \              0x6F 0x6F    
   \              0x6C 0x20    
   \              0x73 0x65    
   \              0x74 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x3C 0x2D          DC8 "<-Setpoints changed on Thermostat:\015\012"
   \              0x53 0x65    
   \              0x74 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x64 0x20    
   \              0x6F 0x6E    
   \              0x20 0x54    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x6F 0x73    
   \              0x74 0x61    
   \              0x74 0x3A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x23 0x63          DC8 "#cool setpoint: %d.%d\015\012"
   \              0x6F 0x6F    
   \              0x6C 0x20    
   \              0x73 0x65    
   \              0x74 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
    588          
    589          #endif // APP_DEVICE_TYPE_THERMOSTAT
    590          // eof thermostat.c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ZDO_BindIndication
       0   ZDO_UnbindIndication
       0   ZDO_WakeUpConf
      88   appButtonsInd
        88   -> HAL_StartAppTimer
        88   -> HAL_StopAppTimer
        88   -> __aeabi_memcpy4
        88   -> appConvertTemperatureToSliderPosition
        88   -> appSnprintf
        88   -> thermostatSetPointsChangeButton
        88 __aeabi_idiv
        88 __aeabi_idivmod
       4   appConvertTemperatureToSliderPosition
         4 __aeabi_idiv
         4 __aeabi_uidiv
      16   appDeviceInit
        16   -> BSP_InitQTouch
        16   -> HAL_StartAppTimer
        16   -> PDS_IsAbleToRestore
        16   -> PDS_Restore
        16   -> SYS_EnableSleepWhenIdle
        16   -> SYS_SubscribeToEvent
        16   -> ZCL_RegisterEndpoint
        16   -> ZCL_StartReporting
        16   -> basicClusterInit
        16   -> diagnosticsClusterInit
        16   -> fanControlClusterInit
        16   -> groupsClusterInit
        16   -> humidityMeasurementClusterInit
        16   -> identifyClusterInit
        16   -> identifySubscribe
        16   -> initConsole
        16   -> occupancySensingClusterInit
        16   -> scenesClusterInit
        16   -> thTemperatureMeasurementClusterInit
        16   -> thermostatClusterInit
        16   -> thermostatUiConfClusterInit
        16   -> uartInit
       0   appDeviceTaskHandler
       0   appEzModeDone
       0   appIsInitiator
      32   appSecurityInit
        32   -> ZCL_ResetSecurity
        32   -> ZCL_Set
       8   appStop
         8   -> identifyClusterStop
       0   getDeviceBindRequest
       8   isBusyOrPollCheck
         8   -> isEzModeInProgress
       8   sleepEventHandler
         8   -> ZDO_WakeUpReq
       0   sleepModeHandler
      16   thConfigureReportingResp
        16   -> sendConfigureReportingToNotify
       8   touchTimeOut
         8   -> HAL_StopAppTimer
      16   updateCommissioningStateCb
        16   -> ZCL_StartReporting
        16   -> sendConfigureReportingToNotify
       8   updateSensorsAttributeValues
         8   -> humidityMeasurementUpdateMeasuredValue
         8   -> humidityMeasurementUpdateTolerance


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable12
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
      24  ?_0
      40  ?_1
      24  ?_2
      24  ?_3
      40  ?_4
      24  ?_5
       2  ZDO_BindIndication
       2  ZDO_UnbindIndication
       2  ZDO_WakeUpConf
     498  appButtonsInd
      24  appConvertTemperatureToSliderPosition
     152  appDeviceInit
      14  appDeviceTaskHandler
       2  appEzModeDone
       4  appIsInitiator
      28  appSecurityInit
       8  appStop
       1  configureReportingState
       4  getDeviceBindRequest
      16  isBusyOrPollCheck
      28  setPointChangeStatusR
          setPointChangeStatusL
          button_prev
          setPointRecFlag
          slider_thershold
          TouchTimer
      22  sleepEventHandler
       6  sleepModeHandler
     132  thConfigureReportingResp
      24  thermostatKeyDesc
      24  touchTimeOut
      30  updateCommissioningStateCb
      12  updateSensorsAttributeValues
     136  zdoBusyPollCheck
          sleepEventListener
          sleepModeListener
          thEndpoint
          subcriber
          sensorAttributeUpdateTimer
       8  zdoWakeUpReq

 
     9 bytes in section .bss
   188 bytes in section .data
 1 222 bytes in section .text
 
 1 222 bytes of CODE memory
   197 bytes of DATA memory

Errors: none
Warnings: 1
