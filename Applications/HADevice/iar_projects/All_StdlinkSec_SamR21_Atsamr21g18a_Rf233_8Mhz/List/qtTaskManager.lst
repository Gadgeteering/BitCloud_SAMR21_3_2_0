###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        22/May/2015  10:16:20
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\BSP\QTouch_XPRO\src\qtTaskManager.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\BSP\QTouch_XPRO\src\qtTaskManager.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\qtTaskManager.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\qtTaskManager.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\BSP\QTouch_XPRO\src\qtTaskManager.c
      1          /************************************************************************//**
      2          \file qtTaskManager.c
      3          
      4          \brief
      5          The QTouch Task manager
      6          
      7          \author
      8          Atmel Corporation: http://www.atmel.com \n
      9          Support email: avr@atmel.com
     10          
     11          Copyright (c) 2008-2012, Atmel Corporation. All rights reserved.
     12          Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14          \internal
     15          History:
     16          14.08.14 Kanchana - Created.
     17          ******************************************************************************/
     18          #ifdef BOARD_QTOUCH_XPRO
     19          /******************************************************************************
     20          Includes section
     21          ******************************************************************************/
     22          #include <touch_api_ptc.h>
     23          #include <atsamr21.h>
     24          #include <qtTaskManager.h>
     25          #include <bspTaskManager.h>
     26          #include <qtTimer.h>
     27          #include <appTimer.h>
     28          
     29          /* Macros */
     30          
     31          /**
     32          * \def GET_SENSOR_STATE(SENSOR_NUMBER)
     33          * \brief To get the sensor state that it is in detect or not
     34          * \param SENSOR_NUMBER for which the state to be detected
     35          * \return Returns either 0 or 1
     36          * If the bit value is 0, it is not in detect
     37          * If the bit value is 1, it is in detect
     38          * Alternatively, the individual sensor state can be directly accessed using
     39          * p_qm_measure_data->p_sensor_states[(SENSOR_NUMBER/8)] variable.
     40          */
     41          //#define GET_SELFCAP_SENSOR_STATE(SENSOR_NUMBER) p_selfcap_measure_data-> \
     42          p_sensor_states[(SENSOR_NUMBER / \
     43            8)] & (1 << (SENSOR_NUMBER % 8))
     44          
     45          /**
     46          * \def GET_ROTOR_SLIDER_POSITION(ROTOR_SLIDER_NUMBER)
     47          * \brief To get the rotor angle or slider position.
     48          * These values are valid only when the sensor state for
     49          * corresponding rotor or slider shows in detect.
     50          * \param ROTOR_SLIDER_NUMBER for which the position to be known
     51          * \return Returns rotor angle or sensor position
     52          */
     53          //#define GET_SELFCAP_ROTOR_SLIDER_POSITION(ROTOR_SLIDER_NUMBER) \
     54          p_selfcap_measure_data->p_rotor_slider_values[ \
     55            ROTOR_SLIDER_NUMBER]     
     56              

   \                                 In section .bss, align 4
     57          static uint8_t touch_button_previous_state[2];
   \                     touch_button_previous_state:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \   00000004                      DS8 4
     58          static BSP_TouchEventHandler_t bspTouchEventHandler = NULL;
     59          void configure_port_pins(void);
     60          void timer_init( void );
     61          
     62          
     63          /**************************************************************************//**
     64          \brief callback from Timer
     65          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     66          void Timer_overflow_callback(void)
     67          {
   \                     Timer_overflow_callback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     68            touch_time.time_to_measure_touch = 1;
   \   00000002   0x....             LDR      R0,??DataTable7
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x7101             STRB     R1,[R0, #+4]
     69            touch_time.current_time_ms = touch_time.current_time_ms + touch_time.measurement_period_ms;
   \   00000008   0x8841             LDRH     R1,[R0, #+2]
   \   0000000A   0x8802             LDRH     R2,[R0, #+0]
   \   0000000C   0x1889             ADDS     R1,R1,R2
   \   0000000E   0x8041             STRH     R1,[R0, #+2]
     70            bspPostTask(BSP_TOUCH_BUTTON);
   \   00000010   0x....             LDR      R0,??DataTable7_1
   \   00000012   0x7801             LDRB     R1,[R0, #+0]
   \   00000014   0x2220             MOVS     R2,#+32
   \   00000016   0x430A             ORRS     R2,R2,R1
   \   00000018   0x7002             STRB     R2,[R0, #+0]
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       halStartAtomic
   \   00000020   0x....             LDR      R0,??DataTable7_2
   \   00000022   0x8801             LDRH     R1,[R0, #+0]
   \   00000024   0x2280             MOVS     R2,#+128
   \   00000026   0x0052             LSLS     R2,R2,#+1        ;; #+256
   \   00000028   0x430A             ORRS     R2,R2,R1
   \   0000002A   0x8002             STRH     R2,[R0, #+0]
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x.... 0x....      BL       halEndAtomic
     71              
     72          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
     73          
     74          /**************************************************************************//**
     75          \brief Init timer for qtouch measure
     76          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     77          void timer_init(void)
     78          {
   \                     timer_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     79            StartAppClock();
   \   00000002   0x.... 0x....      BL       StartAppClock
     80          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     81          
     82          /**************************************************************************//**
     83          \brief configure port pins for LEDS
     84          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     85          void configure_port_pins(void)
     86          {
   \                     configure_port_pins: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     87            halInitLed0();
                   ^
Warning[Pe223]: function "GPIO_A13_make_out" declared implicitly
   \   00000002   0x.... 0x....      BL       GPIO_A13_make_out
     88            halInitLed1();
                   ^
Warning[Pe223]: function "GPIO_B3_make_out" declared implicitly
   \   00000006   0x.... 0x....      BL       GPIO_B3_make_out
     89            halInitLed2();
   \   0000000A   0x....             LDR      R4,??DataTable7_3  ;; 0x41004408
   \   0000000C   0x2080             MOVS     R0,#+128
   \   0000000E   0x02C0             LSLS     R0,R0,#+11       ;; #+262144
   \   00000010   0x6020             STR      R0,[R4, #+0]
   \   00000012   0x....             LDR      R5,??DataTable7_4  ;; 0x4100444e
   \   00000014   0x2602             MOVS     R6,#+2
   \   00000016   0x7928             LDRB     R0,[R5, #+4]
   \   00000018   0x4330             ORRS     R0,R0,R6
   \   0000001A   0x7128             STRB     R0,[R5, #+4]
     90            halInitLed3();
   \   0000001C   0x04B0             LSLS     R0,R6,#+18
   \   0000001E   0x6020             STR      R0,[R4, #+0]
   \   00000020   0x7968             LDRB     R0,[R5, #+5]
   \   00000022   0x4330             ORRS     R0,R0,R6
   \   00000024   0x7168             STRB     R0,[R5, #+5]
     91            halInitLed4();
                   ^
Warning[Pe223]: function "GPIO_A22_make_out" declared implicitly
   \   00000026   0x.... 0x....      BL       GPIO_A22_make_out
     92            halInitLed5();
                   ^
Warning[Pe223]: function "GPIO_A23_make_out" declared implicitly
   \   0000002A   0x.... 0x....      BL       GPIO_A23_make_out
     93            halInitLed6();
                   ^
Warning[Pe223]: function "GPIO_B22_make_out" declared implicitly
   \   0000002E   0x.... 0x....      BL       GPIO_B22_make_out
     94            halInitLed7();
   \   00000032   0x05B0             LSLS     R0,R6,#+22
   \   00000034   0x1CAD             ADDS     R5,R5,#+2
   \   00000036   0x63A8             STR      R0,[R5, #+56]
   \   00000038   0x1EAD             SUBS     R5,R5,#+2
   \   0000003A   0x....             LDR      R0,??DataTable7_5  ;; 0x410044d7
   \   0000003C   0x7801             LDRB     R1,[R0, #+0]
   \   0000003E   0x4331             ORRS     R1,R1,R6
   \   00000040   0x7001             STRB     R1,[R0, #+0]
     95            halInitLed8();
   \   00000042   0x0370             LSLS     R0,R6,#+13
   \   00000044   0x6020             STR      R0,[R4, #+0]
   \   00000046   0x7828             LDRB     R0,[R5, #+0]
   \   00000048   0x4330             ORRS     R0,R0,R6
   \   0000004A   0x7028             STRB     R0,[R5, #+0]
     96            halInitLed9();
   \   0000004C   0x03B0             LSLS     R0,R6,#+14
   \   0000004E   0x6020             STR      R0,[R4, #+0]
   \   00000050   0x7868             LDRB     R0,[R5, #+1]
   \   00000052   0x4306             ORRS     R6,R6,R0
   \   00000054   0x706E             STRB     R6,[R5, #+1]
     97          }
   \   00000056   0xBD70             POP      {R4-R6,PC}       ;; return
     98          
     99          /**************************************************************************//**
    100          \brief LED On for Slider
    101          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    102          void Slider_LED_On(uint8_t slider_position)
    103          {
   \                     Slider_LED_On: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
    104            slider_position = slider_position >> 5;
    105            Slider_LED_Off();
   \   00000002   0x.... 0x....      BL       Slider_LED_Off
   \   00000006   0x2780             MOVS     R7,#+128
   \   00000008   0x043F             LSLS     R7,R7,#+16       ;; #+8388608
   \   0000000A   0x093C             LSRS     R4,R7,#+4
   \   0000000C   0x....             LDR      R5,??DataTable7_6  ;; 0x41004414
   \   0000000E   0x0866             LSRS     R6,R4,#+1
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x0940             LSRS     R0,R0,#+5
   \   00000016   0x2807             CMP      R0,#+7
   \   00000018   0xD83C             BHI      ??Slider_LED_On_1
   \   0000001A   0xA101             ADR      R1,??Slider_LED_On_0
   \   0000001C   0x5C09             LDRB     R1,[R1, R0]
   \   0000001E   0x448F             ADD      PC,PC,R1
   \                     ??Slider_LED_On_0:
   \   00000020   0x06 0x0C          DC8      0x6,0xC,0x16,0x22
   \              0x16 0x22    
   \   00000024   0x30 0x42          DC8      0x30,0x42,0x58,0x72
   \              0x58 0x72    
    106            switch(slider_position)
    107            {
    108            case 0:
    109              halOnLed0();
                     ^
Warning[Pe223]: function "GPIO_A13_clr" declared implicitly
   \                     ??Slider_LED_On_2: (+1)
   \   00000028   0x.... 0x....      BL       GPIO_A13_clr
    110              break;
   \   0000002C   0xBDF1             POP      {R0,R4-R7,PC}
    111            case 1:
    112              halOnLed0();
   \                     ??Slider_LED_On_3: (+1)
   \   0000002E   0x.... 0x....      BL       GPIO_A13_clr
    113              halOnLed1();
                     ^
Warning[Pe223]: function "GPIO_B3_clr" declared implicitly
   \   00000032   0x.... 0x....      BL       GPIO_B3_clr
    114              break;
   \   00000036   0xBDF1             POP      {R0,R4-R7,PC}
    115            case 2:
    116              halOnLed0();
   \                     ??Slider_LED_On_4: (+1)
   \   00000038   0x.... 0x....      BL       GPIO_A13_clr
    117              halOnLed1();
   \   0000003C   0x.... 0x....      BL       GPIO_B3_clr
    118              halOnLed2();
   \   00000040   0x602E             STR      R6,[R5, #+0]
    119              break;
   \   00000042   0xBDF1             POP      {R0,R4-R7,PC}
    120            case 3:
    121              halOnLed0();
   \                     ??Slider_LED_On_5: (+1)
   \   00000044   0x.... 0x....      BL       GPIO_A13_clr
    122              halOnLed1();
   \   00000048   0x.... 0x....      BL       GPIO_B3_clr
    123              halOnLed2();
   \   0000004C   0x602E             STR      R6,[R5, #+0]
    124              halOnLed3();
   \   0000004E   0x602C             STR      R4,[R5, #+0]
    125              break;
   \   00000050   0xBDF1             POP      {R0,R4-R7,PC}
    126            case 4:
    127              halOnLed0();
   \                     ??Slider_LED_On_6: (+1)
   \   00000052   0x.... 0x....      BL       GPIO_A13_clr
    128              halOnLed1();
   \   00000056   0x.... 0x....      BL       GPIO_B3_clr
    129              halOnLed2();
   \   0000005A   0x602E             STR      R6,[R5, #+0]
    130              halOnLed3();
   \   0000005C   0x602C             STR      R4,[R5, #+0]
    131              halOnLed4();
                     ^
Warning[Pe223]: function "GPIO_A22_clr" declared implicitly
   \   0000005E   0x.... 0x....      BL       GPIO_A22_clr
    132              break;
   \   00000062   0xBDF1             POP      {R0,R4-R7,PC}
    133            case 5:
    134              halOnLed0();
   \                     ??Slider_LED_On_7: (+1)
   \   00000064   0x.... 0x....      BL       GPIO_A13_clr
    135              halOnLed1();
   \   00000068   0x.... 0x....      BL       GPIO_B3_clr
    136              halOnLed2();
   \   0000006C   0x602E             STR      R6,[R5, #+0]
    137              halOnLed3();
   \   0000006E   0x602C             STR      R4,[R5, #+0]
    138              halOnLed4();
   \   00000070   0x.... 0x....      BL       GPIO_A22_clr
    139              halOnLed5();
                     ^
Warning[Pe223]: function "GPIO_A23_clr" declared implicitly
   \   00000074   0x.... 0x....      BL       GPIO_A23_clr
    140              break;
   \   00000078   0xBDF1             POP      {R0,R4-R7,PC}
    141            case 6:
    142              halOnLed0();
   \                     ??Slider_LED_On_8: (+1)
   \   0000007A   0x.... 0x....      BL       GPIO_A13_clr
    143              halOnLed1();
   \   0000007E   0x.... 0x....      BL       GPIO_B3_clr
    144              halOnLed2();
   \   00000082   0x602E             STR      R6,[R5, #+0]
    145              halOnLed3();
   \   00000084   0x602C             STR      R4,[R5, #+0]
    146              halOnLed4();
   \   00000086   0x.... 0x....      BL       GPIO_A22_clr
    147              halOnLed5();
   \   0000008A   0x.... 0x....      BL       GPIO_A23_clr
    148              halOnLed6();
                     ^
Warning[Pe223]: function "GPIO_B22_clr" declared implicitly
   \   0000008E   0x.... 0x....      BL       GPIO_B22_clr
    149              break;
   \   00000092   0xBDF1             POP      {R0,R4-R7,PC}
    150            case 7:
    151              halOnLed0();
    152              halOnLed1();
    153              halOnLed2();
    154              halOnLed3();
    155              halOnLed4();
    156              halOnLed5();
    157              halOnLed6();
    158              halOnLed7();
    159              break;
    160            default:
    161              halOnLed0();
   \                     ??Slider_LED_On_1: (+1)
   \   00000094   0x.... 0x....      BL       GPIO_A13_clr
    162              halOnLed1();
   \   00000098   0x.... 0x....      BL       GPIO_B3_clr
    163              halOnLed2();
   \   0000009C   0x602E             STR      R6,[R5, #+0]
    164              halOnLed3();
   \   0000009E   0x602C             STR      R4,[R5, #+0]
    165              halOnLed4();
   \   000000A0   0x.... 0x....      BL       GPIO_A22_clr
    166              halOnLed5();
   \   000000A4   0x.... 0x....      BL       GPIO_A23_clr
    167              halOnLed6();
   \   000000A8   0x.... 0x....      BL       GPIO_B22_clr
    168              halOnLed7();
   \   000000AC   0x....             LDR      R0,??DataTable7_7  ;; 0x41004494
   \   000000AE   0x6007             STR      R7,[R0, #+0]
    169              break;
    170            }
    171          }
   \   000000B0   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    172          
    173          /**************************************************************************//**
    174          \brief OFF Slider LED's
    175          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    176          void Slider_LED_Off(void)
    177          {
   \                     Slider_LED_Off: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    178            halOffLed0();
                   ^
Warning[Pe223]: function "GPIO_A13_set" declared implicitly
   \   00000002   0x.... 0x....      BL       GPIO_A13_set
    179            halOffLed1();
                   ^
Warning[Pe223]: function "GPIO_B3_set" declared implicitly
   \   00000006   0x.... 0x....      BL       GPIO_B3_set
    180            halOffLed2();
   \   0000000A   0x....             LDR      R0,??DataTable7_8  ;; 0x41004418
   \   0000000C   0x2180             MOVS     R1,#+128
   \   0000000E   0x02C9             LSLS     R1,R1,#+11       ;; #+262144
   \   00000010   0x6001             STR      R1,[R0, #+0]
    181            halOffLed3();
   \   00000012   0x0049             LSLS     R1,R1,#+1
   \   00000014   0x6001             STR      R1,[R0, #+0]
    182            halOffLed4();
                   ^
Warning[Pe223]: function "GPIO_A22_set" declared implicitly
   \   00000016   0x.... 0x....      BL       GPIO_A22_set
    183            halOffLed5();
                   ^
Warning[Pe223]: function "GPIO_A23_set" declared implicitly
   \   0000001A   0x.... 0x....      BL       GPIO_A23_set
    184            halOffLed6();
                   ^
Warning[Pe223]: function "GPIO_B22_set" declared implicitly
   \   0000001E   0x.... 0x....      BL       GPIO_B22_set
    185            halOffLed7();
   \   00000022   0x2080             MOVS     R0,#+128
   \   00000024   0x0400             LSLS     R0,R0,#+16       ;; #+8388608
   \   00000026   0x....             LDR      R1,??DataTable7_9  ;; 0x41004498
   \   00000028   0x6008             STR      R0,[R1, #+0]
    186          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    187          
    188          /**************************************************************************//**
    189          \brief On/Off Right Button LED
    190          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    191          void ButtonR_LED_Ind(bool off)
    192          {
    193            if(off)
   \                     ButtonR_LED_Ind: (+1)
   \   00000000   0x....             LDR      R1,??DataTable7_6  ;; 0x41004414
   \   00000002   0x2280             MOVS     R2,#+128
   \   00000004   0x01D2             LSLS     R2,R2,#+7        ;; #+16384
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD001             BEQ      ??ButtonR_LED_Ind_0
    194            {
    195              halOffLed8();
   \   0000000A   0x604A             STR      R2,[R1, #+4]
    196            }
   \   0000000C   0x4770             BX       LR
    197            else
    198            {
    199              halOnLed8();
   \                     ??ButtonR_LED_Ind_0: (+1)
   \   0000000E   0x600A             STR      R2,[R1, #+0]
    200            }
    201          }
   \   00000010   0x4770             BX       LR               ;; return
    202          
    203          /**************************************************************************//**
    204          \brief On/Off Left Button LED
    205          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    206          void ButtonL_LED_Ind(bool off)
    207          {
    208            if(off)
   \                     ButtonL_LED_Ind: (+1)
   \   00000000   0x....             LDR      R1,??DataTable7_6  ;; 0x41004414
   \   00000002   0x2280             MOVS     R2,#+128
   \   00000004   0x0212             LSLS     R2,R2,#+8        ;; #+32768
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD001             BEQ      ??ButtonL_LED_Ind_0
    209            {
    210              halOffLed9();
   \   0000000A   0x604A             STR      R2,[R1, #+4]
    211            }
   \   0000000C   0x4770             BX       LR
    212            else
    213            {
    214              halOnLed9();
   \                     ??ButtonL_LED_Ind_0: (+1)
   \   0000000E   0x600A             STR      R2,[R1, #+0]
    215            }
    216          }
   \   00000010   0x4770             BX       LR               ;; return
    217          
    218          /**************************************************************************//**
    219          \brief Init QTouch 
    220          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    221          void BSP_InitQTouch(BSP_TouchEventHandler_t handler)
    222          {
   \                     BSP_InitQTouch: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    223            
    224            __enable_interrupt();
   \   00000004   0xB662             CPSIE    I
    225            
    226            
    227            /**
    228            * Initialize timer.
    229            */
    230            timer_init();
   \   00000006   0x.... 0x....      BL       StartAppClock
    231            
    232            /**
    233            * Initialize QTouch library and configure touch sensors.
    234            */
    235            touch_sensors_init();
   \   0000000A   0x.... 0x....      BL       touch_sensors_init
    236            
    237            /**
    238            * Configure port pins
    239            */
    240            //configure_port_pins();
    241            
    242            /**
    243            * Turn off all extension board LEDs
    244            */
    245            //Slider_LED_Off();
    246           // ButtonR_LED_Ind(1);
    247            //ButtonL_LED_Ind(1);
    248            
    249            bspTouchEventHandler = handler;
   \   0000000E   0x....             LDR      R0,??DataTable7_10
   \   00000010   0x6044             STR      R4,[R0, #+4]
    250            
    251          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    252          
    253          /**************************************************************************//**
    254          \brief BSP Touch handler
    255          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    256          void bspTouchHandler(void)
    257          { 
   \                     bspTouchHandler: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    258            uint8_t button1_state,temp_button1_state;
    259            uint8_t button2_state,temp_button2_state;
    260            uint8_t slider_state;
    261            uint8_t button,event = TOUCHKEY_NO_EVENT;
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x2400             MOVS     R4,#+0
    262            uint8_t slider_threshold;
    263            
    264            /**
    265            * Start touch sensor measurement, if touch_time.time_to_measure_touch flag is set by timer.
    266            */
    267            touch_sensors_measure();
   \   00000008   0x.... 0x....      BL       touch_sensors_measure
    268            
    269            /**
    270            * Update touch status once measurement complete flag is set.
    271            */
    272            if ((p_mutlcap_measure_data->measurement_done_touch == 1u)) 
   \   0000000C   0x....             LDR      R0,??DataTable7_11
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x780A             LDRB     R2,[R1, #+0]
   \   00000012   0x2A01             CMP      R2,#+1
   \   00000014   0xD151             BNE      ??bspTouchHandler_0
    273            {
    274              p_mutlcap_measure_data->measurement_done_touch = 0u;
   \   00000016   0x700E             STRB     R6,[R1, #+0]
    275              
    276              /**
    277              * Get touch sensor states
    278              */
    279              
    280              button2_state = (p_mutlcap_measure_data->p_sensor_states[0]&0x01);
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x6981             LDR      R1,[R0, #+24]
   \   0000001C   0x780B             LDRB     R3,[R1, #+0]
   \   0000001E   0x466A             MOV      R2,SP
   \   00000020   0x2601             MOVS     R6,#+1
   \   00000022   0x401E             ANDS     R6,R6,R3
   \   00000024   0x7016             STRB     R6,[R2, #+0]
    281              button1_state = (p_mutlcap_measure_data->p_sensor_states[0]&0x02);
   \   00000026   0x2602             MOVS     R6,#+2
   \   00000028   0x401E             ANDS     R6,R6,R3
   \   0000002A   0x9604             STR      R6,[SP, #+16]
    282              slider_state = (p_mutlcap_measure_data->p_sensor_states[0]&0x10);//GET_MUTLCAP_SENSOR_STATE(2);
   \   0000002C   0x2610             MOVS     R6,#+16
   \   0000002E   0x4033             ANDS     R3,R3,R6
   \   00000030   0x9303             STR      R3,[SP, #+12]
    283              
    284              temp_button1_state = (button1_state >> 0x01) ^ touch_button_previous_state[0];
   \   00000032   0x466B             MOV      R3,SP
   \   00000034   0x9E04             LDR      R6,[SP, #+16]
   \   00000036   0x0636             LSLS     R6,R6,#+24
   \   00000038   0x0E76             LSRS     R6,R6,#+25
   \   0000003A   0x705E             STRB     R6,[R3, #+1]
   \   0000003C   0x....             LDR      R3,??DataTable7_10
   \   0000003E   0x466E             MOV      R6,SP
   \   00000040   0x7877             LDRB     R7,[R6, #+1]
   \   00000042   0x781E             LDRB     R6,[R3, #+0]
   \   00000044   0x407E             EORS     R6,R6,R7
   \   00000046   0x9602             STR      R6,[SP, #+8]
    285              temp_button2_state = button2_state ^ touch_button_previous_state[1];
   \   00000048   0x466E             MOV      R6,SP
   \   0000004A   0x7837             LDRB     R7,[R6, #+0]
   \   0000004C   0x785E             LDRB     R6,[R3, #+1]
   \   0000004E   0x407E             EORS     R6,R6,R7
   \   00000050   0x9601             STR      R6,[SP, #+4]
    286              
    287              if(temp_button1_state || temp_button2_state || slider_state)
   \   00000052   0x9F02             LDR      R7,[SP, #+8]
   \   00000054   0x9E01             LDR      R6,[SP, #+4]
   \   00000056   0x433E             ORRS     R6,R6,R7
   \   00000058   0x9F03             LDR      R7,[SP, #+12]
   \   0000005A   0x4337             ORRS     R7,R7,R6
   \   0000005C   0xD02D             BEQ      ??bspTouchHandler_0
    288              {
    289                
    290                if(button1_state)
   \   0000005E   0x9E04             LDR      R6,[SP, #+16]
   \   00000060   0x2E00             CMP      R6,#+0
   \   00000062   0xD002             BEQ      ??bspTouchHandler_1
    291                {
    292                  button = BUTTON_L;  // Heat set Point  Right
   \   00000064   0x2501             MOVS     R5,#+1
    293                  event = TOUCHKEY_PRESSED_EVENT;
   \   00000066   0x2401             MOVS     R4,#+1
   \   00000068   0xE004             B        ??bspTouchHandler_2
    294                }
    295                else if(temp_button1_state)
   \                     ??bspTouchHandler_1: (+1)
   \   0000006A   0x9E02             LDR      R6,[SP, #+8]
   \   0000006C   0x2E00             CMP      R6,#+0
   \   0000006E   0xD001             BEQ      ??bspTouchHandler_2
    296                {
    297                  button = BUTTON_L;  // Heat set Point  Right
   \   00000070   0x2501             MOVS     R5,#+1
    298                  event = TOUCHKEY_RELEASED_EVENT;        
   \   00000072   0x2402             MOVS     R4,#+2
    299                }
    300                if(button2_state)
   \                     ??bspTouchHandler_2: (+1)
   \   00000074   0x466E             MOV      R6,SP
   \   00000076   0x7836             LDRB     R6,[R6, #+0]
   \   00000078   0x2E00             CMP      R6,#+0
   \   0000007A   0xD002             BEQ      ??bspTouchHandler_3
    301                {
    302                  button = BUTTON_R;  // Cool set Point  Left
   \   0000007C   0x2502             MOVS     R5,#+2
    303                  event = TOUCHKEY_PRESSED_EVENT; 
   \   0000007E   0x2401             MOVS     R4,#+1
   \   00000080   0xE004             B        ??bspTouchHandler_4
    304                }
    305                else if (temp_button2_state)
   \                     ??bspTouchHandler_3: (+1)
   \   00000082   0x9E01             LDR      R6,[SP, #+4]
   \   00000084   0x2E00             CMP      R6,#+0
   \   00000086   0xD001             BEQ      ??bspTouchHandler_4
    306                {
    307                  button = BUTTON_R;  // Cool set Point  Left
   \   00000088   0x2502             MOVS     R5,#+2
    308                  event = TOUCHKEY_RELEASED_EVENT;          
   \   0000008A   0x2402             MOVS     R4,#+2
    309                }
    310                
    311                if(slider_state)
   \                     ??bspTouchHandler_4: (+1)
   \   0000008C   0x9A03             LDR      R2,[SP, #+12]
   \   0000008E   0x2A00             CMP      R2,#+0
   \   00000090   0xD005             BEQ      ??bspTouchHandler_5
    312                {
    313                  slider_threshold = GET_MUTLCAP_ROTOR_SLIDER_POSITION(0);
   \   00000092   0x466A             MOV      R2,SP
   \   00000094   0x6A00             LDR      R0,[R0, #+32]
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x7090             STRB     R0,[R2, #+2]
    314                  button = BUTTON_SLIDER;
   \   0000009A   0x2503             MOVS     R5,#+3
    315                  event = TOUCHKEY_PRESSED_EVENT;
   \   0000009C   0x2401             MOVS     R4,#+1
    316                }
    317                
    318                /* Store back the current sensor status */ 
    319                temp_button1_state = 0;
    320                temp_button2_state = 0;
    321                touch_button_previous_state[0] = button1_state >> 0x01;
   \                     ??bspTouchHandler_5: (+1)
   \   0000009E   0x4668             MOV      R0,SP
   \   000000A0   0x7840             LDRB     R0,[R0, #+1]
   \   000000A2   0x7018             STRB     R0,[R3, #+0]
    322                touch_button_previous_state[1] = button2_state;
   \   000000A4   0x4668             MOV      R0,SP
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x7058             STRB     R0,[R3, #+1]
    323                
    324                if (event != TOUCHKEY_NO_EVENT)
   \   000000AA   0x2C00             CMP      R4,#+0
   \   000000AC   0xD005             BEQ      ??bspTouchHandler_0
    325                {                 
    326                  bspTouchEventHandler(event,button,slider_threshold);
   \   000000AE   0x4668             MOV      R0,SP
   \   000000B0   0x7882             LDRB     R2,[R0, #+2]
   \   000000B2   0xB2E9             UXTB     R1,R5
   \   000000B4   0x0020             MOVS     R0,R4
   \   000000B6   0x685B             LDR      R3,[R3, #+4]
   \   000000B8   0x4798             BLX      R3
    327                }
    328              }
    329            }
    330            
    331          }//main
   \                     ??bspTouchHandler_0: (+1)
   \   000000BA   0xB005             ADD      SP,SP,#+20
   \   000000BC   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     touch_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     bspTaskFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     SYS_taskFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x41004408         DC32     0x41004408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x4100444E         DC32     0x4100444e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x410044D7         DC32     0x410044d7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x41004414         DC32     0x41004414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x41004494         DC32     0x41004494

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x41004418         DC32     0x41004418

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x41004498         DC32     0x41004498

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     touch_button_previous_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     p_mutlcap_measure_data
    332          
    333          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BSP_InitQTouch
         8   -> StartAppClock
         8   -> touch_sensors_init
       0   ButtonL_LED_Ind
       0   ButtonR_LED_Ind
       8   Slider_LED_Off
         8   -> GPIO_A13_set
         8   -> GPIO_A22_set
         8   -> GPIO_A23_set
         8   -> GPIO_B22_set
         8   -> GPIO_B3_set
      24   Slider_LED_On
        24   -> GPIO_A13_clr
        24   -> GPIO_A22_clr
        24   -> GPIO_A23_clr
        24   -> GPIO_B22_clr
        24   -> GPIO_B3_clr
        24   -> Slider_LED_Off
       8   Timer_overflow_callback
         8   -> halEndAtomic
         8   -> halStartAtomic
      40   bspTouchHandler
        40   -- Indirect call
        40   -> touch_sensors_measure
      16   configure_port_pins
        16   -> GPIO_A13_make_out
        16   -> GPIO_A22_make_out
        16   -> GPIO_A23_make_out
        16   -> GPIO_B22_make_out
        16   -> GPIO_B3_make_out
       8   timer_init
         8   -> StartAppClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      20  BSP_InitQTouch
      18  ButtonL_LED_Ind
      18  ButtonR_LED_Ind
      44  Slider_LED_Off
     178  Slider_LED_On
      52  Timer_overflow_callback
     190  bspTouchHandler
      88  configure_port_pins
       8  timer_init
       8  touch_button_previous_state
          bspTouchEventHandler

 
   8 bytes in section .bss
 664 bytes in section .text
 
 664 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: 15
