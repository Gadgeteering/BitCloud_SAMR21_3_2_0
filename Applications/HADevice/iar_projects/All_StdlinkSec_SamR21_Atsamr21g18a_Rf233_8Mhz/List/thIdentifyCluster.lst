###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:41:03
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thIdentifyCluster.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thIdentifyCluster.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\thIdentifyCluster.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\thIdentifyCluster.o
#
###############################################################################


   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void *getNextQueueElem(void const *)
   \                     getNextQueueElem: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD000             BEQ      ??getNextQueueElem_0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \                     ??getNextQueueElem_0: (+1)
   \   00000006   0x4770             BX       LR               ;; return
D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thIdentifyCluster.c
      1          /**************************************************************************//**
      2            \file thIdentifyCluster.c
      3          
      4            \brief
      5              Thermostat Identify cluster implementation.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16              09/09/2014 Unithra.C - Created.
     17          ******************************************************************************/
     18          #ifdef APP_DEVICE_TYPE_THERMOSTAT
     19          
     20          /******************************************************************************
     21                              Includes section
     22          ******************************************************************************/
     23          #include <thIdentifyCluster.h>
     24          #include <identifyCluster.h>
     25          #include <haClusters.h>
     26          #include <uartManager.h>
     27          #include <commandManager.h>
     28          #include <pdsDataServer.h>
     29          #include <zclDevice.h>
     30          #include <ezModeManager.h>
     31          
     32          /******************************************************************************
     33                              Definition(s) section
     34          ******************************************************************************/
     35          #define IDENTIFY_TIMER_PERIOD 1000u
     36          
     37          /******************************************************************************
     38                              Prototypes section
     39          ******************************************************************************/
     40          static ZCL_Status_t identifyInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_Identify_t *payload);
     41          static ZCL_Status_t identifyQueryInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, uint8_t *payload);
     42          static ZCL_Status_t identifyQueryResponseInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_IdentifyQueryResponse_t *payload);
     43          static ZCL_Status_t ezModeInvokeInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_EzModeInvoke_t *payload);
     44          static ZCL_Status_t updateCommissioningStateInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_UpdateCommissioningState_t *payload);
     45          static ZCL_Status_t sendIdentifyQueryResponse(ZCL_Addressing_t *addressing);
     46          static void thFillIdentifyQueryResponsePayload(ZCL_IdentifyQueryResponse_t *payload, uint16_t time);
     47          static void identifyTimerFired(void);
     48          static void ZCL_IdentifyAttributeEventInd(ZCL_Addressing_t *addressing, ZCL_AttributeId_t attributeId, ZCL_AttributeEvent_t event);
     49          
     50          /******************************************************************************
     51                              Global variables section
     52          ******************************************************************************/

   \                                 In section .data, align 4
     53          ZCL_IdentifyClusterAttributes_t thIdentifyClusterServerAttributes =
     54          {
     55            ZCL_DEFINE_IDENTIFY_CLUSTER_SERVER_ATTRIBUTES()
     56          };
     57          ZCL_IdentifyClusterCommands_t   thIdentifyCommands =
     58          {
     59            IDENTIFY_CLUSTER_COMMANDS(identifyInd, identifyQueryInd, identifyQueryResponseInd, ezModeInvokeInd, updateCommissioningStateInd)
     60          };
     61          
     62          /******************************************************************************
     63                              Static variables section
     64          ******************************************************************************/
     65          static HAL_AppTimer_t identifyTimer;
   \                     identifyTimer:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     thIdentifyClusterServerAttributes:
   \   00000014   0x0000             DC16 0
   \   00000016   0x21 0x00          DC8 33, 0, 0, 0
   \              0x00 0x00    
   \   0000001A   0x0001             DC16 1
   \   0000001C   0x18 0x02          DC8 24, 2, 0, 0
   \              0x00 0x00    
   \   00000020   0x00000000         DC32 0H

   \                                 In section .data, align 4
   \                     thIdentifyCommands:
   \   00000000   0x00 0x10          DC8 0, 16, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 identifyInd
   \   00000008   0x01 0x14          DC8 1, 20, 0, 0
   \              0x00 0x00    
   \   0000000C   0x........         DC32 identifyQueryInd
   \   00000010   0x00 0x11          DC8 0, 17, 0, 0
   \              0x00 0x00    
   \   00000014   0x........         DC32 identifyQueryResponseInd
   \   00000018   0x02 0x10          DC8 2, 16, 0, 0
   \              0x00 0x00    
   \   0000001C   0x........         DC32 ezModeInvokeInd
   \   00000020   0x03 0x10          DC8 3, 16, 0, 0
   \              0x00 0x00    
   \   00000024   0x........         DC32 updateCommissioningStateInd
     66          static DECLARE_QUEUE(subscribers);
     67          
     68          /******************************************************************************
     69                              Implementation section
     70          ******************************************************************************/
     71          /**************************************************************************//**
     72          \brief Initializes Identify cluster
     73          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     74          void identifyClusterInit(void)
     75          {
   \                     identifyClusterInit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     76            thIdentifyClusterServerAttributes.identifyTime.value = 0;
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0x....             LDR      R4,??DataTable17
   \   00000006   0x8325             STRH     R5,[R4, #+24]
     77          
     78            ZCL_Cluster_t *cluster = ZCL_GetCluster(APP_SRC_ENDPOINT_ID, IDENTIFY_CLUSTER_ID, ZCL_CLUSTER_SIDE_SERVER);
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2103             MOVS     R1,#+3
   \   0000000C   0x2019             MOVS     R0,#+25
   \   0000000E   0x.... 0x....      BL       ZCL_GetCluster
     79          
     80            if (cluster)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD001             BEQ      ??identifyClusterInit_0
     81              cluster->ZCL_AttributeEventInd = ZCL_IdentifyAttributeEventInd;
   \   00000016   0x....             LDR      R1,??DataTable17_1
   \   00000018   0x61C1             STR      R1,[R0, #+28]
     82          
     83            identifyTimer.interval = IDENTIFY_TIMER_PERIOD;
   \                     ??identifyClusterInit_0: (+1)
   \   0000001A   0x20FA             MOVS     R0,#+250
   \   0000001C   0x0080             LSLS     R0,R0,#+2        ;; #+1000
   \   0000001E   0x60A0             STR      R0,[R4, #+8]
     84            identifyTimer.mode     = TIMER_REPEAT_MODE;
   \   00000020   0x7325             STRB     R5,[R4, #+12]
     85            identifyTimer.callback = identifyTimerFired;
   \   00000022   0x....             LDR      R0,??DataTable17_2
   \   00000024   0x6120             STR      R0,[R4, #+16]
     86          }
   \   00000026   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     87          
     88          /**************************************************************************//**
     89          \brief Stops Identify cluster
     90          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     91          void identifyClusterStop(void)
     92          {
   \                     identifyClusterStop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     93            HAL_StopAppTimer(&identifyTimer);
   \   00000002   0x....             LDR      R0,??DataTable17
   \   00000004   0x.... 0x....      BL       HAL_StopAppTimer
     94          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     95          
     96          /**************************************************************************//**
     97          \brief Adds record to a list of subscribers
     98          
     99          \param[in] subscriber - pointer to subscriber;
    100          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    101          void identifySubscribe(IdentifySubscriber_t *subscriber)
    102          {
   \                     identifySubscribe: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    103            if (!isQueueElem(&subscribers, subscriber))
   \   00000004   0x....             LDR      R5,??DataTable17
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0x3020             ADDS     R0,R0,#+32
   \   0000000C   0x.... 0x....      BL       isQueueElem
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD104             BNE      ??identifySubscribe_0
    104              if(!putQueueElem(&subscribers, subscriber))
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x3520             ADDS     R5,R5,#+32
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0x.... 0x....      BL       putQueueElem
    105              {
    106          	  /* failed to queue */
    107              }
    108          }
   \                     ??identifySubscribe_0: (+1)
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    109          
    110          /**************************************************************************//**
    111          \brief Sends Identify Query request
    112          
    113          \param[in] mode - address mode;
    114          \param[in] addr - short address of destination node;
    115          \param[in] ep   - destination endpoint
    116          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    117          void identifySendIdentifyQuery(APS_AddrMode_t mode, ShortAddr_t addr, Endpoint_t ep)
    118          {
    119            (void)mode, (void)addr, (void)ep;
    120          }
   \                     identifySendIdentifyQuery: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    121          
    122          /**************************************************************************//**
    123          \brief Sends Update Commissioning State command
    124          
    125          \param[in] mode - address mode;
    126          \param[in] addr   - short address of destination node;
    127          \param[in] ep     - destination endpoint;
    128          \param[in] action - action to be done upon reception;
    129          \param[in] mask   - commissiong state mask
    130          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    131          void identifySendUpdateCommissioningState(APS_AddrMode_t mode, ShortAddr_t addr, Endpoint_t ep,
    132            ZCL_UpdateCommissioningStateAction_t action, uint8_t mask)
    133          {
    134            (void)mode, (void)addr, (void)ep, (void)action, (void)mask;
    135          }
   \                     identifySendUpdateCommissioningState: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    136          
    137          /**************************************************************************//**
    138          \brief Checks if identification process is in progress
    139          
    140          \returns true if it is, false otherwise
    141          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    142          bool identifyIsIdentifying(void)
    143          {
    144            return thIdentifyClusterServerAttributes.identifyTime.value > 0;
   \                     identifyIsIdentifying: (+1)
   \   00000000   0x....             LDR      R0,??DataTable17
   \   00000002   0x8B00             LDRH     R0,[R0, #+24]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD000             BEQ      ??identifyIsIdentifying_0
   \   00000008   0x2001             MOVS     R0,#+1
   \                     ??identifyIsIdentifying_0: (+1)
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x4770             BX       LR               ;; return
    145          }
    146          
    147          /**************************************************************************//**
    148          \brief Makes device to start identify itself
    149          
    150          \param[in] time - identifying time in seconds
    151          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    152          void idetifyStartIdentifying(uint16_t time)
    153          {
   \                     idetifyStartIdentifying: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    154            thIdentifyClusterServerAttributes.identifyTime.value = time;
   \   00000002   0x....             LDR      R4,??DataTable17
   \   00000004   0x8320             STRH     R0,[R4, #+24]
    155            HAL_StopAppTimer(&identifyTimer);
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       HAL_StopAppTimer
    156            HAL_StartAppTimer(&identifyTimer);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       HAL_StartAppTimer
    157          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    158          
    159          /**************************************************************************//**
    160          \brief Send Identify Query command unicastly
    161          
    162          \param[in] nwkState        - new netwrok state;
    163          \param[in] operationalState - new operational state
    164          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    165          void identifyUpdateCommissioningState(bool nwkState, bool operationalState)
    166          {
    167            thIdentifyClusterServerAttributes.commissioningState.value.networkState     = nwkState;
    168            thIdentifyClusterServerAttributes.commissioningState.value.operationalState = operationalState;
   \                     identifyUpdateCommissioningState: (+1)
   \   00000000   0x....             LDR      R0,??DataTable17
   \   00000002   0x7F82             LDRB     R2,[R0, #+30]
   \   00000004   0x23FE             MOVS     R3,#+254
   \   00000006   0x4013             ANDS     R3,R3,R2
   \   00000008   0x4319             ORRS     R1,R1,R3
   \   0000000A   0x7781             STRB     R1,[R0, #+30]
    169          }
   \   0000000C   0x4770             BX       LR               ;; return
    170          
    171          /**************************************************************************//**
    172          \brief Callback on receiving Identify command
    173          
    174          \param[in] addressing - pointer to addressing information;
    175          \param[in] payloadLength - data payload length;
    176          \param[in] payload - data pointer
    177          
    178          \return status of indication routine
    179          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    180          static ZCL_Status_t identifyInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_Identify_t *payload)
    181          {
   \                     identifyInd: (+1)
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x0014             MOVS     R4,R2
    182            LOG_STRING(identifyStr, "->Identify\r\n");
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x....             ADR.N    R1,?_0
   \   0000000A   0x2210             MOVS     R2,#+16
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    183            appSnprintf(identifyStr);
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x.... 0x....      BL       appSnprintf
    184          
    185            thIdentifyClusterServerAttributes.identifyTime.value = payload->identifyTime;
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x7861             LDRB     R1,[R4, #+1]
   \   0000001A   0x0609             LSLS     R1,R1,#+24
   \   0000001C   0x0C09             LSRS     R1,R1,#+16
   \   0000001E   0x4308             ORRS     R0,R0,R1
   \   00000020   0x....             LDR      R5,??DataTable17
   \   00000022   0x8328             STRH     R0,[R5, #+24]
    186          
    187            HAL_StopAppTimer(&identifyTimer);
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0x.... 0x....      BL       HAL_StopAppTimer
    188          
    189            if (payload->identifyTime)
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0x7861             LDRB     R1,[R4, #+1]
   \   0000002E   0x0609             LSLS     R1,R1,#+24
   \   00000030   0x0C09             LSRS     R1,R1,#+16
   \   00000032   0x4308             ORRS     R0,R0,R1
   \   00000034   0xD002             BEQ      ??identifyInd_0
    190              HAL_StartAppTimer(&identifyTimer);
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0x.... 0x....      BL       HAL_StartAppTimer
    191            
    192            RAISE_CALLBACKS_TO_IDENTIFY_SUBSCIBERS(subscribers, identify);
   \                     ??identifyInd_0: (+1)
   \   0000003C   0x6A2D             LDR      R5,[R5, #+32]
   \   0000003E   0x2D00             CMP      R5,#+0
   \   00000040   0xE009             B        ??identifyInd_1
   \                     ??identifyInd_2: (+1)
   \   00000042   0x686A             LDR      R2,[R5, #+4]
   \   00000044   0x0010             MOVS     R0,R2
   \   00000046   0xD002             BEQ      ??identifyInd_3
   \   00000048   0x0021             MOVS     R1,R4
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0x4790             BLX      R2
   \                     ??identifyInd_3: (+1)
   \   0000004E   0x0028             MOVS     R0,R5
   \   00000050   0x.... 0x....      BL       getNextQueueElem
   \   00000054   0x0005             MOVS     R5,R0
   \                     ??identifyInd_1: (+1)
   \   00000056   0xD1F4             BNE      ??identifyInd_2
    193          
    194            (void)addressing, (void)payloadLength;
    195            return ZCL_SUCCESS_STATUS;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xB004             ADD      SP,SP,#+16
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
    196          }
    197          
    198          /**************************************************************************//**
    199          \brief Callback on receiving Identify Query command
    200          
    201          \param[in] addressing - pointer to addressing information;
    202          \param[in] payloadLength - data payload length;
    203          \param[in] payload - data pointer
    204          
    205          \return status of indication routine
    206          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    207          static ZCL_Status_t identifyQueryInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, uint8_t *payload)
    208          {
   \                     identifyQueryInd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x0015             MOVS     R5,R2
    209            LOG_STRING(identifyQueryStr, "->Identify Query\r\n");
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R1,?_1
   \   0000000E   0x2214             MOVS     R2,#+20
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
    210            appSnprintf(identifyQueryStr);
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x.... 0x....      BL       appSnprintf
    211            
    212            if (thIdentifyClusterServerAttributes.identifyTime.value)
   \   0000001A   0x....             LDR      R4,??DataTable17
   \   0000001C   0x8B20             LDRH     R0,[R4, #+24]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD018             BEQ      ??identifyQueryInd_0
    213              return sendIdentifyQueryResponse(addressing);
   \   00000022   0x.... 0x....      BL       getFreeCommand
   \   00000026   0x0005             MOVS     R5,R0
   \   00000028   0xD101             BNE      ??identifyQueryInd_1
   \   0000002A   0x2089             MOVS     R0,#+137
   \   0000002C   0xE021             B        ??identifyQueryInd_2
   \                     ??identifyQueryInd_1: (+1)
   \   0000002E   0x2202             MOVS     R2,#+2
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x.... 0x....      BL       fillCommandRequest
   \   00000036   0x6CE8             LDR      R0,[R5, #+76]
   \   00000038   0x8B21             LDRH     R1,[R4, #+24]
   \   0000003A   0x7001             STRB     R1,[R0, #+0]
   \   0000003C   0x0A09             LSRS     R1,R1,#+8
   \   0000003E   0x7041             STRB     R1,[R0, #+1]
   \   00000040   0x2201             MOVS     R2,#+1
   \   00000042   0x0031             MOVS     R1,R6
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0x3020             ADDS     R0,R0,#+32
   \   00000048   0x.... 0x....      BL       fillDstAddressingViaSourceAddressing
   \   0000004C   0x0028             MOVS     R0,R5
   \   0000004E   0x.... 0x....      BL       commandManagerSendCommand
   \   00000052   0xE00D             B        ??identifyQueryInd_3
    214          
    215            RAISE_CALLBACKS_TO_IDENTIFY_SUBSCIBERS(subscribers, identifyQuery);
   \                     ??identifyQueryInd_0: (+1)
   \   00000054   0x6A24             LDR      R4,[R4, #+32]
   \   00000056   0x2C00             CMP      R4,#+0
   \   00000058   0xE009             B        ??identifyQueryInd_4
   \                     ??identifyQueryInd_5: (+1)
   \   0000005A   0x68A2             LDR      R2,[R4, #+8]
   \   0000005C   0x0010             MOVS     R0,R2
   \   0000005E   0xD002             BEQ      ??identifyQueryInd_6
   \   00000060   0x0029             MOVS     R1,R5
   \   00000062   0x0030             MOVS     R0,R6
   \   00000064   0x4790             BLX      R2
   \                     ??identifyQueryInd_6: (+1)
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0x.... 0x....      BL       getNextQueueElem
   \   0000006C   0x0004             MOVS     R4,R0
   \                     ??identifyQueryInd_4: (+1)
   \   0000006E   0xD1F4             BNE      ??identifyQueryInd_5
    216          
    217            (void)payload, (void)payloadLength;
    218            return ZCL_SUCCESS_STATUS;
   \                     ??identifyQueryInd_3: (+1)
   \   00000070   0x2000             MOVS     R0,#+0
   \                     ??identifyQueryInd_2: (+1)
   \   00000072   0xB006             ADD      SP,SP,#+24
   \   00000074   0xBD70             POP      {R4-R6,PC}       ;; return
    219          }
    220          /**************************************************************************//**
    221          \brief Callback on receiving Identify Query Response command
    222          
    223          \param[in] addressing - pointer to addressing information;
    224          \param[in] payloadLength - data payload length;
    225          \param[in] payload - data pointer
    226          
    227          \return status of indication routine
    228          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    229          static ZCL_Status_t identifyQueryResponseInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_IdentifyQueryResponse_t *payload)
    230          {
   \                     identifyQueryResponseInd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0016             MOVS     R6,R2
    231            LOG_STRING(identifyStr, "->Identify Query Response, addr = %d\r\n");
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R1,?_2
   \   0000000E   0x2228             MOVS     R2,#+40
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
    232            appSnprintf(identifyStr, addressing->addr.shortAddress);
   \   00000014   0x8921             LDRH     R1,[R4, #+8]
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x.... 0x....      BL       appSnprintf
    233          
    234            RAISE_CALLBACKS_TO_IDENTIFY_SUBSCIBERS(subscribers, identifyQueryResponse);
   \   0000001C   0x....             LDR      R0,??DataTable17
   \   0000001E   0x6A05             LDR      R5,[R0, #+32]
   \   00000020   0x2D00             CMP      R5,#+0
   \   00000022   0xE009             B        ??identifyQueryResponseInd_0
   \                     ??identifyQueryResponseInd_1: (+1)
   \   00000024   0x68EA             LDR      R2,[R5, #+12]
   \   00000026   0x0010             MOVS     R0,R2
   \   00000028   0xD002             BEQ      ??identifyQueryResponseInd_2
   \   0000002A   0x0031             MOVS     R1,R6
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x4790             BLX      R2
   \                     ??identifyQueryResponseInd_2: (+1)
   \   00000030   0x0028             MOVS     R0,R5
   \   00000032   0x.... 0x....      BL       getNextQueueElem
   \   00000036   0x0005             MOVS     R5,R0
   \                     ??identifyQueryResponseInd_0: (+1)
   \   00000038   0xD1F4             BNE      ??identifyQueryResponseInd_1
    235          
    236            (void)payloadLength;
    237            return ZCL_SUCCESS_STATUS;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xB00A             ADD      SP,SP,#+40
   \   0000003E   0xBD70             POP      {R4-R6,PC}       ;; return
    238          }
    239          /**************************************************************************//**
    240          \brief Callback on receiving EZ-Mode invoke command
    241          
    242          \param[in] addressing - pointer to addressing information;
    243          \param[in] payloadLength - data payload length;
    244          \param[in] payload - data pointer
    245          
    246          \return status of indication routine
    247          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    248          static ZCL_Status_t ezModeInvokeInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_EzModeInvoke_t *payload)
    249          {
   \                     ezModeInvokeInd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x0014             MOVS     R4,R2
    250            LOG_STRING(identifyStr, "->EZ-Mode Invoke\r\n");
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R1,?_3
   \   0000000E   0x2214             MOVS     R2,#+20
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
    251            appSnprintf(identifyStr);
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x.... 0x....      BL       appSnprintf
    252          
    253            if (payload->factoryFresh)
   \   0000001A   0x2501             MOVS     R5,#+1
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x4228             TST      R0,R5
   \   00000020   0xD00A             BEQ      ??ezModeInvokeInd_0
    254              PDS_DeleteAll(false);
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       PDS_DeleteAll
    255            if (payload->networkSteering)
   \   00000028   0x7821             LDRB     R1,[R4, #+0]
   \   0000002A   0x4229             TST      R1,R5
   \   0000002C   0xD004             BEQ      ??ezModeInvokeInd_0
    256            {
    257              appRestart(payload->findingAndBinding);
   \   0000002E   0x07C8             LSLS     R0,R1,#+31
   \   00000030   0x0FC0             LSRS     R0,R0,#+31
   \   00000032   0x.... 0x....      BL       appRestart
    258              return ZCL_SUCCESS_STATUS;
   \   00000036   0xE00E             B        ??ezModeInvokeInd_1
    259            }
    260            if (payload->findingAndBinding)
    261              invokeEzMode(NULL);
    262          
    263            RAISE_CALLBACKS_TO_IDENTIFY_SUBSCIBERS(subscribers, ezModeInvoke);
   \                     ??ezModeInvokeInd_0: (+1)
   \   00000038   0x....             LDR      R0,??DataTable17
   \   0000003A   0x6A05             LDR      R5,[R0, #+32]
   \   0000003C   0x2D00             CMP      R5,#+0
   \   0000003E   0xE009             B        ??ezModeInvokeInd_2
   \                     ??ezModeInvokeInd_3: (+1)
   \   00000040   0x692A             LDR      R2,[R5, #+16]
   \   00000042   0x0010             MOVS     R0,R2
   \   00000044   0xD002             BEQ      ??ezModeInvokeInd_4
   \   00000046   0x0021             MOVS     R1,R4
   \   00000048   0x0030             MOVS     R0,R6
   \   0000004A   0x4790             BLX      R2
   \                     ??ezModeInvokeInd_4: (+1)
   \   0000004C   0x0028             MOVS     R0,R5
   \   0000004E   0x.... 0x....      BL       getNextQueueElem
   \   00000052   0x0005             MOVS     R5,R0
   \                     ??ezModeInvokeInd_2: (+1)
   \   00000054   0xD1F4             BNE      ??ezModeInvokeInd_3
    264          
    265            (void)addressing, (void)payloadLength;
    266            return ZCL_SUCCESS_STATUS;
   \                     ??ezModeInvokeInd_1: (+1)
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0xB006             ADD      SP,SP,#+24
   \   0000005A   0xBD70             POP      {R4-R6,PC}       ;; return
    267          }
    268          
    269          /**************************************************************************//**
    270          \brief Callback on receiving Upodate Commissioning State command
    271          
    272          \param[in] addressing - pointer to addressing information;
    273          \param[in] payloadLength - data payload length;
    274          \param[in] payload - data pointer
    275          
    276          \return status of indication routine
    277          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    278          static ZCL_Status_t updateCommissioningStateInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_UpdateCommissioningState_t *payload)
    279          {
   \                     updateCommissioningStateInd: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x0014             MOVS     R4,R2
    280            LOG_STRING(identifyStr, "->Update Commissining State\r\n");
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R1,?_4
   \   0000000E   0x2220             MOVS     R2,#+32
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
    281            appSnprintf(identifyStr);
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x.... 0x....      BL       appSnprintf
    282          
    283            if (ZCL_UPDATE_COMMISSIONING_STATE_ACTION_SET == payload->action)
   \   0000001A   0x20FE             MOVS     R0,#+254
   \   0000001C   0x....             LDR      R1,??DataTable17
   \   0000001E   0x2201             MOVS     R2,#+1
   \   00000020   0x7823             LDRB     R3,[R4, #+0]
   \   00000022   0x2B01             CMP      R3,#+1
   \   00000024   0xD110             BNE      ??updateCommissioningStateInd_0
    284            {
    285              thIdentifyClusterServerAttributes.commissioningState.value.networkState     |= payload->commissioningStateMask.networkState;
   \   00000026   0x7F8B             LDRB     R3,[R1, #+30]
   \   00000028   0x25FE             MOVS     R5,#+254
   \   0000002A   0x401D             ANDS     R5,R5,R3
   \   0000002C   0x7867             LDRB     R7,[R4, #+1]
   \   0000002E   0x431F             ORRS     R7,R7,R3
   \   00000030   0x2301             MOVS     R3,#+1
   \   00000032   0x403B             ANDS     R3,R3,R7
   \   00000034   0x432B             ORRS     R3,R3,R5
   \   00000036   0x778B             STRB     R3,[R1, #+30]
    286              thIdentifyClusterServerAttributes.commissioningState.value.operationalState |= payload->commissioningStateMask.operationalState;
   \   00000038   0x25FE             MOVS     R5,#+254
   \   0000003A   0x401D             ANDS     R5,R5,R3
   \   0000003C   0x7867             LDRB     R7,[R4, #+1]
   \   0000003E   0x431F             ORRS     R7,R7,R3
   \   00000040   0x2301             MOVS     R3,#+1
   \   00000042   0x403B             ANDS     R3,R3,R7
   \   00000044   0x432B             ORRS     R3,R3,R5
   \   00000046   0x778B             STRB     R3,[R1, #+30]
    287            }
    288            if (ZCL_UPDATE_COMMISSIONING_STATE_ACTION_CLEAR == payload->action)
   \                     ??updateCommissioningStateInd_0: (+1)
   \   00000048   0x7823             LDRB     R3,[R4, #+0]
   \   0000004A   0x2B02             CMP      R3,#+2
   \   0000004C   0xD112             BNE      ??updateCommissioningStateInd_1
    289            {
    290              thIdentifyClusterServerAttributes.commissioningState.value.networkState     &= ~payload->commissioningStateMask.networkState;
   \   0000004E   0x7F8F             LDRB     R7,[R1, #+30]
   \   00000050   0x25FE             MOVS     R5,#+254
   \   00000052   0x403D             ANDS     R5,R5,R7
   \   00000054   0x46BC             MOV      R12,R7
   \   00000056   0x7867             LDRB     R7,[R4, #+1]
   \   00000058   0x43FB             MVNS     R3,R7
   \   0000005A   0x4667             MOV      R7,R12
   \   0000005C   0x403B             ANDS     R3,R3,R7
   \   0000005E   0x2701             MOVS     R7,#+1
   \   00000060   0x401F             ANDS     R7,R7,R3
   \   00000062   0x432F             ORRS     R7,R7,R5
   \   00000064   0x778F             STRB     R7,[R1, #+30]
    291              thIdentifyClusterServerAttributes.commissioningState.value.operationalState &= ~payload->commissioningStateMask.operationalState;
   \   00000066   0x4038             ANDS     R0,R0,R7
   \   00000068   0x7863             LDRB     R3,[R4, #+1]
   \   0000006A   0x43DD             MVNS     R5,R3
   \   0000006C   0x403D             ANDS     R5,R5,R7
   \   0000006E   0x402A             ANDS     R2,R2,R5
   \   00000070   0x4302             ORRS     R2,R2,R0
   \   00000072   0x778A             STRB     R2,[R1, #+30]
    292            }
    293          
    294            RAISE_CALLBACKS_TO_IDENTIFY_SUBSCIBERS(subscribers, updateCommissioningState);
   \                     ??updateCommissioningStateInd_1: (+1)
   \   00000074   0x6A0D             LDR      R5,[R1, #+32]
   \   00000076   0x2D00             CMP      R5,#+0
   \   00000078   0xE009             B        ??updateCommissioningStateInd_2
   \                     ??updateCommissioningStateInd_3: (+1)
   \   0000007A   0x696A             LDR      R2,[R5, #+20]
   \   0000007C   0x0010             MOVS     R0,R2
   \   0000007E   0xD002             BEQ      ??updateCommissioningStateInd_4
   \   00000080   0x0021             MOVS     R1,R4
   \   00000082   0x0030             MOVS     R0,R6
   \   00000084   0x4790             BLX      R2
   \                     ??updateCommissioningStateInd_4: (+1)
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0x.... 0x....      BL       getNextQueueElem
   \   0000008C   0x0005             MOVS     R5,R0
   \                     ??updateCommissioningStateInd_2: (+1)
   \   0000008E   0xD1F4             BNE      ??updateCommissioningStateInd_3
    295          
    296            (void)addressing, (void)payloadLength;
    297            return ZCL_SUCCESS_STATUS;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xB009             ADD      SP,SP,#+36
   \   00000094   0xBDF0             POP      {R4-R7,PC}       ;; return
    298          }
    299          
    300          /**************************************************************************//**
    301          \brief Sends Identidy Query Response command
    302          
    303          \param[in] addressing - addressing information about sender device
    304          
    305          \returns status of sending
    306          ******************************************************************************/
    307          static ZCL_Status_t sendIdentifyQueryResponse(ZCL_Addressing_t *addressing)
    308          {
    309            ZCL_Request_t *req;
    310          
    311            if (!(req = getFreeCommand()))
    312              return ZCL_INSUFFICIENT_SPACE_STATUS;
    313          
    314            fillCommandRequest(req, ZCL_IDENTIFY_CLUSTER_IDENTIFY_QUERY_RESPONSE_COMMAND_ID,
    315                                 sizeof(ZCL_IdentifyQueryResponse_t));
    316            thFillIdentifyQueryResponsePayload((ZCL_IdentifyQueryResponse_t *)req->requestPayload, thIdentifyClusterServerAttributes.identifyTime.value);
    317            fillDstAddressingViaSourceAddressing(&req->dstAddressing, addressing, ZCL_CLUSTER_SIDE_CLIENT);
    318            commandManagerSendCommand(req);
    319          
    320            return ZCL_SUCCESS_STATUS;
    321          }
    322          
    323          /**************************************************************************//**
    324          \brief Fills Identify Query Response command structure
    325          
    326          \param[out] payload - pointer to command structure;
    327          \param[in]  time    - identify time
    328          ******************************************************************************/
    329          static void thFillIdentifyQueryResponsePayload(ZCL_IdentifyQueryResponse_t *payload, uint16_t time)
    330          {
    331            payload->timeout = time;
    332          }
    333          
    334          /**************************************************************************//**
    335          \brief Identify timer has fired
    336          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    337          static void identifyTimerFired(void)
    338          {
    339            --thIdentifyClusterServerAttributes.identifyTime.value;
   \                     identifyTimerFired: (+1)
   \   00000000   0x....             LDR      R0,??DataTable17
   \   00000002   0x8B01             LDRH     R1,[R0, #+24]
   \   00000004   0x1E49             SUBS     R1,R1,#+1
   \   00000006   0x8301             STRH     R1,[R0, #+24]
    340            // TO DO: toggle LED
    341            if (!thIdentifyClusterServerAttributes.identifyTime.value)
   \   00000008   0x0409             LSLS     R1,R1,#+16
   \   0000000A   0xD000             BEQ      ??identifyTimerFired_0
   \   0000000C   0x4770             BX       LR
    342            {    
    343              HAL_StopAppTimer(&identifyTimer);
   \                     ??identifyTimerFired_0: (+1)
   \   0000000E   0xB580             PUSH     {R7,LR}
   \   00000010   0x.... 0x....      BL       HAL_StopAppTimer
    344              // TO DO: turn LED off
    345            }
    346          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    347          
    348          /**************************************************************************//**
    349          \brief Attribute event (writing/reading) callback.
    350          
    351          \param[in] addressing - incoming request addressing information.
    352          \param[in] attributeId - attribute identifier.
    353          \param[in] event - attribute event (read/write).
    354          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    355          static void ZCL_IdentifyAttributeEventInd(ZCL_Addressing_t *addressing,
    356            ZCL_AttributeId_t attributeId, ZCL_AttributeEvent_t event)
    357          {
    358            if ((ZCL_WRITE_ATTRIBUTE_EVENT == event) &&
    359                (ZCL_IDENTIFY_CLUSTER_IDENTIFY_TIME_ATTRIBUTE_ID == attributeId))
   \                     ZCL_IdentifyAttributeEventInd: (+1)
   \   00000000   0x2A01             CMP      R2,#+1
   \   00000002   0xD000             BEQ      ??ZCL_IdentifyAttributeEventInd_0
   \   00000004   0x4770             BX       LR
   \                     ??ZCL_IdentifyAttributeEventInd_0: (+1)
   \   00000006   0xB510             PUSH     {R4,LR}
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD109             BNE      ??ZCL_IdentifyAttributeEventInd_1
    360            {
    361              HAL_StopAppTimer(&identifyTimer);
   \   0000000C   0x....             LDR      R4,??DataTable17
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       HAL_StopAppTimer
    362              if (thIdentifyClusterServerAttributes.identifyTime.value)
   \   00000014   0x8B20             LDRH     R0,[R4, #+24]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD002             BEQ      ??ZCL_IdentifyAttributeEventInd_1
    363                HAL_StartAppTimer(&identifyTimer);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       HAL_StartAppTimer
    364          
    365              (void)addressing;
    366            }
    367          }
   \                     ??ZCL_IdentifyAttributeEventInd_1: (+1)
   \   00000020   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     identifyTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     ZCL_IdentifyAttributeEventInd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     identifyTimerFired

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x2D 0x3E          DC8 "->Identify\015\012"
   \              0x49 0x64    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2D 0x3E          DC8 "->Identify Query\015\012"
   \              0x49 0x64    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x20 0x51    
   \              0x75 0x65    
   \              0x72 0x79    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x2D 0x3E          DC8 "->Identify Query Response, addr = %d\015\012"
   \              0x49 0x64    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x20 0x51    
   \              0x75 0x65    
   \              0x72 0x79    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x2C    
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x2D 0x3E          DC8 "->EZ-Mode Invoke\015\012"
   \              0x45 0x5A    
   \              0x2D 0x4D    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x49 0x6E    
   \              0x76 0x6F    
   \              0x6B 0x65    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x2D 0x3E          DC8 "->Update Commissining State\015\012"
   \              0x55 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x43    
   \              0x6F 0x6D    
   \              0x6D 0x69    
   \              0x73 0x73    
   \              0x69 0x6E    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0
    368          
    369          #endif // APP_DEVICE_TYPE_THERMOSTAT
    370          
    371          // eof thIdentifyCluster.c
    372          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ZCL_IdentifyAttributeEventInd
         8   -> HAL_StartAppTimer
         8   -> HAL_StopAppTimer
      40   ezModeInvokeInd
        40   -- Indirect call
        40   -> PDS_DeleteAll
        40   -> __aeabi_memcpy4
        40   -> appRestart
        40   -> appSnprintf
        40   -> getNextQueueElem
       0   getNextQueueElem
      16   identifyClusterInit
        16   -> ZCL_GetCluster
       8   identifyClusterStop
         8   -> HAL_StopAppTimer
      32   identifyInd
        32   -- Indirect call
        32   -> HAL_StartAppTimer
        32   -> HAL_StopAppTimer
        32   -> __aeabi_memcpy4
        32   -> appSnprintf
        32   -> getNextQueueElem
       0   identifyIsIdentifying
      40   identifyQueryInd
        40   -- Indirect call
        40   -> __aeabi_memcpy4
        40   -> appSnprintf
        40   -> commandManagerSendCommand
        40   -> fillCommandRequest
        40   -> fillDstAddressingViaSourceAddressing
        40   -> getFreeCommand
        40   -> getNextQueueElem
      56   identifyQueryResponseInd
        56   -- Indirect call
        56   -> __aeabi_memcpy4
        56   -> appSnprintf
        56   -> getNextQueueElem
       0   identifySendIdentifyQuery
       0   identifySendUpdateCommissioningState
      16   identifySubscribe
        16   -> isQueueElem
        16   -> putQueueElem
       8   identifyTimerFired
         8   -> HAL_StopAppTimer
       0   identifyUpdateCommissioningState
       8   idetifyStartIdentifying
         8   -> HAL_StartAppTimer
         8   -> HAL_StopAppTimer
      56   updateCommissioningStateInd
        56   -- Indirect call
        56   -> __aeabi_memcpy4
        56   -> appSnprintf
        56   -> getNextQueueElem


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
      16  ?_0
      20  ?_1
      40  ?_2
      20  ?_3
      32  ?_4
      34  ZCL_IdentifyAttributeEventInd
      92  ezModeInvokeInd
       8  getNextQueueElem
      40  identifyClusterInit
      10  identifyClusterStop
      94  identifyInd
      14  identifyIsIdentifying
     118  identifyQueryInd
      64  identifyQueryResponseInd
       2  identifySendIdentifyQuery
       2  identifySendUpdateCommissioningState
      32  identifySubscribe
      36  identifyTimer
          thIdentifyClusterServerAttributes
          subscribers
      22  identifyTimerFired
      14  identifyUpdateCommissioningState
      20  idetifyStartIdentifying
      40  thIdentifyCommands
     150  updateCommissioningStateInd

 
  76 bytes in section .data
 856 bytes in section .text
 
 856 bytes of CODE memory
  76 bytes of DATA memory

Errors: none
Warnings: none
