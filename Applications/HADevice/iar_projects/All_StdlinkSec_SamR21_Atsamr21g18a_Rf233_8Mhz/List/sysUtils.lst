###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:40:54
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\SystemEnvironment\src\sysUtils.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\SystemEnvironment\src\sysUtils.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\sysUtils.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\sysUtils.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\SystemEnvironment\src\sysUtils.c
      1          /**********************************************************************//**
      2            \file sysUtils.c
      3          
      4            \brief
      5          
      6            \author
      7              Atmel Corporation: http://www.atmel.com \n
      8              Support email: avr@atmel.com
      9          
     10            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     11            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     12          
     13            \internal
     14            History:
     15              24/07/09 D. Kasyanov - Created
     16          **************************************************************************/
     17          
     18          /******************************************************************************
     19                                             Include section
     20          ******************************************************************************/
     21          #include <sysUtils.h>
     22          #include <rfRandom.h>
     23          #include <appTimer.h>
     24          #include <macEnvironment.h>
     25          #include <configServer.h>
     26          
     27          /******************************************************************************
     28                                  Definitions section
     29          ******************************************************************************/
     30          #define SYS_UPDATE_RAND_SEED_TIMEOUT  1000u
     31          #define SYS_VERSION_ZERO_ASCII                    48
     32          #define SYS_VERSION_P_ASCII                       80
     33          #define SYS_VERSION_M_ASCII                       77
     34          #define SYS_VERSION_E_ASCII                       69
     35          #define SYS_VERSION_QUALIFIER_COMBI_MAX           4
     36          #define SYS_VERSION_CONV_INT_TO_ASCII(intver, asciiver)         \
     37              if (intver > 9)                                             \
     38              {                                                           \
     39                asciiver[i++] = SYS_VERSION_ZERO_ASCII+(intver/10);       \
     40                asciiver[i++] = SYS_VERSION_ZERO_ASCII+(intver%10);       \
     41              }                                                           \
     42              else                                                        \
     43              {                                                           \
     44                asciiver[i++] = SYS_VERSION_ZERO_ASCII+intver;            \
     45              }
     46          
     47          /******************************************************************************
     48                                             Prototypes section
     49          ******************************************************************************/
     50          static void sysUpdateRndSeedTimerFired(void);
     51          static void sysRndConfirm(RF_RandomConf_t *conf);
     52          static uint16_t sysPseudoRandomSeed(void);
     53          
     54          /******************************************************************************
     55                              Static variables section
     56          ******************************************************************************/

   \                                 In section .data, align 4
     57          static HAL_AppTimer_t sysRndSeedTimer =
     58          {
     59            .mode = TIMER_ONE_SHOT_MODE,
     60            .interval = SYS_UPDATE_RAND_SEED_TIMEOUT,
     61            .callback = sysUpdateRndSeedTimerFired
     62          };
     63          
     64          static RF_RandomReq_t sysRfRndReq =
   \                     sysRfRndReq:
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000001C   0x00000000         DC32 0H
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x000003E8         DC32 1000
   \   00000028   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x........         DC32 sysUpdateRndSeedTimerFired
     65          {
     66            .disableRx = true
     67          };
     68          
     69          /******************************************************************************
     70                                             Implementation section
     71          ******************************************************************************/
     72          /******************************************************************************
     73            Performs swap bytes in array of length
     74            Parameters:
     75              array  - pointer to array.
     76              length  - array length
     77            Returns:
     78              None
     79          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     80          void SYS_Swap(uint8_t *array, uint8_t length)
     81          {
   \                     SYS_Swap: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     82            uint8_t *dst = array + length - 1;
   \   00000002   0x1842             ADDS     R2,R0,R1
   \   00000004   0x1E52             SUBS     R2,R2,#+1
     83          
     84            uint8_t tmp;
     85            length >>= 1;
   \   00000006   0x0849             LSRS     R1,R1,#+1
   \   00000008   0xE005             B        ??SYS_Swap_0
     86          
     87            while (length--)
     88            {
     89              tmp = *array;
   \                     ??SYS_Swap_1: (+1)
   \   0000000A   0x7803             LDRB     R3,[R0, #+0]
     90              *array = *dst;
   \   0000000C   0x7814             LDRB     R4,[R2, #+0]
   \   0000000E   0x7004             STRB     R4,[R0, #+0]
     91              *dst = tmp;
   \   00000010   0x7013             STRB     R3,[R2, #+0]
     92          
     93              array++;
   \   00000012   0x1C40             ADDS     R0,R0,#+1
     94              dst--;
   \   00000014   0x1E52             SUBS     R2,R2,#+1
     95            }
   \                     ??SYS_Swap_0: (+1)
   \   00000016   0x000B             MOVS     R3,R1
   \   00000018   0x1E59             SUBS     R1,R3,#+1
   \   0000001A   0x061B             LSLS     R3,R3,#+24
   \   0000001C   0xD1F5             BNE      ??SYS_Swap_1
     96          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
     97          
     98          /*************************************************************************//**
     99          \brief Updates rnd with new random values according to time interval
    100          *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    101          static void sysUpdateRndSeedTimerFired(void)
    102          {
   \                     sysUpdateRndSeedTimerFired: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    103            RF_RandomReq(&sysRfRndReq);
   \   00000002   0x....             LDR      R0,??DataTable4
   \   00000004   0x.... 0x....      BL       RF_RandomReq
    104          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    105          
    106          /**************************************************************************//**
    107          \brief Confirm from random number generation updater
    108          
    109          \param[in]
    110              conf - confirm parameters
    111          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    112          static void sysRndConfirm(RF_RandomConf_t *conf)
    113          {
   \                     sysRndConfirm: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    114            if (conf->value)
   \   00000002   0x8880             LDRH     R0,[R0, #+4]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD10D             BNE      ??sysRndConfirm_0
    115              srand(conf->value);
    116            else
    117              srand(sysPseudoRandomSeed());
   \   00000008   0x.... 0x....      BL       HAL_GetSystemTime
   \   0000000C   0xB284             UXTH     R4,R0
   \   0000000E   0x.... 0x....      BL       MAC_GetExtAddr
   \   00000012   0x0001             MOVS     R1,R0
   \   00000014   0x2200             MOVS     R2,#+0
   \                     ??sysRndConfirm_1: (+1)
   \   00000016   0x0050             LSLS     R0,R2,#+1
   \   00000018   0x5A08             LDRH     R0,[R1, R0]
   \   0000001A   0x4060             EORS     R0,R0,R4
   \   0000001C   0x0004             MOVS     R4,R0
   \   0000001E   0x1C52             ADDS     R2,R2,#+1
   \   00000020   0x2A04             CMP      R2,#+4
   \   00000022   0xD3F8             BCC      ??sysRndConfirm_1
   \                     ??sysRndConfirm_0: (+1)
   \   00000024   0x.... 0x....      BL       srand
    118          
    119            sysRfRndReq.disableRx = true;
   \   00000028   0x....             LDR      R0,??DataTable4
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x7301             STRB     R1,[R0, #+12]
    120            HAL_StartAppTimer(&sysRndSeedTimer);
   \   0000002E   0x301C             ADDS     R0,R0,#+28
   \   00000030   0x.... 0x....      BL       HAL_StartAppTimer
    121          }
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    122          
    123          /**************************************************************************//**
    124          \brief  Starts timer to update rand
    125          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    126          void sysStartUpdatingRandSeed(void)
    127          {
   \                     sysStartUpdatingRandSeed: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    128            if (false == sysRfRndReq.disableRx)
   \   00000002   0x....             LDR      R4,??DataTable4
   \   00000004   0x7B20             LDRB     R0,[R4, #+12]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD00A             BEQ      ??sysStartUpdatingRandSeed_0
    129              return; // random request has been started already
    130          
    131            HAL_StopAppTimer(&sysRndSeedTimer);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x301C             ADDS     R0,R0,#+28
   \   0000000E   0x.... 0x....      BL       HAL_StopAppTimer
    132            sysRfRndReq.RF_RandomConf = sysRndConfirm;
   \   00000012   0x....             LDR      R0,??DataTable4_1
   \   00000014   0x61A0             STR      R0,[R4, #+24]
    133            sysRfRndReq.disableRx = false;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x7320             STRB     R0,[R4, #+12]
    134            sysUpdateRndSeedTimerFired();
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       RF_RandomReq
    135          }
   \                     ??sysStartUpdatingRandSeed_0: (+1)
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    136          
    137          /**************************************************************************//**
    138          \brief Calculates a pseudo random value for seed if HW random is not available.
    139          
    140          \return:
    141              16-bit value which was calculated by using current time and other params.
    142          ******************************************************************************/
    143          static uint16_t sysPseudoRandomSeed(void)
    144          {
    145            uint16_t result = (uint16_t)HAL_GetSystemTime();
    146            const uint16_t *extAddr = (const uint16_t *)MAC_GetExtAddr();
    147            uint8_t i;
    148          
    149            for (i = 0; i < sizeof(ExtAddr_t)/sizeof(result); ++i)
    150              result ^= extAddr[i];
    151          
    152            return result;
    153          }
    154          
    155          /**************************************************************************//**
    156            \brief This function copies size bytes of random data into buffer.
    157          
    158            \param: buffer - This is an unsigned char array of size at least sz to hold
    159             the random data.
    160            \param: size - The number of bytes of random data to compute and store.
    161          
    162            \return:  0 Indicates successful completion.
    163          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    164          int SYS_GetRandomSequence(uint8_t *buffer, unsigned long size)
    165          {
   \                     SYS_GetRandomSequence: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
    166            uint16_t i;
    167            u16Packed_t *u16ptr = (u16Packed_t*)buffer;
   \   00000006   0x0025             MOVS     R5,R4
    168          
    169            for(i = 0; i < size/2; i++, u16ptr++)
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xE006             B        ??SYS_GetRandomSequence_0
    170              u16ptr->val = SYS_GetRandomNumber();
   \                     ??SYS_GetRandomSequence_1: (+1)
   \   0000000C   0x.... 0x....      BL       rand
   \   00000010   0x7028             STRB     R0,[R5, #+0]
   \   00000012   0x0A00             LSRS     R0,R0,#+8
   \   00000014   0x7068             STRB     R0,[R5, #+1]
   \   00000016   0x1C76             ADDS     R6,R6,#+1
   \   00000018   0x1CAD             ADDS     R5,R5,#+2
   \                     ??SYS_GetRandomSequence_0: (+1)
   \   0000001A   0xB2B6             UXTH     R6,R6
   \   0000001C   0x0878             LSRS     R0,R7,#+1
   \   0000001E   0x4286             CMP      R6,R0
   \   00000020   0xD3F4             BCC      ??SYS_GetRandomSequence_1
    171          
    172            if (size & (1<<0))
   \   00000022   0x07F8             LSLS     R0,R7,#+31
   \   00000024   0xD504             BPL      ??SYS_GetRandomSequence_2
    173              buffer[size-1] = (uint8_t)SYS_GetRandomNumber();
   \   00000026   0x.... 0x....      BL       rand
   \   0000002A   0x19E1             ADDS     R1,R4,R7
   \   0000002C   0x1E49             SUBS     R1,R1,#+1
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    174          
    175            return 0;
   \                     ??SYS_GetRandomSequence_2: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    176          }
    177          
    178          #if defined(_SLEEP_WHEN_IDLE_)
    179          /**************************************************************************//**
    180            \brief Stops priodic updating of the random seed.
    181           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    182          void sysStopUpdatingRandSeed(void)
    183          {
   \                     sysStopUpdatingRandSeed: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    184            HAL_StopAppTimer(&sysRndSeedTimer);
   \   00000002   0x....             LDR      R0,??DataTable4_2
   \   00000004   0x.... 0x....      BL       HAL_StopAppTimer
    185          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    186          #endif /* _SLEEP_WHEN_IDLE_ */
    187          
    188          #ifndef _MAC2_
    189          /**************************************************************************//**
    190          \brief This function reads version number in CS and returns as string
    191          
    192          \param[out] strVersion - string version. intVersion - integer version
    193          
    194          \return:  bool. true indicates success. false indicates failure,
    195                    which means version is unavailable
    196          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    197          bool SYS_GetBitCloudRevision(uint8_t *strVersion, uint32_t *intVersion)
    198          {
   \                     SYS_GetBitCloudRevision: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
    199            typedef union {
    200              uint32_t stackVer;
    201              struct {
    202                uint8_t reserved:8;
    203                uint8_t qualifier:2;
    204                uint8_t branchIter:6;
    205                uint8_t branchId:4;
    206                uint8_t minorDerv:4;
    207                uint8_t minor:4;
    208                uint8_t major:4;
    209              } stackBits;
    210            } stackVersion_t;
    211            stackVersion_t stackVersion;
    212            uint8_t i = 0;
    213            uint8_t qual[4] = {SYS_VERSION_ZERO_ASCII, SYS_VERSION_P_ASCII, SYS_VERSION_M_ASCII, SYS_VERSION_E_ASCII};
   \   00000006   0xA802             ADD      R0,SP,#+8
   \   00000008   0x....             ADR.N    R1,?_0
   \   0000000A   0x680A             LDR      R2,[R1, #0]
   \   0000000C   0x6002             STR      R2,[R0, #0]
    214          
    215            CS_ReadParameter(CS_STACK_VERSION_ID, &stackVersion.stackVer);
   \   0000000E   0xA901             ADD      R1,SP,#+4
   \   00000010   0x2089             MOVS     R0,#+137
   \   00000012   0x0040             LSLS     R0,R0,#+1        ;; #+274
   \   00000014   0x.... 0x....      BL       CS_ReadParameter
    216          
    217            if (!stackVersion.stackVer || (NULL == strVersion) || (NULL == intVersion))
   \   00000018   0x2500             MOVS     R5,#+0
   \   0000001A   0x9801             LDR      R0,[SP, #+4]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD01F             BEQ      ??SYS_GetBitCloudRevision_0
   \   00000020   0x2C00             CMP      R4,#+0
   \   00000022   0xD01D             BEQ      ??SYS_GetBitCloudRevision_0
   \   00000024   0x9804             LDR      R0,[SP, #+16]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD020             BEQ      ??SYS_GetBitCloudRevision_1
    218            {
    219              if (intVersion)
    220                *intVersion = 0;
    221              if (strVersion)
    222                strVersion[0] = '\0';
    223          
    224              return false;
    225            }
    226            else
    227            {
    228              // convert to ascii
    229              strVersion[i++] = 'B';
   \   0000002A   0x2042             MOVS     R0,#+66
   \   0000002C   0x7020             STRB     R0,[R4, #+0]
    230              strVersion[i++] = 'C';
   \   0000002E   0x2043             MOVS     R0,#+67
   \   00000030   0x7060             STRB     R0,[R4, #+1]
   \   00000032   0x205F             MOVS     R0,#+95
   \   00000034   0x70A0             STRB     R0,[R4, #+2]
    231              strVersion[i++] = '_';
    232              strVersion[i++] = 'V';
   \   00000036   0x2056             MOVS     R0,#+86
   \   00000038   0x70E0             STRB     R0,[R4, #+3]
    233              SYS_VERSION_CONV_INT_TO_ASCII(stackVersion.stackBits.major, strVersion);
   \   0000003A   0xAE01             ADD      R6,SP,#+4
   \   0000003C   0x78F0             LDRB     R0,[R6, #+3]
   \   0000003E   0x0900             LSRS     R0,R0,#+4
   \   00000040   0x280A             CMP      R0,#+10
   \   00000042   0xDB16             BLT      ??SYS_GetBitCloudRevision_2
   \   00000044   0x210A             MOVS     R1,#+10
   \   00000046   0x.... 0x....      BL       __aeabi_idiv
   \   0000004A   0x3030             ADDS     R0,R0,#+48
   \   0000004C   0x7120             STRB     R0,[R4, #+4]
   \   0000004E   0x78F0             LDRB     R0,[R6, #+3]
   \   00000050   0x0900             LSRS     R0,R0,#+4
   \   00000052   0x210A             MOVS     R1,#+10
   \   00000054   0x.... 0x....      BL       __aeabi_idivmod
   \   00000058   0x3130             ADDS     R1,R1,#+48
   \   0000005A   0x7161             STRB     R1,[R4, #+5]
   \   0000005C   0x2706             MOVS     R7,#+6
   \   0000005E   0xE00B             B        ??SYS_GetBitCloudRevision_3
   \                     ??SYS_GetBitCloudRevision_0: (+1)
   \   00000060   0x9804             LDR      R0,[SP, #+16]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD000             BEQ      ??SYS_GetBitCloudRevision_4
   \   00000066   0x6005             STR      R5,[R0, #+0]
   \                     ??SYS_GetBitCloudRevision_4: (+1)
   \   00000068   0x2C00             CMP      R4,#+0
   \   0000006A   0xD000             BEQ      ??SYS_GetBitCloudRevision_5
   \                     ??SYS_GetBitCloudRevision_1: (+1)
   \   0000006C   0x7025             STRB     R5,[R4, #+0]
   \                     ??SYS_GetBitCloudRevision_5: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE08F             B        ??SYS_GetBitCloudRevision_6
   \                     ??SYS_GetBitCloudRevision_2: (+1)
   \   00000072   0x3030             ADDS     R0,R0,#+48
   \   00000074   0x7120             STRB     R0,[R4, #+4]
   \   00000076   0x2705             MOVS     R7,#+5
   \                     ??SYS_GetBitCloudRevision_3: (+1)
   \   00000078   0x202E             MOVS     R0,#+46
   \   0000007A   0x55E0             STRB     R0,[R4, R7]
   \   0000007C   0x1C7F             ADDS     R7,R7,#+1
   \   0000007E   0x78F0             LDRB     R0,[R6, #+3]
   \   00000080   0x0700             LSLS     R0,R0,#+28
   \   00000082   0x0F00             LSRS     R0,R0,#+28
   \   00000084   0xB2FF             UXTB     R7,R7
   \   00000086   0x19E1             ADDS     R1,R4,R7
   \   00000088   0x9100             STR      R1,[SP, #+0]
   \   0000008A   0x1C7F             ADDS     R7,R7,#+1
   \   0000008C   0x280A             CMP      R0,#+10
   \   0000008E   0xDB10             BLT      ??SYS_GetBitCloudRevision_7
    234          
    235              strVersion[i++] = '.';
    236              SYS_VERSION_CONV_INT_TO_ASCII(stackVersion.stackBits.minor, strVersion);
   \   00000090   0x210A             MOVS     R1,#+10
   \   00000092   0x.... 0x....      BL       __aeabi_idiv
   \   00000096   0x3030             ADDS     R0,R0,#+48
   \   00000098   0x9900             LDR      R1,[SP, #+0]
   \   0000009A   0x7008             STRB     R0,[R1, #+0]
   \   0000009C   0x78F0             LDRB     R0,[R6, #+3]
   \   0000009E   0x0700             LSLS     R0,R0,#+28
   \   000000A0   0x0F00             LSRS     R0,R0,#+28
   \   000000A2   0x210A             MOVS     R1,#+10
   \   000000A4   0x.... 0x....      BL       __aeabi_idivmod
   \   000000A8   0x3130             ADDS     R1,R1,#+48
   \   000000AA   0xB2FF             UXTB     R7,R7
   \   000000AC   0x55E1             STRB     R1,[R4, R7]
   \   000000AE   0x1C7F             ADDS     R7,R7,#+1
   \   000000B0   0xE002             B        ??SYS_GetBitCloudRevision_8
   \                     ??SYS_GetBitCloudRevision_7: (+1)
   \   000000B2   0x3030             ADDS     R0,R0,#+48
   \   000000B4   0x9900             LDR      R1,[SP, #+0]
   \   000000B6   0x7008             STRB     R0,[R1, #+0]
    237          
    238              strVersion[i++] = '.';
   \                     ??SYS_GetBitCloudRevision_8: (+1)
   \   000000B8   0x202E             MOVS     R0,#+46
   \   000000BA   0xB2FF             UXTB     R7,R7
   \   000000BC   0x55E0             STRB     R0,[R4, R7]
   \   000000BE   0x1C7F             ADDS     R7,R7,#+1
    239              SYS_VERSION_CONV_INT_TO_ASCII(stackVersion.stackBits.minorDerv, strVersion);
   \   000000C0   0x78B0             LDRB     R0,[R6, #+2]
   \   000000C2   0x0900             LSRS     R0,R0,#+4
   \   000000C4   0xB2FF             UXTB     R7,R7
   \   000000C6   0x19E1             ADDS     R1,R4,R7
   \   000000C8   0x9100             STR      R1,[SP, #+0]
   \   000000CA   0x1C7F             ADDS     R7,R7,#+1
   \   000000CC   0x280A             CMP      R0,#+10
   \   000000CE   0xDB0F             BLT      ??SYS_GetBitCloudRevision_9
   \   000000D0   0x210A             MOVS     R1,#+10
   \   000000D2   0x.... 0x....      BL       __aeabi_idiv
   \   000000D6   0x3030             ADDS     R0,R0,#+48
   \   000000D8   0x9900             LDR      R1,[SP, #+0]
   \   000000DA   0x7008             STRB     R0,[R1, #+0]
   \   000000DC   0x78B0             LDRB     R0,[R6, #+2]
   \   000000DE   0x0900             LSRS     R0,R0,#+4
   \   000000E0   0x210A             MOVS     R1,#+10
   \   000000E2   0x.... 0x....      BL       __aeabi_idivmod
   \   000000E6   0x3130             ADDS     R1,R1,#+48
   \   000000E8   0xB2FF             UXTB     R7,R7
   \   000000EA   0x55E1             STRB     R1,[R4, R7]
   \   000000EC   0x1C7F             ADDS     R7,R7,#+1
   \   000000EE   0xE002             B        ??SYS_GetBitCloudRevision_10
   \                     ??SYS_GetBitCloudRevision_9: (+1)
   \   000000F0   0x3030             ADDS     R0,R0,#+48
   \   000000F2   0x9900             LDR      R1,[SP, #+0]
   \   000000F4   0x7008             STRB     R0,[R1, #+0]
    240          
    241              strVersion[i++] = '_';
   \                     ??SYS_GetBitCloudRevision_10: (+1)
   \   000000F6   0x205F             MOVS     R0,#+95
   \   000000F8   0xB2FF             UXTB     R7,R7
   \   000000FA   0x55E0             STRB     R0,[R4, R7]
   \   000000FC   0x1C7F             ADDS     R7,R7,#+1
    242              SYS_VERSION_CONV_INT_TO_ASCII(stackVersion.stackBits.branchId, strVersion);
   \   000000FE   0x78B0             LDRB     R0,[R6, #+2]
   \   00000100   0x0700             LSLS     R0,R0,#+28
   \   00000102   0x0F00             LSRS     R0,R0,#+28
   \   00000104   0xB2FF             UXTB     R7,R7
   \   00000106   0x19E1             ADDS     R1,R4,R7
   \   00000108   0x9100             STR      R1,[SP, #+0]
   \   0000010A   0x1C7F             ADDS     R7,R7,#+1
   \   0000010C   0x280A             CMP      R0,#+10
   \   0000010E   0xDB10             BLT      ??SYS_GetBitCloudRevision_11
   \   00000110   0x210A             MOVS     R1,#+10
   \   00000112   0x.... 0x....      BL       __aeabi_idiv
   \   00000116   0x3030             ADDS     R0,R0,#+48
   \   00000118   0x9900             LDR      R1,[SP, #+0]
   \   0000011A   0x7008             STRB     R0,[R1, #+0]
   \   0000011C   0x78B0             LDRB     R0,[R6, #+2]
   \   0000011E   0x0700             LSLS     R0,R0,#+28
   \   00000120   0x0F00             LSRS     R0,R0,#+28
   \   00000122   0x210A             MOVS     R1,#+10
   \   00000124   0x.... 0x....      BL       __aeabi_idivmod
   \   00000128   0x3130             ADDS     R1,R1,#+48
   \   0000012A   0xB2FF             UXTB     R7,R7
   \   0000012C   0x55E1             STRB     R1,[R4, R7]
   \   0000012E   0x1C7F             ADDS     R7,R7,#+1
   \   00000130   0xE002             B        ??SYS_GetBitCloudRevision_12
   \                     ??SYS_GetBitCloudRevision_11: (+1)
   \   00000132   0x3030             ADDS     R0,R0,#+48
   \   00000134   0x9900             LDR      R1,[SP, #+0]
   \   00000136   0x7008             STRB     R0,[R1, #+0]
    243          
    244              strVersion[i++] = '.';
   \                     ??SYS_GetBitCloudRevision_12: (+1)
   \   00000138   0x202E             MOVS     R0,#+46
   \   0000013A   0xB2FF             UXTB     R7,R7
   \   0000013C   0x55E0             STRB     R0,[R4, R7]
   \   0000013E   0x1C7F             ADDS     R7,R7,#+1
    245              SYS_VERSION_CONV_INT_TO_ASCII(stackVersion.stackBits.branchIter, strVersion);
   \   00000140   0x7870             LDRB     R0,[R6, #+1]
   \   00000142   0x0880             LSRS     R0,R0,#+2
   \   00000144   0xB2FF             UXTB     R7,R7
   \   00000146   0x19E1             ADDS     R1,R4,R7
   \   00000148   0x9100             STR      R1,[SP, #+0]
   \   0000014A   0x1C7F             ADDS     R7,R7,#+1
   \   0000014C   0x280A             CMP      R0,#+10
   \   0000014E   0xDB0F             BLT      ??SYS_GetBitCloudRevision_13
   \   00000150   0x210A             MOVS     R1,#+10
   \   00000152   0x.... 0x....      BL       __aeabi_idiv
   \   00000156   0x3030             ADDS     R0,R0,#+48
   \   00000158   0x9900             LDR      R1,[SP, #+0]
   \   0000015A   0x7008             STRB     R0,[R1, #+0]
   \   0000015C   0x7870             LDRB     R0,[R6, #+1]
   \   0000015E   0x0880             LSRS     R0,R0,#+2
   \   00000160   0x210A             MOVS     R1,#+10
   \   00000162   0x.... 0x....      BL       __aeabi_idivmod
   \   00000166   0x3130             ADDS     R1,R1,#+48
   \   00000168   0xB2FF             UXTB     R7,R7
   \   0000016A   0x55E1             STRB     R1,[R4, R7]
   \   0000016C   0x1C7F             ADDS     R7,R7,#+1
   \   0000016E   0xE002             B        ??SYS_GetBitCloudRevision_14
   \                     ??SYS_GetBitCloudRevision_13: (+1)
   \   00000170   0x3030             ADDS     R0,R0,#+48
   \   00000172   0x9900             LDR      R1,[SP, #+0]
   \   00000174   0x7008             STRB     R0,[R1, #+0]
    246          
    247              strVersion[i++] = qual[stackVersion.stackBits.qualifier];
   \                     ??SYS_GetBitCloudRevision_14: (+1)
   \   00000176   0xA802             ADD      R0,SP,#+8
   \   00000178   0x7871             LDRB     R1,[R6, #+1]
   \   0000017A   0x0789             LSLS     R1,R1,#+30
   \   0000017C   0x0F89             LSRS     R1,R1,#+30
   \   0000017E   0x5C40             LDRB     R0,[R0, R1]
   \   00000180   0xB2FF             UXTB     R7,R7
   \   00000182   0x55E0             STRB     R0,[R4, R7]
    248              strVersion[i] = '\0';
   \   00000184   0x1C7F             ADDS     R7,R7,#+1
   \   00000186   0xB2FF             UXTB     R7,R7
   \   00000188   0x55E5             STRB     R5,[R4, R7]
    249          
    250              if (intVersion)
    251                *intVersion = stackVersion.stackVer;
   \   0000018A   0x9801             LDR      R0,[SP, #+4]
   \   0000018C   0x9904             LDR      R1,[SP, #+16]
   \   0000018E   0x6008             STR      R0,[R1, #+0]
    252            }
    253          
    254            return true;
   \   00000190   0x2001             MOVS     R0,#+1
   \                     ??SYS_GetBitCloudRevision_6: (+1)
   \   00000192   0xB005             ADD      SP,SP,#+20
   \   00000194   0xBDF0             POP      {R4-R7,PC}       ;; return
    255          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     sysRfRndReq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     sysRndConfirm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     sysRfRndReq+0x1C

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x30 0x50          DC8 48, 80, 77, 69
   \              0x4D 0x45    
    256          #endif // _MAC2_
    257          
    258          // eof sysUtils.c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   SYS_GetBitCloudRevision
        40   -> CS_ReadParameter
        40 __aeabi_idiv
        40 __aeabi_idivmod
      24   SYS_GetRandomSequence
        24   -> rand
       8   SYS_Swap
       8   sysRndConfirm
         8   -> HAL_GetSystemTime
         8   -> HAL_StartAppTimer
         8   -> MAC_GetExtAddr
         8   -> srand
       8   sysStartUpdatingRandSeed
         8   -> HAL_StopAppTimer
         8   -> RF_RandomReq
       8   sysStopUpdatingRandSeed
         8   -> HAL_StopAppTimer
       8   sysUpdateRndSeedTimerFired
         8   -> RF_RandomReq


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ?_0
     406  SYS_GetBitCloudRevision
      52  SYS_GetRandomSequence
      32  SYS_Swap
      48  sysRfRndReq
          sysRndSeedTimer
      54  sysRndConfirm
      34  sysStartUpdatingRandSeed
      10  sysStopUpdatingRandSeed
      10  sysUpdateRndSeedTimerFired

 
  48 bytes in section .data
 614 bytes in section .text
 
 614 bytes of CODE memory
  48 bytes of DATA memory

Errors: none
Warnings: none
