###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:40:04
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\combinedInterface\src\ciConsole.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\combinedInterface\src\ciConsole.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\ciConsole.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\ciConsole.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\combinedInterface\src\ciConsole.c
      1          /**************************************************************************//**
      2            \file ciConsole.c
      3          
      4            \brief
      5              Combined Interface console implementation.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2013, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16              03.09.13 N. Fomin - Created.
     17          ******************************************************************************/
     18          #ifdef APP_DEVICE_TYPE_COMBINED_INTERFACE
     19          #if APP_ENABLE_CONSOLE == 1
     20          
     21          /******************************************************************************
     22                              Includes section
     23          ******************************************************************************/
     24          #include <uartManager.h>
     25          #include <console.h>
     26          #include <ciBasicCluster.h>
     27          #include <identifyCluster.h>
     28          #include <ciIdentifyCluster.h>
     29          #include <ciOnOffCluster.h>
     30          #include <ciLevelControlCluster.h>
     31          #include <ciGroupsCluster.h>
     32          #include <ciScenesCluster.h>
     33          #include <ciOccupancySensingCluster.h>
     34          #include <ciTemperatureMeasurementCluster.h>
     35          #include <ciHumidityMeasurementCluster.h>
     36          #include <ciIlluminanceMeasurementCluster.h>
     37          #include <ciThermostatCluster.h>
     38          #include <ciThermostatUiConfCluster.h>
     39          #include <ciDiagnosticsCluster.h>
     40          #include <ciFanControlCluster.h>
     41          #include <ciPowerConfigurationCluster.h>
     42          #include <ciTimeCluster.h>
     43          #include <ciAlarmsCluster.h>
     44          #include <ciIasACECluster.h>
     45          #include <ciIasZoneCluster.h>
     46          #include <resetReason.h>
     47          #include <zclDevice.h>
     48          #include <pdsDataServer.h>
     49          #include <zdo.h>
     50          #include <nwkAttributes.h>
     51          #include <ezModeManager.h>
     52          #include <sysTaskManager.h>
     53          #ifdef BOARD_PC
     54            #include <conio.h>
     55          #endif
     56          #ifdef ZAPPSI_HOST
     57          #include <zsiHalSerialization.h>
     58          #endif
     59          
     60          /******************************************************************************
     61                              Defines section
     62          ******************************************************************************/
     63          /* This value used in ZLL tests to identify non-ZLL Trust Center */
     64          #define TEST_DEVICE_TYPE_HA_TC 0x02U
     65          
     66          /******************************************************************************
     67                              Prototypes section
     68          ******************************************************************************/
     69          static void processHelpCmd(const ScanValue_t *args);
     70          
     71          static void processStartEzModeCmd(const ScanValue_t *args);
     72          static void processSetEzModeTypeCmd(const ScanValue_t *args);
     73          static void processReadAttrCmd(const ScanValue_t *args);
     74          static void processWriteAttrCmd(const ScanValue_t *args);
     75          static void processIdentifyCmd(const ScanValue_t *args);
     76          static void processIdentifyQueryCmd(const ScanValue_t *args);
     77          static void processEzModeInvokeCmd(const ScanValue_t *args);
     78          static void processUpdateCommissiningStateCmd(const ScanValue_t *args);
     79          static void processOnOffToggleCmd(const ScanValue_t *args);
     80          static void processMoveToLevelCmd(const ScanValue_t *args);
     81          static void processMoveCmd(const ScanValue_t *args);
     82          static void processStepCmd(const ScanValue_t *args);
     83          static void processStopCmd(const ScanValue_t *args);
     84          static void processAddGroupCmd(const ScanValue_t *args);
     85          static void processViewGroupCmd(const ScanValue_t *args);
     86          static void processGetGroupMembershipCmd(const ScanValue_t *args);
     87          static void processRemoveGroupCmd(const ScanValue_t *args);
     88          static void processRemoveAllGroupsCmd(const ScanValue_t *args);
     89          static void processAddGroupIfIdentifyingCmd(const ScanValue_t *args);
     90          static void processAddSceneToDimmableLightCmd(const ScanValue_t *args);
     91          static void processAddSceneToThermostatCmd(const ScanValue_t *args);
     92          static void processViewSceneCmd(const ScanValue_t *args);
     93          static void processRemoveSceneCmd(const ScanValue_t *args);
     94          static void processRemoveAllScenesCmd(const ScanValue_t *args);
     95          static void processStoreSceneCmd(const ScanValue_t *args);
     96          static void processRecallSceneCmd(const ScanValue_t *args);
     97          static void processGetSceneMembershipCmd(const ScanValue_t *args);
     98          static void processConfigureReportingCmd(const ScanValue_t *args);
     99          static APS_AddrMode_t determineAddressMode(const ScanValue_t *arg);
    100          static void processGetDeviceTypeCmd(const ScanValue_t *args);
    101          static void processSetPermitJoinCmd(const ScanValue_t *args);
    102          static void zdoPermitJoiningResponse(ZDO_ZdpResp_t *resp);
    103          static void processSetPointChangeCmd(const ScanValue_t *args);
    104          static void processResetToFactoryDefaultsCmd(const ScanValue_t *args);
    105          static void processSetUTCTimeCmd(const ScanValue_t *args);
    106          static void processReadTimeCmd(const ScanValue_t *args);
    107          static void parseDateTime(char *str, dateTime_t *tempDateTime);
    108          static void processSetTimeZoneAndDST(const ScanValue_t *args);
    109          static void processSetTimeStatus(const ScanValue_t *args);
    110          static void processResetAlarmCmd(const ScanValue_t *args);
    111          static void processAlarmCmds(const ScanValue_t *args);
    112          static void processSetExtAddr(const ScanValue_t *args);
    113          static void processACEGetPanelStatusChangedCommand(const ScanValue_t *args);
    114          static void processACEGetZoneStatusChangedCommand(const ScanValue_t *args);
    115          static void processZoneInitiateNormalOperatingModeCommand(const ScanValue_t *args);
    116          static void processZoneInitiateTestModeCommand(const ScanValue_t *args);
    117          #ifndef ZAPPSI_HOST /* Hiding this commands for ZappSi */
    118          static void processResetCmd(const ScanValue_t *args);
    119          static void processPseudoPowerOffCmd(const ScanValue_t *args);
    120          static void processResetToFactoryFreshCmd(const ScanValue_t *args);
    121          static void processRestartNwkCmd(const ScanValue_t *args);
    122          #endif
    123          
    124          /******************************************************************************
    125                              Local variables section
    126          ******************************************************************************/
    127          static ZDO_ZdpReq_t zdpReq;
    128          static uint8_t readBuffer[USART_RX_BUFFER_LENGTH];
    129          static const ConsoleCommand_t cmds[] =
    130          {
    131            {"help",   "",     processHelpCmd, "->Show help you're reading now:  help\r\n"},
    132            {"setEzModeType", "d", processSetEzModeTypeCmd, "->Sets EZ-Mode type: 0 - target, 1 - initiator\r\n"},
    133            {"startEzMode", "", processStartEzModeCmd, "->Start finding and binding process\r\n"},
    134            {"readAttribute", "sdddd", processReadAttrCmd,
    135              "->Read Attribute for specified cluster: readAttribute [addrMode][addr][ep][clusterId][attrId]\r\n"},
    136            {"writeAttribute", "sddddddd", processWriteAttrCmd,
    137              "->Write Attribute for specified cluster: writeAttribute [addrMode][addr][ep][clusterId][attrId][type][attrValue][attrSize]\r\n"},
    138            {"identify", "sddd", processIdentifyCmd,
    139              "->Send Identify command: identify [addrMode][addr][ep][identifyTime]\r\n"},
    140            {"identifyQuery", "sdd", processIdentifyQueryCmd,
    141              "->Send Identify Query command: identifyQuery [addrMode][addr][ep]\r\n"},
    142            {"EzModeInvoke", "sddd", processEzModeInvokeCmd,
    143              "->Send EZ-Mode Invoke command: EzModeInvoke [addrMode][addr][ep][action]\r\n"},
    144            {"updateCommissioningState", "sdddd", processUpdateCommissiningStateCmd,
    145              "->Send Update Commissioning State command: updateCommissioningState [addrMode][addr][ep][action][mask]\r\n"},
    146            {"onOff", "sdds", processOnOffToggleCmd,
    147              "Sends On/Off command: onOff [addrMode][addr][ep][onOff: -on for On, -off for Off]\r\n"},
    148            {"moveToLevel", "sddddd", processMoveToLevelCmd,
    149              "->Send Move To Level (with On/Off) command: moveToLevel [addrMode][addr][ep][level][transitionTime][onOff]\r\n"},
    150            {"move", "sddddd", processMoveCmd,
    151              "->Send Move (with On/Off) command: move [addrMode][addr][ep][mode][rate][onOff]\r\n"},
    152            {"step", "sdddddd", processStepCmd,
    153              "->Send Step (with On/Off) command: step [addrMode][addr][ep][mode][stepSize][transitionTime][onOff]\r\n"},
    154            {"stop", "sddd", processStopCmd, "->Send Stop (with On/Off) command: stop [addrMode][addr][ep][onOff]\r\n"},
    155            {"addGroup", "sddd", processAddGroupCmd, "->Send Add Group command: addGroup [addrMode][addr][ep][groupId]\r\n"},
    156            {"viewGroup", "sddd", processViewGroupCmd, "->Send View Group command: viewGroup [addrMode][addr][ep][groupId]\r\n"},
    157            {"getGroupMembership", "sdddddddd", processGetGroupMembershipCmd,
    158              "->Send Get Group Membership command: getGroupMembership [addrMode][addr][ep][count][groupId]*5\r\n"},
    159            {"removeGroup", "sddd", processRemoveGroupCmd,
    160              "->Send Remove Group command: removeGroup [addrMode][addr][ep][groupId]\r\n"},
    161            {"removeAllGroups", "sdd", processRemoveAllGroupsCmd,
    162              "->Send Remove All Groups command: removeAllGroups [addrMode][addr][ep]\r\n"},
    163            {"addGroupIfIdentifying", "sddd", processAddGroupIfIdentifyingCmd,
    164              "->Send Add Group If Identifying command: addGroupIfIdentifying [addrMode][addr][ep][groupId]\r\n"},
    165            {"addSceneToDL", "sddddddd", processAddSceneToDimmableLightCmd,
    166              "->Send Add Scene command to Dimmable Light: addScene [addrMode][addr][ep][groupId][sceneId][transitionTime][onOff][level]\r\n"},
    167            {"addSceneToTH", "sdddddddd", processAddSceneToThermostatCmd,
    168              "->Send Add Scene command to Thermostat: addScene [addrMode][addr][ep][groupId][sceneId][transitionTime][occupiedCoolingSetpoint][occupiedHeatingSetpoint][systemMode]\r\n"},
    169            {"viewScene", "sdddd", processViewSceneCmd,
    170              "->Send View Scene command: viewScene [addrMode][addr][ep][groupId][sceneId]\r\n"},
    171            {"removeScene", "sdddd", processRemoveSceneCmd,
    172              "->Send Remove Scene command: removeScene [addrMode][addr][ep][groupId][sceneId]\r\n"},
    173            {"removeAllScenes", "sddd", processRemoveAllScenesCmd,
    174              "->Send Remove All Scenes command: removeAllScenes [addrMode][addr][ep][groupId]\r\n"},
    175            {"storeScene", "sdddd", processStoreSceneCmd,
    176              "->Send Store Scene command: storeScene [addrMode][addr][ep][groupId][sceneId]\r\n"},
    177            {"recallScene", "sdddd", processRecallSceneCmd,
    178              "->Send Recall Scene command: recallScene [addrMode][addr][ep][groupId][sceneId]\r\n"},
    179            {"getSceneMembership", "sddd", processGetSceneMembershipCmd,
    180              "->Send Get Scene Membership command: getSceneMembership [addrMode][addr][ep][groupId]\r\n"},
    181            {"configureReporting", "sddddddd", processConfigureReportingCmd,
    182              "->Sends configure reporting to specified cluster server: configureReporting [addrMode][addr][ep][clusterId][attrId][type][min][max]\r\n"},
    183            {"getDeviceType", "", processGetDeviceTypeCmd, "-> Request for device type: getDeviceType\r\n"},
    184            {"setPermitJoin", "d", processSetPermitJoinCmd, "-> Sets Permit Join: setPermitJoin [dur]\r\n"},
    185            {"thermSetPointChange", "sdddd", processSetPointChangeCmd, "-> change thermostat setpoints [addrMode][addr][ep][setPtmode][amount]\r\n"},
    186            {"setUTCTime", "s", processSetUTCTimeCmd, "-> set UTCTime to this date & Time[dd:mm:yr:hr:min:sec]\r\n"},
    187            {"readTime", "", processReadTimeCmd, "-> read the current UTCTime\r\n"},
    188            {"setTimeZoneAndDST", "dssd", processSetTimeZoneAndDST, "-> setTimZoneAndDST [timeZone][dstStart][dstEnd][dstShift]\r\n"},
    189            {"setTimeStatus", "dddd", processSetTimeStatus, "-> setTimeStatus [master][synchronized][masterZoneDst][superseding]\r\n"},  
    190            {"resetToFactoryDefaults", "sdd", processResetToFactoryDefaultsCmd, "-> reset all cluster attributes to factory defaults [addrMode][addr][ep]\r\n"},
    191            {"resetAlarm", "sdddd", processResetAlarmCmd, "-> change thermostat setpoints [addrMode][addr][ep][ClusterID][alarmCode]\r\n"},
    192            {"alarmCmd", "sdds", processAlarmCmds, "-> resetAll/Get/resetAlamrLog commands [addrMode][addr][ep] [resetAllAlarm/getAlarm/resetAlarmLog\r\n"},
    193            {"setExtAddr", "d",processSetExtAddr, "->Set Ext Address:[value]\r\n"},
    194            {"ACEGetPanelStatusChangedCommand", "sdddddd",processACEGetPanelStatusChangedCommand,
    195              "->Panel StatusChanged Command Sent:[addrMode][addr][ep][panel_status][seconds_remaining][audible_noti][alarmstatus]\r\n"},
    196            {"ACEZoneStatusChangedCommand", "sdddddd",processACEGetZoneStatusChangedCommand,
    197              "->Zone StatusChanged Command Sent:[addrMode][addr][ep][zoneId][zone_status][audible][zone_label]\r\n"},
    198            {"ZoneInitiateNormalOperatingModeCommand", "sdd",processZoneInitiateNormalOperatingModeCommand,
    199              "->Send ZoneInitiateNormalOperatingModeCommand:[addrMode][addr][ep]\r\n"},
    200            {"ZoneInitiateTestModeCommand", "sdddd",processZoneInitiateTestModeCommand,
    201              "->Send ZoneInitiateTestModeCommand:[addrMode][addr][ep][Test_Mode_Duration ][Current_Zone_Sensitivity Level]\r\n"},
    202          #ifndef ZAPPSI_HOST /* Hiding this commands for ZappSi */
    203            {"reset", "", processResetCmd, "->Reset device\r\n"},
    204            {"resetToFN", "", processResetToFactoryFreshCmd, "->Reset to factory fresh settings: resetToFN\r\n"},
    205            {"powerOff", "", processPseudoPowerOffCmd, "-> Powers off device: powerOff\r\n"},  
    206            {"restartNwk", "d", processRestartNwkCmd, "-> Restarts network on particular channel [channel]\r\n"},
    207          #endif
    208            {0,0,0,0},
    209          };
    210          
    211          /******************************************************************************
    212                              Implementation section
    213          ******************************************************************************/
    214          /**************************************************************************//**
    215          \brief Sends single char to serial interface
    216          ******************************************************************************/
    217          void consoleTx(char chr)
    218          {
    219            appSnprintf(&chr);
    220          }
    221          
    222          /**************************************************************************//**
    223          \brief Processes single char read from serial interface
    224          
    225          \param[in] char - read char
    226          ******************************************************************************/
    227          void consoleTxStr(const char *str)
    228          {
    229            appSnprintf(str);
    230          }
    231          
    232          /**************************************************************************//**
    233          \brief Initializes console
    234          ******************************************************************************/
    235          void initConsole(void)
    236          {
    237            consoleRegisterCommands(cmds);
    238          }
    239          
    240          /**************************************************************************//**
    241          \brief Processes data received by console
    242          ******************************************************************************/
    243          void processConsole(uint16_t length)
    244          {
    245            int8_t bytesRead = readDataFromUart(readBuffer, MIN(USART_RX_BUFFER_LENGTH, length));
    246          
    247            for (int8_t i = 0; i < bytesRead; i++)
    248              consoleRx(readBuffer[i]);
    249          }
    250          
    251          /**************************************************************************//**
    252          \brief Determines address mode for command
    253          
    254          \param[in] arg - pointer to command argument with address mode string
    255          
    256          \returns address mode
    257          ******************************************************************************/
    258          static APS_AddrMode_t determineAddressMode(const ScanValue_t *arg)
    259          {
    260            if (!memcmp("-g", arg->str, 2))
    261              return APS_GROUP_ADDRESS;
    262          
    263            if (!memcmp("-b", arg->str, 2))
    264              return APS_NO_ADDRESS;
    265          
    266            return APS_SHORT_ADDRESS;
    267          }
    268          
    269          /**************************************************************************//**
    270          \brief Processes help command
    271          
    272          \param[in] args - array of command arguments
    273          ******************************************************************************/
    274          static void processHelpCmd(const ScanValue_t *args)
    275          {
    276            (void)args;
    277            LOG_STRING(commandStr, "Commands: \r\n");
    278            appSnprintf(commandStr);
    279            for (const ConsoleCommand_t *cmd = cmds; cmd->name; cmd++)
    280              appSnprintf("%s\r\n", cmd->name);
    281          }
    282          #ifndef ZAPPSI_HOST
    283          /**************************************************************************//**
    284          \brief Processes reset command: reset device
    285          
    286          \param[in] args - array of command arguments
    287          ******************************************************************************/
    288          static void processResetCmd(const ScanValue_t *args)
    289          {
    290            (void)args;
    291          #ifdef ZAPPSI_HOST
    292            /* In case of reset command received on Host first NP
    293               then Host application need to be reset
    294             */
    295            ZSI_ResetNP();
    296            restartApp();
    297          #else
    298            HAL_WarmReset();
    299          #endif
    300          
    301          }
    302          #endif
    303          
    304          /**************************************************************************//**
    305          \brief Processes start finding and binding command
    306          
    307          \param[in] args - array of command arguments
    308          ******************************************************************************/
    309          static void processStartEzModeCmd(const ScanValue_t *args)
    310          {
    311            (void)args;
    312            invokeEzMode(NULL);
    313          }
    314          
    315          /**************************************************************************//**
    316          \brief Processes Set EZ-Mode type command
    317          
    318          \param[in] args - array of command arguments
    319          ******************************************************************************/
    320          static void processSetEzModeTypeCmd(const ScanValue_t *args)
    321          {
    322            initEzModeManager(args[0].uint8);
    323          }
    324          
    325          /**************************************************************************//**
    326          \brief Processes Read attribute command
    327          
    328          \param[in] args - array of command arguments
    329          ******************************************************************************/
    330          static void processReadAttrCmd(const ScanValue_t *args)
    331          {
    332            switch(args[3].uint16) //cluster Id
    333            {
    334              case BASIC_CLUSTER_ID:
    335                 basicReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    336                   args[4].uint16, NULL);
    337                break;
    338              case TEMPERATURE_MEASUREMENT_CLUSTER_ID:
    339                temperatureMeasurementReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    340                  args[4].uint16, NULL);
    341                break;
    342              case OCCUPANCY_SENSING_CLUSTER_ID:
    343                occupancySensingReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    344                  args[4].uint16, NULL);
    345                break;
    346              case HUMIDITY_MEASUREMENT_CLUSTER_ID:
    347                humidityMeasurementReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    348                  args[4].uint16, NULL);
    349                break;
    350              case ILLUMINANCE_MEASUREMENT_CLUSTER_ID:
    351                illuminanceMeasuredValueReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    352                  args[4].uint16, NULL);
    353                break;
    354              case THERMOSTAT_CLUSTER_ID:
    355                thermostatReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    356                  args[4].uint16, NULL);
    357                break;
    358              case IDENTIFY_CLUSTER_ID:
    359                identifyReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    360                  args[4].uint16, NULL);
    361                break;
    362              case THERMOSTAT_UI_CONF_CLUSTER_ID:
    363                thermostatUiConfReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    364                  args[4].uint16, NULL);
    365                break;
    366              case FAN_CONTROL_CLUSTER_ID:
    367                fanControlReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    368                  args[4].uint16, NULL);
    369                break;
    370              case POWER_CONFIGURATION_CLUSTER_ID:
    371                powerConfigurationReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    372                  args[4].uint16, NULL);
    373                break;
    374              case DIAGNOSTICS_CLUSTER_ID:
    375                diagnosticsReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    376                  args[4].uint16, NULL);
    377                break;
    378              case ALARMS_CLUSTER_ID:
    379                alarmsReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    380                  args[4].uint16, NULL);
    381                break;
    382              case IAS_ZONE_CLUSTER_ID:
    383                iaszoneReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    384                  args[4].uint16, NULL);
    385                break; 
    386              case IAS_ACE_CLUSTER_ID:
    387                iasACEReadAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    388                  args[4].uint16, NULL);
    389                break;
    390              default:
    391                {
    392                  LOG_STRING(unsupportedClusterIdStr, "Unsupported Cluster Id \r\n");
    393                  appSnprintf(unsupportedClusterIdStr);
    394                }
    395                break;
    396            }
    397          }
    398          
    399          /**************************************************************************//**
    400          \brief Processes Write attribute command
    401          
    402          \param[in] args - array of command arguments
    403          ******************************************************************************/
    404          static void processWriteAttrCmd(const ScanValue_t *args)
    405          {
    406            switch(args[3].uint16) //cluster Id
    407            {
    408              case BASIC_CLUSTER_ID:
    409                 basicWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    410                   args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    411                break;
    412              case TEMPERATURE_MEASUREMENT_CLUSTER_ID:
    413                temperatureMeasurementWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    414                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    415                break;
    416              case OCCUPANCY_SENSING_CLUSTER_ID:
    417                occupancySensingWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    418                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    419                break;
    420              case HUMIDITY_MEASUREMENT_CLUSTER_ID:
    421                humidityMeasurementWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    422                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    423                break;
    424              case ILLUMINANCE_MEASUREMENT_CLUSTER_ID:
    425                illuminanceMeasuredValueWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    426                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    427                break;
    428              case THERMOSTAT_CLUSTER_ID:
    429                thermostatWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    430                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    431                break;
    432              case IDENTIFY_CLUSTER_ID:
    433                identifyWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    434                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    435                break;
    436              case THERMOSTAT_UI_CONF_CLUSTER_ID:
    437                thermostatUiConfWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    438                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    439                break;
    440              case FAN_CONTROL_CLUSTER_ID:
    441                fanControlWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    442                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    443                break;
    444              case POWER_CONFIGURATION_CLUSTER_ID:
    445                powerConfigurationWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    446                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    447                break;
    448              case DIAGNOSTICS_CLUSTER_ID:
    449                diagnosticsWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    450                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    451                break;
    452              case ALARMS_CLUSTER_ID:
    453                alarmsWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    454                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    455                break;
    456              case IAS_ZONE_CLUSTER_ID:
    457                iaszoneWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    458                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    459                break;
    460              case IAS_ACE_CLUSTER_ID:
    461                iasACEWriteAttribute(determineAddressMode(args), args[1].uint16, args[2].uint8,
    462                  args[4].uint16, args[5].uint8, NULL, (void *)&args[6].uint8, args[7].uint8);
    463                break;
    464              default:
    465                {
    466                  LOG_STRING(unsupportedClusterIdStr, "Unsupported Cluster Id \r\n");
    467                  appSnprintf(unsupportedClusterIdStr);
    468                }
    469                break;
    470            }
    471          }
    472          
    473          /**************************************************************************//**
    474          \brief Processes Identify command
    475          
    476          \param[in] args - array of command arguments
    477          ******************************************************************************/
    478          static void processIdentifyCmd(const ScanValue_t *args)
    479          {
    480            identifySendIdentify(determineAddressMode(args), args[1].uint16, args[2].uint8,
    481              args[3].uint16);
    482          }
    483          
    484          /**************************************************************************//**
    485          \brief Processes Identify Query command
    486          
    487          \param[in] args - array of command arguments
    488          ******************************************************************************/
    489          static void processIdentifyQueryCmd(const ScanValue_t *args)
    490          {
    491            identifySendIdentifyQuery(determineAddressMode(args), args[1].uint16, args[2].uint8);
    492          }
    493          
    494          /**************************************************************************//**
    495          \brief Processes EZ-Mode invoke command
    496          
    497          \param[in] args - array of command arguments
    498          ******************************************************************************/
    499          static void processEzModeInvokeCmd(const ScanValue_t *args)
    500          {
    501            identifySendEzModeInvoke(determineAddressMode(args), args[1].uint16, args[2].uint8,
    502              args[3].uint8);
    503          }
    504          
    505          /**************************************************************************//**
    506          \brief Processes Update Commissioning State command
    507          
    508          \param[in] args - array of command arguments
    509          ******************************************************************************/
    510          static void processUpdateCommissiningStateCmd(const ScanValue_t *args)
    511          {
    512            identifySendUpdateCommissioningState(determineAddressMode(args), args[1].uint16, args[2].uint8,
    513              args[3].uint8, args[4].uint8);
    514          }
    515          
    516          /**************************************************************************//**
    517          \brief Processes On/Off/Toggle command
    518          
    519          \param[in] args - array of command arguments
    520          ******************************************************************************/
    521          static void processOnOffToggleCmd(const ScanValue_t *args)
    522          {
    523            uint8_t command;
    524          
    525            if (!memcmp("-on", args[3].str, 3))
    526              command = 1;
    527            else if (!memcmp("-toggle", args[3].str, 7))
    528              command = 2;
    529            else
    530              command = 0;
    531          
    532            onOffSendOnOffToggle(determineAddressMode(args), args[1].uint16, args[2].uint8, command);
    533          }
    534          
    535          /**************************************************************************//**
    536          \brief Processes Move to level command
    537          
    538          \param[in] args - array of command arguments
    539          ******************************************************************************/
    540          static void processMoveToLevelCmd(const ScanValue_t *args)
    541          {
    542            levelControlSendMoveToLevel(determineAddressMode(args), args[1].uint16, args[2].uint8,
    543              args[3].uint8, args[4].uint16, args[5].uint8);
    544          }
    545          
    546          /**************************************************************************//**
    547          \brief Processes Move command
    548          
    549          \param[in] args - array of command arguments
    550          ******************************************************************************/
    551          static void processMoveCmd(const ScanValue_t *args)
    552          {
    553            levelControlSendMove(determineAddressMode(args), args[1].uint16, args[2].uint8,
    554              args[3].uint8, args[4].uint8, args[5].uint8);
    555          }
    556          
    557          /**************************************************************************//**
    558          \brief Processes Step command
    559          
    560          \param[in] args - array of command arguments
    561          ******************************************************************************/
    562          static void processStepCmd(const ScanValue_t *args)
    563          {
    564            levelControlSendStep(determineAddressMode(args), args[1].uint16, args[2].uint8,
    565              args[3].uint8, args[4].uint8, args[5].uint16, args[6].uint8);
    566          }
    567          
    568          /**************************************************************************//**
    569          \brief Processes Stop command
    570          
    571          \param[in] args - array of command arguments
    572          ******************************************************************************/
    573          static void processStopCmd(const ScanValue_t *args)
    574          {
    575            levelControlSendStop(determineAddressMode(args), args[1].uint16, args[2].uint8,
    576              args[3].uint8);
    577          }
    578          
    579          /**************************************************************************//**
    580          \brief Processes Add group command
    581          
    582          \param[in] args - array of command arguments
    583          ******************************************************************************/
    584          static void processAddGroupCmd(const ScanValue_t *args)
    585          {
    586            groupsSendAddGroup(determineAddressMode(args), args[1].uint16, args[2].uint8,
    587              args[3].uint16);
    588          }
    589          
    590          /**************************************************************************//**
    591          \brief Processes View group command
    592          
    593          \param[in] args - array of command arguments
    594          ******************************************************************************/
    595          static void processViewGroupCmd(const ScanValue_t *args)
    596          {
    597            groupsSendViewGroup(determineAddressMode(args), args[1].uint16, args[2].uint8,
    598              args[3].uint16);
    599          }
    600          
    601          /**************************************************************************//**
    602          \brief Processes Get group membership command
    603          
    604          \param[in] args - array of command arguments
    605          ******************************************************************************/
    606          static void processGetGroupMembershipCmd(const ScanValue_t *args)
    607          {
    608            uint16_t groupList[5];
    609          
    610            for (uint8_t i = 0; i < 5; i++)
    611              groupList[i] = args[i+4].uint16;
    612          
    613            groupsSendGetGroupMembership(determineAddressMode(args), args[1].uint16, args[2].uint8,
    614              args[3].uint8, groupList);
    615          }
    616          
    617          /**************************************************************************//**
    618          \brief Processes Remove group command
    619          
    620          \param[in] args - array of command arguments
    621          ******************************************************************************/
    622          static void processRemoveGroupCmd(const ScanValue_t *args)
    623          {
    624            groupsSendRemoveGroup(determineAddressMode(args), args[1].uint16, args[2].uint8,
    625              args[3].uint16);
    626          }
    627          
    628          /**************************************************************************//**
    629          \brief Processes Remove all groups command
    630          
    631          \param[in] args - array of command arguments
    632          ******************************************************************************/
    633          static void processRemoveAllGroupsCmd(const ScanValue_t *args)
    634          {
    635            (void)args;
    636            groupsSendRemoveAllGroups(determineAddressMode(args), args[1].uint16, args[2].uint8);
    637          }
    638          
    639          /**************************************************************************//**
    640          \brief Processes Add group if identifying command
    641          
    642          \param[in] args - array of command arguments
    643          ******************************************************************************/
    644          static void processAddGroupIfIdentifyingCmd(const ScanValue_t *args)
    645          {
    646            groupsSendAddGroupIfIdentifying(determineAddressMode(args), args[1].uint16, args[2].uint8,
    647              args[3].uint16);
    648          }
    649          
    650          /**************************************************************************//**
    651          \brief Processes Add Scene command to DL
    652          
    653          \param[in] args - array of command arguments
    654          ******************************************************************************/
    655          static void processAddSceneToDimmableLightCmd(const ScanValue_t *args)
    656          {
    657            scenesSendAddSceneToDimmableLight(determineAddressMode(args), args[1].uint16, args[2].uint8,
    658              args[3].uint16, args[4].uint8, args[5].uint16, args[6].uint8, args[7].uint8);
    659          }
    660          /**************************************************************************//**
    661          \brief Processes Add Scene command to Thermostat
    662          
    663          \param[in] args - array of command arguments
    664          ******************************************************************************/
    665          static void processAddSceneToThermostatCmd(const ScanValue_t *args)
    666          {
    667            scenesSendAddSceneToThermotstat(determineAddressMode(args), args[1].uint16, args[2].uint8,
    668              args[3].uint16, args[4].uint8, args[5].uint16, args[6].int16, args[7].int16, args[8].uint8 );
    669          }
    670          
    671          /**************************************************************************//**
    672          \brief Processes View Scene command
    673          
    674          \param[in] args - array of command arguments
    675          ******************************************************************************/
    676          static void processViewSceneCmd(const ScanValue_t *args)
    677          {
    678            scenesSendViewScene(determineAddressMode(args), args[1].uint16, args[2].uint8,
    679              args[3].uint16, args[4].uint8);
    680          }
    681          
    682          /**************************************************************************//**
    683          \brief Processes Remove group command
    684          
    685          \param[in] args - array of command arguments
    686          ******************************************************************************/
    687          static void processRemoveSceneCmd(const ScanValue_t *args)
    688          {
    689            scenesSendRemoveScene(determineAddressMode(args), args[1].uint16, args[2].uint8,
    690              args[3].uint16, args[4].uint8);
    691          }
    692          
    693          /**************************************************************************//**
    694          \brief Processes Remove all scenes command
    695          
    696          \param[in] args - array of command arguments
    697          ******************************************************************************/
    698          static void processRemoveAllScenesCmd(const ScanValue_t *args)
    699          {
    700            scenesSendRemoveAllScenes(determineAddressMode(args), args[1].uint16, args[2].uint8,
    701              args[3].uint16);
    702          }
    703          
    704          /**************************************************************************//**
    705          \brief Processes Store scene command
    706          
    707          \param[in] args - array of command arguments
    708          ******************************************************************************/
    709          static void processStoreSceneCmd(const ScanValue_t *args)
    710          {
    711            scenesSendStoreScene(determineAddressMode(args), args[1].uint16, args[2].uint8,
    712              args[3].uint16, args[4].uint8);
    713          }
    714          
    715          /**************************************************************************//**
    716          \brief Processes Recall scene command
    717          
    718          \param[in] args - array of command arguments
    719          ******************************************************************************/
    720          static void processRecallSceneCmd(const ScanValue_t *args)
    721          {
    722            scenesSendRecallScene(determineAddressMode(args), args[1].uint16, args[2].uint8,
    723              args[3].uint16, args[4].uint8);
    724          }
    725          
    726          /**************************************************************************//**
    727          \brief Processes Get scene membership command
    728          
    729          \param[in] args - array of command arguments
    730          ******************************************************************************/
    731          static void processGetSceneMembershipCmd(const ScanValue_t *args)
    732          {
    733            scenesSendGetSceneMembership(determineAddressMode(args), args[1].uint16, args[2].uint8,
    734              args[3].uint16);
    735          }
    736          
    737          /**************************************************************************//**
    738          \brief Processes Configure specified cluster attribute reporting command
    739          
    740          \param[in] args - array of command arguments
    741          ******************************************************************************/
    742          static void processConfigureReportingCmd(const ScanValue_t *args)
    743          {
    744            switch(args[3].uint16) //cluster Id
    745            {
    746              case TEMPERATURE_MEASUREMENT_CLUSTER_ID:
    747                temperatureMeasurementConfigureReporting(determineAddressMode(args), args[1].uint16, args[2].uint8,
    748                  args[4].uint16, args[5].uint8, args[6].uint16, args[7].uint16);
    749                break;
    750              case OCCUPANCY_SENSING_CLUSTER_ID:
    751                occupancySensingConfigureReporting(determineAddressMode(args), args[1].uint16, args[2].uint8,
    752                  args[4].uint16, args[5].uint8, args[6].uint16, args[7].uint16);
    753                break;
    754              case HUMIDITY_MEASUREMENT_CLUSTER_ID:
    755                humidityMeasurementConfigureReporting(determineAddressMode(args), args[1].uint16, args[2].uint8,
    756                  args[4].uint16, args[5].uint8, args[6].uint16, args[7].uint16);
    757                break;
    758              case ILLUMINANCE_MEASUREMENT_CLUSTER_ID:
    759                illuminanceMeasurementConfigureReporting(determineAddressMode(args), args[1].uint16, args[2].uint8,
    760                  args[4].uint16, args[5].uint8, args[6].uint16, args[7].uint16);
    761                break;
    762              case THERMOSTAT_CLUSTER_ID:
    763                thermostatConfigureReporting(determineAddressMode(args), args[1].uint16, args[2].uint8,
    764                  args[4].uint16, args[5].uint8, args[6].uint16, args[7].uint16);
    765                break;
    766              case POWER_CONFIGURATION_CLUSTER_ID:
    767                powerConfigConfigureReporting(determineAddressMode(args), args[1].uint16, args[2].uint8,
    768                  args[4].uint16, args[5].uint8, args[6].uint16, args[7].uint16);
    769                break;
    770              case LEVEL_CONTROL_CLUSTER_ID:
    771                levelControlConfigureReporting(determineAddressMode(args), args[1].uint16, args[2].uint8,
    772                  args[4].uint16, args[5].uint8, args[6].uint16, args[7].uint16);
    773                break;
    774              case ONOFF_CLUSTER_ID:
    775                onOffConfigureReporting(determineAddressMode(args), args[1].uint16, args[2].uint8,
    776                  args[4].uint16, args[5].uint8, args[6].uint16, args[7].uint16);
    777                break;
    778              default:
    779                {
    780                  LOG_STRING(unsupportedClusterIdStr, "Unsupported Cluster Id \r\n");
    781                  appSnprintf(unsupportedClusterIdStr);
    782                }
    783                break;
    784            }
    785          }
    786          
    787          /**************************************************************************//**
    788          \brief Processes request for device type obtaining
    789          
    790          \param[in] args - array of command arguments
    791          ******************************************************************************/
    792          static void processGetDeviceTypeCmd(const ScanValue_t *args)
    793          {
    794            (void)args;
    795            LOG_STRING(deviceFnStatusStr, "DeviceType = %d\r\n");
    796            appSnprintf(deviceFnStatusStr, TEST_DEVICE_TYPE_HA_TC);
    797          }
    798          
    799          #ifndef ZAPPSI_HOST
    800          /**************************************************************************//**
    801          \brief Processes pseudo power off command
    802          
    803          \param[in] args - array of command arguments
    804          ******************************************************************************/
    805          static void processPseudoPowerOffCmd(const ScanValue_t *args)
    806          {
    807            (void)args;
    808            /* Disable BitCloud tasks for preventing calls to the radio.
    809               HAL is enabled so it it allows to receive commands through UART. */
    810            SYS_DisableTask(ZDO_TASK_ID);
    811            SYS_DisableTask(APS_TASK_ID);
    812            SYS_DisableTask(NWK_TASK_ID);
    813            SYS_DisableTask(MAC_PHY_HWD_TASK_ID);
    814          }
    815          
    816          /**************************************************************************//**
    817          \brief Processes reset to factory fresh
    818          
    819          \param[in] args - array of command arguments
    820          ******************************************************************************/
    821          static void processResetToFactoryFreshCmd(const ScanValue_t *args)
    822          {
    823            (void)args;
    824          #ifndef ZAPPSI_HOST
    825            PDS_DeleteAll(false);
    826          
    827            HAL_WarmReset();
    828          #endif
    829          }
    830          #endif
    831          
    832          /**************************************************************************//**
    833          \brief Processes Set Permit Join command
    834          
    835          \param[in] args - array of command arguments
    836          ******************************************************************************/
    837          static void processSetPermitJoinCmd(const ScanValue_t *args)
    838          {
    839            ZDO_MgmtPermitJoiningReq_t *permit = &zdpReq.req.reqPayload.mgmtPermitJoiningReq;
    840          
    841            zdpReq.ZDO_ZdpResp = zdoPermitJoiningResponse;
    842            zdpReq.reqCluster = MGMT_PERMIT_JOINING_CLID;
    843            zdpReq.dstAddrMode = APS_SHORT_ADDRESS;
    844          
    845            zdpReq.dstAddress.shortAddress = NWK_GetShortAddr();
    846          
    847            permit->permitDuration = args[0].uint8;
    848            permit->tcSignificance = 0x01;
    849          
    850            ZDO_ZdpReq(&zdpReq);
    851          }
    852          
    853          /**************************************************************************//**
    854          \brief ZDP device announce response callback
    855          
    856          \param[in] leaveResp - pointer to response structure
    857          ******************************************************************************/
    858          static void zdoPermitJoiningResponse(ZDO_ZdpResp_t *resp)
    859          {
    860            LOG_STRING(permitJoinDoneStr, "setPermitJoinRsp %d\r\n");
    861            appSnprintf(permitJoinDoneStr, resp->respPayload.status);
    862          }
    863          
    864          /**************************************************************************//**
    865          \brief Processes Setpoint Change command
    866          
    867          \param[in] args - array of command arguments
    868          ******************************************************************************/
    869          static void processSetPointChangeCmd(const ScanValue_t *args)
    870          {
    871            ciSendSetpointRaiseLowerCommand(determineAddressMode(args),args[1].uint16,
    872              args[2].uint8,args[3].int8,args[4].int8);
    873          }
    874          
    875          /**************************************************************************//**
    876          \brief Processes reset To factory defaults command
    877          
    878          \param[in] args - array of command arguments
    879          ******************************************************************************/
    880          static void processResetToFactoryDefaultsCmd(const ScanValue_t *args)
    881          {
    882            basicResetToFactoryDefaultsCommand(determineAddressMode(args),args[1].uint16,
    883              args[2].uint8);
    884          }
    885          /**************************************************************************//**
    886          \brief Processes reset alarm command
    887          
    888          \param[in] args - array of command arguments
    889          ******************************************************************************/
    890          static void processResetAlarmCmd(const ScanValue_t *args)
    891          {
    892            alarmsSendResetAlarm(determineAddressMode(args),args[1].uint16,
    893              args[2].uint8, args[3].uint16, args[4].uint8);
    894          }
    895          /**************************************************************************//**
    896          \brief Processes reset To factory defaults command
    897          
    898          \param[in] args - array of command arguments
    899          ******************************************************************************/
    900          static void processAlarmCmds(const ScanValue_t *args)
    901          {
    902            if (!memcmp("resetAllAlarms", args[3].str, 14))
    903            {
    904              alarmsSendResetAllAlarms(determineAddressMode(args),args[1].uint16,
    905              args[2].uint8);
    906            }
    907            else if (!memcmp("getAlarm", args[3].str, 8))
    908            {
    909              alarmsSendGetAlarm(determineAddressMode(args),args[1].uint16,
    910              args[2].uint8);
    911            }
    912            else if (!memcmp("resetAlarmLog", args[3].str, 13))
    913            {
    914              alarmsSendResetAlarmLog(determineAddressMode(args),args[1].uint16,
    915              args[2].uint8);
    916            }
    917          }
    918          /**************************************************************************//**
    919          \brief Process set UTC time command
    920          
    921          \param[in] args - array of command arguments
    922          ******************************************************************************/
    923          static void processSetUTCTimeCmd(const ScanValue_t *args)
    924          {
    925            dateTime_t tempDateTime;
    926            parseDateTime(args[0].str,&tempDateTime);
    927            timeSetTimeAttribute(tempDateTime);
    928          }
    929          /**************************************************************************//**
    930          \brief Process read UTC time command
    931          
    932          \param[in] args - array of command arguments
    933          ******************************************************************************/
    934          static void processReadTimeCmd(const ScanValue_t *args)
    935          {
    936            LOG_STRING(readTimeStr, "currentUTCTime - 0x%08lx\r\n");
    937            appSnprintf(readTimeStr,(unsigned long int)timeReadTimeAttribute());
    938            (void)args;
    939          }
    940          /**************************************************************************//**
    941          \brief Process set time zone and DST attributes
    942          
    943          \param[in] args - array of command arguments
    944          ******************************************************************************/
    945          static void processSetTimeZoneAndDST(const ScanValue_t *args)
    946          {
    947            dateTime_t tempDateTime;
    948            int32_t timeZone;
    949            uint32_t dstStart;
    950            uint32_t dstEnd;
    951            int32_t dstShift;
    952            
    953            timeZone = args[0].int32;
    954            parseDateTime(args[1].str,&tempDateTime);
    955            dstStart = timeCalculateUTCTime(&tempDateTime);
    956            parseDateTime(args[2].str,&tempDateTime);
    957            dstEnd = timeCalculateUTCTime(&tempDateTime);
    958            dstShift = args[3].int32;
    959            timeSetTimezoneAndDSTAttributes(timeZone, dstStart, dstEnd, dstShift);
    960          }
    961          /**************************************************************************//**
    962          \brief Process set time status bits
    963          
    964          \param[in] args - array of command arguments
    965          ******************************************************************************/
    966          static void processSetTimeStatus(const ScanValue_t *args)
    967          {
    968            timeSetTimeStatus(args[0].uint8, args[1].uint8, args[2].uint8, args[3].uint8);
    969          }
    970          /**************************************************************************//**
    971          \brief Parse the user string dd:mm:yy:hr:min:sec
    972          
    973          \param[in] args - array of command arguments
    974          ******************************************************************************/
    975          static void parseDateTime(char *str, dateTime_t *tempDateTime)
    976          {
    977            tempDateTime->date = (str[0]-'0') * 10 + (str[1]-'0');
    978            tempDateTime->month = (str[3]-'0') * 10 + (str[4]-'0');
    979            tempDateTime->year = (str[6]-'0') * 1000 + (str[7]-'0') * 100 + (str[8]-'0') * 10 + (str[9]-'0');
    980            tempDateTime->hour = (str[11]-'0') * 10 + (str[12]-'0');
    981            tempDateTime->minute = (str[14]-'0') * 10 + (str[15]-'0');
    982            tempDateTime->seconds = (str[17]-'0') * 10 + (str[18]-'0');
    983          }
    984          
    985          /**************************************************************************//**
    986          \brief To set a new entended address
    987          
    988          \param[in] args - extended address
    989          ******************************************************************************/
    990          static void processSetExtAddr(const ScanValue_t *args)
    991          {
    992            ExtAddr_t changeExtAddr = 0;
    993            memcpy(&changeExtAddr, (void *)&args[0].uint8,4);
    994            CS_WriteParameter(CS_UID_ID , &changeExtAddr);
    995            csPIB.macAttr.extAddr = changeExtAddr;
    996          }
    997          
    998          /**************************************************************************//**
    999          \brief Processes ACE Get Panel Status Change Command
   1000          
   1001          \param[in] args - array of command arguments
   1002          ******************************************************************************/
   1003          static void processACEGetPanelStatusChangedCommand(const ScanValue_t *args)
   1004          {
   1005              acePanelStatusChangedCommand(determineAddressMode(args), args[1].uint16, args[2].uint8,
   1006              args[3].uint8, args[4].uint8, args[5].uint8, args[6].uint8);
   1007          }
   1008          
   1009          /**************************************************************************//**
   1010          \brief Processes ACE Get Zone Status Change Command
   1011          
   1012          \param[in] args - array of command arguments
   1013          ******************************************************************************/
   1014          static void processACEGetZoneStatusChangedCommand(const ScanValue_t *args)
   1015          {
   1016              aceZoneStatusChangedCommand(determineAddressMode(args), args[1].uint16, args[2].uint8,
   1017              args[3].uint8, args[4].uint8, args[5].uint8, args[6].uint16);  
   1018          }
   1019          
   1020          /**************************************************************************//**
   1021          \brief Processes Zone Initiate Normal Operating Mode Command
   1022          
   1023          \param[in] args - array of command arguments
   1024          ******************************************************************************/
   1025          static void processZoneInitiateNormalOperatingModeCommand(const ScanValue_t *args)
   1026          {
   1027            ZoneInitiateNormalOperatingModeCommand(determineAddressMode(args), args[1].uint16, args[2].uint8);
   1028          }
   1029          
   1030          /**************************************************************************//**
   1031          \brief Processes Zone Initiate Test Mode Command
   1032          
   1033          \param[in] args - array of command arguments
   1034          ******************************************************************************/
   1035          static void processZoneInitiateTestModeCommand(const ScanValue_t *args)
   1036          {
   1037            ZoneInitiateTestModeCommand(determineAddressMode(args), args[1].uint16, args[2].uint8, args[3].uint8, args[4].uint8);
   1038          }
   1039          
   1040          #ifndef ZAPPSI_HOST
   1041          /**************************************************************************//**
   1042          \brief Processes Restart Network command
   1043          
   1044          \param[in] args - array of command arguments
   1045          ******************************************************************************/
   1046          static void processRestartNwkCmd(const ScanValue_t *args)
   1047          {
   1048            CS_WriteParameter(CS_CHANNEL_MASK_ID, &(uint32_t){1ul << args[0].uint8});
   1049          
   1050            appRestart(false);
   1051          }
   1052          #endif
   1053          
   1054          #endif // APP_ENABLE_CONSOLE == 1
   1055          #endif // APP_DEVICE_TYPE_COMBINED_INTERFACE
   1056          
   1057          // eof ciConsole.c


 

 


Errors: none
Warnings: none
