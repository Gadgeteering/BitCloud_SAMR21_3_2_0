###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:40:13
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\common\src\commandManager.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\common\src\commandManager.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\commandManager.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\commandManager.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\common\src\commandManager.c
      1          /**************************************************************************//**
      2            \file commandManager.c
      3          
      4            \brief
      5              Command manager implementation.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16              11.12.12 N.Fomin - Created.
     17          ******************************************************************************/
     18          
     19          /******************************************************************************
     20                              Includes section
     21          ******************************************************************************/
     22          #include <sysUtils.h>
     23          #include <commandManager.h>
     24          #include <zclIdentifyCluster.h>
     25          #include <zclLevelControlCluster.h>
     26          #include <zclGroupsCluster.h>
     27          #include <zclScenesCluster.h>
     28          #include <zclIasZoneCluster.h>
     29          #include <zclIasACECluster.h>
     30          #include <zclOnOffCluster.h>
     31          #include <zclThermostatCluster.h>
     32          #include <dlScenes.h>
     33          #include <uartManager.h>
     34          
     35          /******************************************************************************
     36                              Definitions section
     37          ******************************************************************************/
     38          #define COMMAND_BUFFERS_AMOUNT 12
     39          #define ALL_ATTRIBUTES_ARE_WRITTEN 1
     40          
     41          /******************************************************************************
     42                              Types section
     43          ******************************************************************************/
     44          BEGIN_PACK
     45          typedef union PACK
     46          {
     47            ZCL_GetGroupMembership_t getGroupMembership;
     48            uint8_t                  payload[sizeof(ZCL_GetGroupMembership_t) - sizeof(uint16_t) + CS_GROUP_TABLE_SIZE * sizeof(uint16_t)];
     49                                             /* own structure size */           /* size of stub */  /* up to CS_GROUP_TABLE_SIZE groups in list */
     50          } GetGroupMemeberShip_t;
     51          
     52          typedef union PACK
     53          {
     54            ZCL_GetGroupMembershipResponse_t getGroupMembershipResponse;
     55            uint8_t                          payload[sizeof(ZCL_GetGroupMembershipResponse_t) - sizeof(uint16_t) + CS_GROUP_TABLE_SIZE * sizeof(uint16_t)];
     56                                                     /* own structure size */                 /* size of stub */  /* up to CS_GROUP_TABLE_SIZE groups in list */
     57          } GetGroupMembershipResponse_t;
     58          
     59          typedef union PACK
     60          {
     61            struct PACK
     62            {
     63              ZCL_OnOffClusterExtensionFieldSet_t    onOffExtFields;
     64              ZCL_LevelControlSceneExtensionFields_t levelControlExtFields;
     65            } onOffLevelControlExt;
     66            struct PACK
     67            {
     68              ZCL_ThermostatClusterExtensionFieldSet_t thermostatExtFields;
     69            } thermostatExt;
     70          } SceneExtFields_t;
     71          
     72          typedef union PACK
     73          {
     74            ZCL_AddScene_t addScene;
     75            uint8_t        payload[sizeof(ZCL_AddScene_t) + sizeof(SceneExtFields_t)];
     76                                   /* own structure size */ /* size of ext fields */
     77          } AddScene_t;
     78          
     79          typedef union PACK
     80          {
     81            ZCL_ViewSceneResponse_t viewSceneResponse;
     82            uint8_t                 payload[sizeof(ZCL_ViewSceneResponse_t) + sizeof(SceneExtFields_t)];
     83                                            /* own structure size */          /* size of ext fields */
     84          } ViewSceneResponse_t;
     85          
     86          typedef union PACK
     87          {
     88            ZCL_GetSceneMembershipResponse_t getSceneMembershupResponse;
     89            uint8_t                          payload[sizeof(ZCL_GetSceneMembershipResponse_t) - sizeof(uint8_t) + MAX_SCENES_AMOUNT * sizeof(uint8_t)];
     90                                                    /* own structure size */                    /* size of stub */ /* up to MAX_SCENES_AMOUNT in list */
     91          } GetSceneMembershipResponse_t;
     92          END_PACK
     93          
     94          typedef union
     95          {
     96            // Identify Cluster
     97            ZCL_Identify_t                 identify;
     98            ZCL_IdentifyQueryResponse_t    identifyQueryResponse;
     99            ZCL_EzModeInvoke_t             ezModeInvoke;
    100            ZCL_UpdateCommissioningState_t updateCommissioningState;
    101            // Level Control Cluster
    102            ZCL_MoveToLevel_t              moveToLevel;
    103            ZCL_Move_t                     move;
    104            ZCL_Step_t                     step;
    105            // Groups Cluster
    106            ZCL_AddGroup_t                 addGroup;
    107            ZCL_ViewGroup_t                viewGroup;
    108            GetGroupMemeberShip_t          getGroupMembership;
    109            ZCL_RemoveGroup_t              removeGroup;
    110            ZCL_AddGroupIfIdentifying_t    addGroupIfIdentifying;
    111            ZCL_AddGroupResponse_t         addGroupResponse;
    112            ZCL_ViewGroupResponse_t        viewGroupResponse;
    113            GetGroupMembershipResponse_t   getGroupMembershipResponse;
    114            ZCL_RemoveGroupResponse_t      removeGroupResponse;
    115            // Scenes cluster
    116            AddScene_t                     addScene;
    117            ZCL_ViewScene_t                viewScene;
    118            ZCL_RemoveScene_t              removeScene;
    119            ZCL_RemoveAllScenes_t          removeAllScenes;
    120            ZCL_StoreScene_t               storeScene;
    121            ZCL_RecallScene_t              recallScene;
    122            ZCL_GetSceneMembership_t       getSceneMembership;
    123            ZCL_AddSceneResponse_t         addSceneResponse;
    124            ViewSceneResponse_t            viewSceneResponse;
    125            ZCL_RemoveSceneResponse_t      removeSceneResponse;
    126            ZCL_RemoveAllScenesResponse_t  removeAllScenesResponse;
    127            ZCL_StoreSceneResponse_t       storeSceneResponse;
    128            GetSceneMembershipResponse_t   getSceneMembershupResponse;
    129          } Command_t;
    130          
    131          typedef struct
    132          {
    133            ZCL_Request_t zclRequest;
    134            Command_t     zclCommand;
    135            bool          busy;
    136            void (*ZCL_Notify)(ZCL_Notify_t *ntfy);
    137          } ZclCommandDescriptor_t;
    138          
    139          /******************************************************************************
    140                              Prototypes section
    141          ******************************************************************************/
    142          static void commandZclRequestResp(ZCL_Notify_t *ntfy);
    143          
    144          /******************************************************************************
    145                              Local variables section
    146          ******************************************************************************/

   \                                 In section .bss, align 8
    147          static ZclCommandDescriptor_t zclCommands[COMMAND_BUFFERS_AMOUNT];
   \                     zclCommands:
   \   00000000                      DS8 1440
    148          
    149          /******************************************************************************
    150                              Implementations section
    151          ******************************************************************************/
    152          /**************************************************************************//**
    153          \brief Initializes command manager
    154          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    155          void commandManagerInit(void)
    156          {
    157            for (uint8_t i = 0; i < COMMAND_BUFFERS_AMOUNT; i++)
   \                     commandManagerInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x....             LDR      R2,??DataTable5
    158              zclCommands[i].busy = false;
   \                     ??commandManagerInit_0: (+1)
   \   00000006   0x2378             MOVS     R3,#+120
   \   00000008   0x434B             MULS     R3,R1,R3
   \   0000000A   0x18D3             ADDS     R3,R2,R3
   \   0000000C   0x336D             ADDS     R3,R3,#+109
   \   0000000E   0x7018             STRB     R0,[R3, #+0]
   \   00000010   0x1C49             ADDS     R1,R1,#+1
   \   00000012   0x290C             CMP      R1,#+12
   \   00000014   0xDBF7             BLT      ??commandManagerInit_0
    159          }
   \   00000016   0x4770             BX       LR               ;; return
    160          
    161          /**************************************************************************//**
    162          \brief Gets a free buffer for a ZCL command
    163          
    164          \return A pointer to a command's buffer or NULL if no free buffers are left
    165          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    166          ZCL_Request_t *commandManagerAllocCommand(void)
    167          {
   \                     commandManagerAllocCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    168            uint8_t i = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    169          
    170            for (; i < COMMAND_BUFFERS_AMOUNT; i++)
    171            {
    172              if (!zclCommands[i].busy)
   \                     ??commandManagerAllocCommand_0: (+1)
   \   00000004   0x....             LDR      R1,??DataTable5
   \   00000006   0x2278             MOVS     R2,#+120
   \   00000008   0x4342             MULS     R2,R0,R2
   \   0000000A   0x188C             ADDS     R4,R1,R2
   \   0000000C   0x216D             MOVS     R1,#+109
   \   0000000E   0x5C61             LDRB     R1,[R4, R1]
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD110             BNE      ??commandManagerAllocCommand_1
    173              {
    174                zclCommands[i].busy = true;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x216D             MOVS     R1,#+109
   \   00000018   0x5460             STRB     R0,[R4, R1]
    175                memset(&zclCommands[i].zclRequest, 0, sizeof(ZCL_Request_t));
   \   0000001A   0x2158             MOVS     R1,#+88
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       __aeabi_memclr
    176                memset(&zclCommands[i].zclCommand, 0, sizeof(Command_t));
   \   00000022   0x2115             MOVS     R1,#+21
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x3058             ADDS     R0,R0,#+88
   \   00000028   0x.... 0x....      BL       __aeabi_memclr
    177                zclCommands[i].zclRequest.requestPayload = (uint8_t *)&zclCommands[i].zclCommand;
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x3058             ADDS     R0,R0,#+88
   \   00000030   0x64E0             STR      R0,[R4, #+76]
    178                return &zclCommands[i].zclRequest;
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0xBD10             POP      {R4,PC}
    179              }
    180            }
   \                     ??commandManagerAllocCommand_1: (+1)
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xB2C0             UXTB     R0,R0
   \   0000003A   0x280C             CMP      R0,#+12
   \   0000003C   0xDBE2             BLT      ??commandManagerAllocCommand_0
    181          
    182            return NULL;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
    183          
    184          }
    185          
    186          /**************************************************************************//**
    187          \brief Sends command request
    188          \param[in] req - request parameters
    189          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    190          void commandManagerSendCommand(ZCL_Request_t *req)
    191          {
   \                     commandManagerSendCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    192            ZclCommandDescriptor_t *command = GET_PARENT_BY_FIELD(ZclCommandDescriptor_t, zclRequest, req);
    193          
    194            command->ZCL_Notify = req->ZCL_Notify;
   \   00000002   0x6981             LDR      R1,[R0, #+24]
   \   00000004   0x6701             STR      R1,[R0, #+112]
    195            req->ZCL_Notify     = commandZclRequestResp;
   \   00000006   0x....             LDR      R1,??DataTable5_1
   \   00000008   0x6181             STR      R1,[R0, #+24]
    196          
    197            ZCL_CommandReq(req);
   \   0000000A   0x.... 0x....      BL       ZCL_CommandReq
    198          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    199          
    200          /**************************************************************************//**
    201          \brief Sends attribute request
    202          \param[in] req - request parameters
    203          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    204          void commandManagerSendAttribute(ZCL_Request_t *req)
    205          {
   \                     commandManagerSendAttribute: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    206            ZclCommandDescriptor_t *command = GET_PARENT_BY_FIELD(ZclCommandDescriptor_t, zclRequest, req);
    207          
    208            command->ZCL_Notify = req->ZCL_Notify;
   \   00000002   0x6981             LDR      R1,[R0, #+24]
   \   00000004   0x6701             STR      R1,[R0, #+112]
    209            req->ZCL_Notify     = commandZclRequestResp;
   \   00000006   0x....             LDR      R1,??DataTable5_1
   \   00000008   0x6181             STR      R1,[R0, #+24]
    210          
    211            ZCL_AttributeReq(req);
   \   0000000A   0x.... 0x....      BL       ZCL_AttributeReq
    212          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    213          
    214          /**************************************************************************//**
    215          \brief ZCL command response
    216          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    217          static void commandZclRequestResp(ZCL_Notify_t *ntfy)
    218          {
   \                     commandZclRequestResp: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x0004             MOVS     R4,R0
    219            ZclCommandDescriptor_t *command = GET_PARENT_BY_FIELD(ZclCommandDescriptor_t, zclRequest.notify, ntfy);
   \   00000006   0x0026             MOVS     R6,R4
   \   00000008   0x3E08             SUBS     R6,R6,#+8
   \   0000000A   0x0037             MOVS     R7,R6
    220          
    221            if (ZCL_APS_CONFIRM_ID == ntfy->id && ZCL_SUCCESS_STATUS != ntfy->status)
   \   0000000C   0x2500             MOVS     R5,#+0
   \   0000000E   0x7860             LDRB     R0,[R4, #+1]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD10B             BNE      ??commandZclRequestResp_0
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD031             BEQ      ??commandZclRequestResp_1
    222            {
    223              LOG_STRING(zclConfStr, "ZclConfirm: status = 0x%02x\r\n");
   \   0000001A   0xA803             ADD      R0,SP,#+12
   \   0000001C   0x....             ADR.N    R1,?_0
   \   0000001E   0x2220             MOVS     R2,#+32
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy4
    224              appSnprintf(zclConfStr, ntfy->status);
   \   00000024   0x7821             LDRB     R1,[R4, #+0]
   \   00000026   0xA803             ADD      R0,SP,#+12
   \   00000028   0x.... 0x....      BL       appSnprintf
    225            }
    226            if (ZCL_ZCL_RESPONSE_ID == ntfy->id)
   \                     ??commandZclRequestResp_0: (+1)
   \   0000002C   0x7860             LDRB     R0,[R4, #+1]
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD125             BNE      ??commandZclRequestResp_1
    227            {
    228              ZCL_Request_t *req = GET_STRUCT_BY_FIELD_POINTER(ZCL_Request_t, notify, ntfy);
    229              LOG_STRING(zclRespStr, "ZclResponse: status = 0x%02x\r\n");
   \   00000032   0xA803             ADD      R0,SP,#+12
   \   00000034   0x....             ADR.N    R1,?_1
   \   00000036   0x2220             MOVS     R2,#+32
   \   00000038   0x.... 0x....      BL       __aeabi_memcpy4
    230          
    231              if ((ZCL_WRITE_ATTRIBUTES_COMMAND_ID == req->id ||
    232                   ZCL_WRITE_ATTRIBUTES_UNDIVIDED_COMMAND_ID == req->id) &&
    233                  ALL_ATTRIBUTES_ARE_WRITTEN != req->notify.responseLength)
   \   0000003C   0x2049             MOVS     R0,#+73
   \   0000003E   0x5C30             LDRB     R0,[R6, R0]
   \   00000040   0x2802             CMP      R0,#+2
   \   00000042   0xD001             BEQ      ??commandZclRequestResp_2
   \   00000044   0x2803             CMP      R0,#+3
   \   00000046   0xD116             BNE      ??commandZclRequestResp_3
   \                     ??commandZclRequestResp_2: (+1)
   \   00000048   0x7C30             LDRB     R0,[R6, #+16]
   \   0000004A   0x2801             CMP      R0,#+1
   \   0000004C   0xD013             BEQ      ??commandZclRequestResp_3
    234              {
    235                ZCL_NextElement_t element;
    236                ZCL_WriteAttributeResp_t *writeAttributeResp;
    237          
    238                element.id            = ZCL_WRITE_ATTRIBUTES_RESPONSE_COMMAND_ID;
   \   0000004E   0x466E             MOV      R6,SP
   \   00000050   0x2004             MOVS     R0,#+4
   \   00000052   0x7030             STRB     R0,[R6, #+0]
    239                element.payloadLength = ntfy->responseLength;
   \   00000054   0x7A20             LDRB     R0,[R4, #+8]
   \   00000056   0x7070             STRB     R0,[R6, #+1]
    240                element.payload       = ntfy->responsePayload;
   \   00000058   0x68E0             LDR      R0,[R4, #+12]
   \   0000005A   0x9001             STR      R0,[SP, #+4]
    241                element.content       = NULL;
   \                     ??commandZclRequestResp_4: (+1)
   \   0000005C   0x9502             STR      R5,[SP, #+8]
    242          
    243                while (element.payloadLength)
   \   0000005E   0x7870             LDRB     R0,[R6, #+1]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD00C             BEQ      ??commandZclRequestResp_1
    244                {
    245                  ZCL_GetNextElement(&element);
   \   00000064   0x4668             MOV      R0,SP
   \   00000066   0x.... 0x....      BL       ZCL_GetNextElement
    246                  writeAttributeResp = (ZCL_WriteAttributeResp_t *) element.content;
    247                  appSnprintf(zclRespStr, writeAttributeResp->status);
   \   0000006A   0x9802             LDR      R0,[SP, #+8]
   \   0000006C   0x7801             LDRB     R1,[R0, #+0]
   \   0000006E   0xA803             ADD      R0,SP,#+12
   \   00000070   0x.... 0x....      BL       appSnprintf
    248                  element.content = NULL;
   \   00000074   0xE7F2             B        ??commandZclRequestResp_4
    249                }
    250          
    251                (void)writeAttributeResp;
    252              }
    253              else
    254                appSnprintf(zclRespStr, ntfy->status);
   \                     ??commandZclRequestResp_3: (+1)
   \   00000076   0x7821             LDRB     R1,[R4, #+0]
   \   00000078   0xA803             ADD      R0,SP,#+12
   \   0000007A   0x.... 0x....      BL       appSnprintf
    255            }
    256          
    257            if (command->ZCL_Notify)
   \                     ??commandZclRequestResp_1: (+1)
   \   0000007E   0x6F39             LDR      R1,[R7, #+112]
   \   00000080   0x0008             MOVS     R0,R1
   \   00000082   0xD001             BEQ      ??commandZclRequestResp_5
    258              command->ZCL_Notify(ntfy);
   \   00000084   0x0020             MOVS     R0,R4
   \   00000086   0x4788             BLX      R1
    259          
    260            command->busy = false;
   \                     ??commandZclRequestResp_5: (+1)
   \   00000088   0x376D             ADDS     R7,R7,#+109
   \   0000008A   0x703D             STRB     R5,[R7, #+0]
    261          }
   \   0000008C   0xB00B             ADD      SP,SP,#+44
   \   0000008E   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     zclCommands

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     commandZclRequestResp

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x5A 0x63          DC8 "ZclConfirm: status = 0x%02x\015\012"
   \              0x6C 0x43    
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x72 0x6D    
   \              0x3A 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x5A 0x63          DC8 "ZclResponse: status = 0x%02x\015\012"
   \              0x6C 0x52    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x3A    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x3D 0x20    
   \              0x30 0x78    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0
    262          
    263          // eof commandManager.c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   commandManagerAllocCommand
         8   -> __aeabi_memclr
       0   commandManagerInit
       8   commandManagerSendAttribute
         8   -> ZCL_AttributeReq
       8   commandManagerSendCommand
         8   -> ZCL_CommandReq
      64   commandZclRequestResp
        64   -- Indirect call
        64   -> ZCL_GetNextElement
        64   -> __aeabi_memcpy4
        64   -> appSnprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
      32  ?_0
      32  ?_1
      66  commandManagerAllocCommand
      24  commandManagerInit
      16  commandManagerSendAttribute
      16  commandManagerSendCommand
     144  commandZclRequestResp
    1440  zclCommands

 
 1 440 bytes in section .bss
   338 bytes in section .text
 
   338 bytes of CODE memory
 1 440 bytes of DATA memory

Errors: none
Warnings: none
