###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:40:55
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thAlarmsCluster.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thAlarmsCluster.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\thAlarmsCluster.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\thAlarmsCluster.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thAlarmsCluster.c
      1          /**************************************************************************//**
      2            \file thAlarmCluster.c
      3          
      4            \brief
      5              Thermostat Alarm cluster implementation.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16              20/10/2014 Agasthian - Created.
     17          ******************************************************************************/
     18          #ifdef APP_DEVICE_TYPE_THERMOSTAT
     19          
     20          /******************************************************************************
     21                              Includes section
     22          ******************************************************************************/
     23          #include <thAlarmsCluster.h>
     24          #include <haClusters.h>
     25          #include <uartManager.h>
     26          #include <commandManager.h>
     27          #include <pdsDataServer.h>
     28          #include <zclDevice.h>
     29          
     30          /******************************************************************************
     31                              Definition(s) section
     32          ******************************************************************************/
     33          #define ALARM_TABLE_SIZE 4u
     34          
     35          /******************************************************************************
     36                              Prototypes section
     37          ******************************************************************************/
     38          static ZCL_Status_t resetAlarmInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_ResetAlarm_t *payload);
     39          static ZCL_Status_t resetAllAlarmsInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, uint8_t *payload);
     40          static ZCL_Status_t getAlarmInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, uint8_t *payload);
     41          static ZCL_Status_t resetAlarmLogInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, uint8_t *payload);
     42          static void addAlarmEntry(uint8_t alarmCode, ClusterId_t clusterId);
     43          static void removeAlarmEntry();
     44          static void alarmNotificationResp(ZCL_Notify_t *ntfy);
     45          
     46          /******************************************************************************
     47                              Global variables section
     48          ******************************************************************************/

   \                                 In section .data, align 4
     49          ZCL_AlarmsClusterServerAttributes_t thAlarmsClusterServerAttributes =
     50          {
     51            ZCL_DEFINE_ALARMS_CLUSTER_SERVER_ATTRIBUTES()
     52          };
     53          ZCL_AlarmsClusterServerCommands_t   thAlarmsClusterServerCommands =
     54          {
     55            ZCL_DEFINE_ALARMS_CLUSTER_SERVER_COMMANDS(resetAlarmInd, resetAllAlarmsInd, getAlarmInd, resetAlarmLogInd)
     56          };
     57          
     58          /******************************************************************************
     59                              Static variables section
     60          ******************************************************************************/
     61          ZCL_AlarmEntry_t thAlarmTable[ALARM_TABLE_SIZE];
   \                     thAlarmTable:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     thAlarmsClusterServerAttributes:
   \   0000001C   0x0000             DC16 0
   \   0000001E   0x21 0x02          DC8 33, 2, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     thAlarmsClusterServerCommands:
   \   00000000   0x00 0x10          DC8 0, 16, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 resetAlarmInd
   \   00000008   0x01 0x10          DC8 1, 16, 0, 0
   \              0x00 0x00    
   \   0000000C   0x........         DC32 resetAllAlarmsInd
   \   00000010   0x02 0x14          DC8 2, 20, 0, 0
   \              0x00 0x00    
   \   00000014   0x........         DC32 getAlarmInd
   \   00000018   0x03 0x10          DC8 3, 16, 0, 0
   \              0x00 0x00    
   \   0000001C   0x........         DC32 resetAlarmLogInd
     62          
     63          /******************************************************************************
     64                              Implementation section
     65          ******************************************************************************/
     66          /**************************************************************************//**
     67          \brief Initializes Identify cluster
     68          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     69          void alarmsClusterInit(void)
     70          {
     71            thAlarmsClusterServerAttributes.alarmCount.value = 0;
   \                     alarmsClusterInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable8
   \   00000004   0x8408             STRH     R0,[R1, #+32]
     72          }
   \   00000006   0x4770             BX       LR               ;; return
     73          
     74          /**************************************************************************//**
     75          \brief Callback on receiving resetAllAlarm command
     76          
     77          \param[in] addressing - pointer to addressing information;
     78          \param[in] payloadLength - data payload length;
     79          \param[in] payload - data pointer
     80          
     81          \return status of indication routine
     82          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     83          static ZCL_Status_t resetAllAlarmsInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, uint8_t *payload)
     84          {
   \                     resetAllAlarmsInd: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
     85            BcZCLActionReq_t resetAllAlarmActionReq;
     86            ZCL_ResetAlarmNotification_t resetAllAlarmsNotification;
     87          
     88            LOG_STRING(resetAllAlarmStr, "<-resetAllAlarm\r\n");
   \   00000004   0xA804             ADD      R0,SP,#+16
   \   00000006   0xBF00             Nop      
   \   00000008   0x....             ADR.N    R1,?_0
   \   0000000A   0x2214             MOVS     R2,#+20
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
     89            appSnprintf(resetAllAlarmStr);
   \   00000010   0xA804             ADD      R0,SP,#+16
   \   00000012   0x.... 0x....      BL       appSnprintf
     90          
     91            resetAllAlarmsNotification.commandId = ZCL_ALARMS_CLUSTER_SERVER_RESET_ALL_ALARMS_COMMAND_ID;
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
     92            resetAllAlarmsNotification.clusterIdentifier = 0x00;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x8041             STRH     R1,[R0, #+2]
     93            resetAllAlarmsNotification.alarmCode = 0x00;
   \   00000020   0x7041             STRB     R1,[R0, #+1]
     94          
     95            // Raise event to the subscribers. They will reset all their alarms
     96            // If alarm is still active, they may initiate notification
     97            resetAllAlarmActionReq.action = ZCL_ACTION_RESET_ALARM_REQUEST;
   \   00000022   0x2004             MOVS     R0,#+4
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x8088             STRH     R0,[R1, #+4]
     98            resetAllAlarmActionReq.context = (const void *)&resetAllAlarmsNotification;
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x9002             STR      R0,[SP, #+8]
     99            SYS_PostEvent(BC_ZCL_EVENT_ACTION_REQUEST, (SYS_EventData_t)&resetAllAlarmActionReq);
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0x203A             MOVS     R0,#+58
   \   00000030   0x.... 0x....      BL       SYS_PostEvent
    100          
    101          
    102            (void)addressing, (void)payloadLength, (void)payload;
    103            return ZCL_SUCCESS_STATUS;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xB009             ADD      SP,SP,#+36
   \   00000038   0xBD00             POP      {PC}             ;; return
    104          }
    105          
    106          /**************************************************************************//**
    107          \brief Callback on receiving resetAlarm command
    108          
    109          \param[in] addressing - pointer to addressing information;
    110          \param[in] payloadLength - data payload length;
    111          \param[in] payload - data pointer
    112          
    113          \return status of indication routine
    114          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    115          static ZCL_Status_t resetAlarmInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_ResetAlarm_t *payload)
    116          {
   \                     resetAlarmInd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB090             SUB      SP,SP,#+64
   \   00000004   0x0014             MOVS     R4,R2
    117            BcZCLActionReq_t resetAlarmActionReq;
    118            ZCL_ResetAlarmNotification_t resetAlarmNotification;
    119          
    120            LOG_STRING(resetAlarmStr, "<-resetAlarm clusterId = 0x%x alarmCode = %d\r\n");
   \   00000006   0xA804             ADD      R0,SP,#+16
   \   00000008   0x....             ADR.N    R1,?_1
   \   0000000A   0x2230             MOVS     R2,#+48
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    121            appSnprintf(resetAlarmStr, payload->clusterIdentifier, payload->alarmCode);
   \   00000010   0x7861             LDRB     R1,[R4, #+1]
   \   00000012   0x78A0             LDRB     R0,[R4, #+2]
   \   00000014   0x0600             LSLS     R0,R0,#+24
   \   00000016   0x0C00             LSRS     R0,R0,#+16
   \   00000018   0x4301             ORRS     R1,R1,R0
   \   0000001A   0x7822             LDRB     R2,[R4, #+0]
   \   0000001C   0xA804             ADD      R0,SP,#+16
   \   0000001E   0x.... 0x....      BL       appSnprintf
    122          
    123            resetAlarmNotification.commandId = ZCL_ALARMS_CLUSTER_SERVER_RESET_ALARM_COMMAND_ID;
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x7001             STRB     R1,[R0, #+0]
    124            resetAlarmNotification.clusterIdentifier = payload->clusterIdentifier;
   \   00000028   0x7861             LDRB     R1,[R4, #+1]
   \   0000002A   0x78A2             LDRB     R2,[R4, #+2]
   \   0000002C   0x0612             LSLS     R2,R2,#+24
   \   0000002E   0x0C12             LSRS     R2,R2,#+16
   \   00000030   0x4311             ORRS     R1,R1,R2
   \   00000032   0x8041             STRH     R1,[R0, #+2]
    125            resetAlarmNotification.alarmCode = payload->alarmCode;
   \   00000034   0x7821             LDRB     R1,[R4, #+0]
   \   00000036   0x7041             STRB     R1,[R0, #+1]
    126          
    127            // Raise event to the subscribers. They will reset the alarm
    128            // If alarm is still active, they may initiate notification
    129            resetAlarmActionReq.action = ZCL_ACTION_RESET_ALARM_REQUEST;
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0x8088             STRH     R0,[R1, #+4]
    130            resetAlarmActionReq.context = (const void *)&resetAlarmNotification;
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x9002             STR      R0,[SP, #+8]
    131            SYS_PostEvent(BC_ZCL_EVENT_ACTION_REQUEST, (SYS_EventData_t)&resetAlarmActionReq);
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0x203A             MOVS     R0,#+58
   \   00000046   0x.... 0x....      BL       SYS_PostEvent
    132          
    133            (void)addressing, (void)payloadLength, (void)payload;
    134            return ZCL_SUCCESS_STATUS;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xB010             ADD      SP,SP,#+64
   \   0000004E   0xBD10             POP      {R4,PC}          ;; return
    135          }
    136          
    137          /**************************************************************************//**
    138          \brief Callback on receiving getAlarm command
    139          
    140          \param[in] addressing - pointer to addressing information;
    141          \param[in] payloadLength - data payload length;
    142          \param[in] payload - data pointer
    143          
    144          \return status of indication routine
    145          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    146          static ZCL_Status_t getAlarmInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, uint8_t *payload)
    147          {
   \                     getAlarmInd: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0006             MOVS     R6,R0
    148            ZCL_Request_t *req;
    149            ZCL_getAlarmResponse_t *getAlarmResponse;
    150            uint8_t reqLength;
    151          
    152            LOG_STRING(resetGetAlarmStr, "<-getAlarm\r\n");
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x....             ADR.N    R1,?_2
   \   0000000A   0x2210             MOVS     R2,#+16
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    153            appSnprintf(resetGetAlarmStr);
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x.... 0x....      BL       appSnprintf
    154          
    155            if (addressing->nonUnicast)
   \   00000016   0x2023             MOVS     R0,#+35
   \   00000018   0x5C30             LDRB     R0,[R6, R0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD131             BNE      ??getAlarmInd_0
    156              return ZCL_SUCCESS_STATUS;
    157          
    158            if (!(req = getFreeCommand()))
   \   0000001E   0x.... 0x....      BL       getFreeCommand
   \   00000022   0x0005             MOVS     R5,R0
   \   00000024   0xD101             BNE      ??getAlarmInd_1
    159              return ZCL_INSUFFICIENT_SPACE_STATUS;
   \   00000026   0x2089             MOVS     R0,#+137
   \   00000028   0xE02C             B        ??getAlarmInd_2
    160          
    161            getAlarmResponse = (ZCL_getAlarmResponse_t *)req->requestPayload;
   \                     ??getAlarmInd_1: (+1)
   \   0000002A   0x6CEF             LDR      R7,[R5, #+76]
    162          
    163            if (thAlarmsClusterServerAttributes.alarmCount.value)
   \   0000002C   0x....             LDR      R0,??DataTable8
   \   0000002E   0x8C01             LDRH     R1,[R0, #+32]
   \   00000030   0x2900             CMP      R1,#+0
   \   00000032   0xD015             BEQ      ??getAlarmInd_3
    164            {
    165              reqLength = sizeof(ZCL_getAlarmResponse_t);
   \   00000034   0x2408             MOVS     R4,#+8
    166              getAlarmResponse->status = ZCL_SUCCESS_STATUS;
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x7039             STRB     R1,[R7, #+0]
    167              getAlarmResponse->alarmCode = thAlarmTable[0].alarmCode;
   \   0000003A   0x7801             LDRB     R1,[R0, #+0]
   \   0000003C   0x7079             STRB     R1,[R7, #+1]
    168              getAlarmResponse->clusterIdentifier = thAlarmTable[0].clusterIdentifier;
   \   0000003E   0x7841             LDRB     R1,[R0, #+1]
   \   00000040   0x7882             LDRB     R2,[R0, #+2]
   \   00000042   0x0612             LSLS     R2,R2,#+24
   \   00000044   0x0C12             LSRS     R2,R2,#+16
   \   00000046   0x4311             ORRS     R1,R1,R2
   \   00000048   0x70B9             STRB     R1,[R7, #+2]
   \   0000004A   0x0A09             LSRS     R1,R1,#+8
   \   0000004C   0x70F9             STRB     R1,[R7, #+3]
    169              getAlarmResponse->timeStamp = thAlarmTable[0].timeStamp;
   \   0000004E   0x1CC0             ADDS     R0,R0,#+3
   \   00000050   0x.... 0x....      BL       __aeabi_uread4
   \   00000054   0x1D39             ADDS     R1,R7,#+4
   \   00000056   0x.... 0x....      BL       __aeabi_uwrite4
    170              removeAlarmEntry();
   \   0000005A   0x.... 0x....      BL       removeAlarmEntry
   \   0000005E   0xE002             B        ??getAlarmInd_4
    171            }
    172            else
    173            {
    174              reqLength = 1;
   \                     ??getAlarmInd_3: (+1)
   \   00000060   0x2401             MOVS     R4,#+1
    175              getAlarmResponse->status = ZCL_NOT_FOUND_STATUS;
   \   00000062   0x208B             MOVS     R0,#+139
   \   00000064   0x7038             STRB     R0,[R7, #+0]
    176            }
    177          
    178            fillCommandRequest(req, ZCL_ALARMS_CLUSTER_CLIENT_GET_ALARM_RESPONSE_COMMAND_ID, reqLength);
   \                     ??getAlarmInd_4: (+1)
   \   00000066   0x0022             MOVS     R2,R4
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x0028             MOVS     R0,R5
   \   0000006C   0x.... 0x....      BL       fillCommandRequest
    179            fillDstAddressingViaSourceAddressing(&req->dstAddressing, addressing, ZCL_CLUSTER_SIDE_CLIENT);
   \   00000070   0x2201             MOVS     R2,#+1
   \   00000072   0x0031             MOVS     R1,R6
   \   00000074   0x0028             MOVS     R0,R5
   \   00000076   0x3020             ADDS     R0,R0,#+32
   \   00000078   0x.... 0x....      BL       fillDstAddressingViaSourceAddressing
    180            commandManagerSendCommand(req);
   \   0000007C   0x0028             MOVS     R0,R5
   \   0000007E   0x.... 0x....      BL       commandManagerSendCommand
    181          
    182            (void)addressing, (void)payloadLength, (void)payload;
    183            return ZCL_SUCCESS_STATUS;
   \                     ??getAlarmInd_0: (+1)
   \   00000082   0x2000             MOVS     R0,#+0
   \                     ??getAlarmInd_2: (+1)
   \   00000084   0xB005             ADD      SP,SP,#+20
   \   00000086   0xBDF0             POP      {R4-R7,PC}       ;; return
    184          }
    185          
    186          /**************************************************************************//**
    187          \brief Callback on receiving resetAlarmLog command
    188          
    189          \param[in] addressing - pointer to addressing information;
    190          \param[in] payloadLength - data payload length;
    191          \param[in] payload - data pointer
    192          
    193          \return status of indication routine
    194          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    195          static ZCL_Status_t resetAlarmLogInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, uint8_t *payload)
    196          {
   \                     resetAlarmLogInd: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    197            LOG_STRING(resetAlarmLogStr, "<-resetAlarmLog\r\n");
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0xBF00             Nop      
   \   00000008   0x....             ADR.N    R1,?_3
   \   0000000A   0x2214             MOVS     R2,#+20
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    198            appSnprintf(resetAlarmLogStr);
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x.... 0x....      BL       appSnprintf
    199          
    200            thAlarmsClusterServerAttributes.alarmCount.value = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR      R1,??DataTable8
   \   0000001A   0x8408             STRH     R0,[R1, #+32]
    201          
    202            (void)addressing, (void)payloadLength, (void)payload;
    203            return ZCL_SUCCESS_STATUS;
   \   0000001C   0xB005             ADD      SP,SP,#+20
   \   0000001E   0xBD00             POP      {PC}             ;; return
    204          }
    205          
    206          /**************************************************************************//**
    207          \brief alarm notification raised by other clusters
    208          
    209          \param[in] alarmCode - alarm code;
    210          \param[in] clusterId - cluster identifier;
    211          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    212          void alarmNotification(uint8_t alarmCode, ClusterId_t clusterId)
    213          {
   \                     alarmNotification: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
    214            // send alarm notification
    215            ZCL_Request_t *req;
    216            ZCL_Alarm_t *alarm;
    217          
    218            if (!(req = getFreeCommand()))
   \   00000008   0x.... 0x....      BL       getFreeCommand
   \   0000000C   0x0004             MOVS     R4,R0
   \   0000000E   0xD041             BEQ      ??alarmNotification_0
    219              return;
    220          
    221            alarm = (ZCL_Alarm_t *)req->requestPayload;
   \   00000010   0x6CE0             LDR      R0,[R4, #+76]
    222            alarm->alarmCode = alarmCode;
   \   00000012   0x7005             STRB     R5,[R0, #+0]
    223            alarm->clusterIdentifier = clusterId;
   \   00000014   0x7046             STRB     R6,[R0, #+1]
   \   00000016   0x0A31             LSRS     R1,R6,#+8
   \   00000018   0x7081             STRB     R1,[R0, #+2]
    224            fillCommandRequest(req, ZCL_ALARMS_CLUSTER_CLIENT_ALARM_COMMAND_ID, sizeof(ZCL_Alarm_t));
   \   0000001A   0x2203             MOVS     R2,#+3
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       fillCommandRequest
    225            fillDstAddressing(&req->dstAddressing, APS_NO_ADDRESS, 0x00, APP_SRC_ENDPOINT_ID, ALARMS_CLUSTER_ID);
   \   00000024   0x2009             MOVS     R0,#+9
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x2319             MOVS     R3,#+25
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x3020             ADDS     R0,R0,#+32
   \   00000032   0x.... 0x....      BL       fillDstAddressing
    226            req->dstAddressing.clusterSide = ZCL_CLUSTER_SIDE_CLIENT;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x213E             MOVS     R1,#+62
   \   0000003A   0x5460             STRB     R0,[R4, R1]
    227            req->ZCL_Notify = alarmNotificationResp;
   \   0000003C   0x....             LDR      R0,??DataTable8_1
   \   0000003E   0x61A0             STR      R0,[R4, #+24]
    228            commandManagerSendCommand(req);
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x.... 0x....      BL       commandManagerSendCommand
    229          
    230            // add to table
    231            addAlarmEntry(alarmCode, clusterId);
   \   00000046   0x....             LDR      R4,??DataTable8
   \   00000048   0x8C20             LDRH     R0,[R4, #+32]
   \   0000004A   0x2804             CMP      R0,#+4
   \   0000004C   0xD301             BCC      ??alarmNotification_1
   \   0000004E   0x.... 0x....      BL       removeAlarmEntry
   \                     ??alarmNotification_1: (+1)
   \   00000052   0x8C20             LDRH     R0,[R4, #+32]
   \   00000054   0x00C1             LSLS     R1,R0,#+3
   \   00000056   0x1A08             SUBS     R0,R1,R0
   \   00000058   0x5425             STRB     R5,[R4, R0]
   \   0000005A   0x8C20             LDRH     R0,[R4, #+32]
   \   0000005C   0x00C1             LSLS     R1,R0,#+3
   \   0000005E   0x1A08             SUBS     R0,R1,R0
   \   00000060   0x1820             ADDS     R0,R4,R0
   \   00000062   0x7046             STRB     R6,[R0, #+1]
   \   00000064   0x0A36             LSRS     R6,R6,#+8
   \   00000066   0x7086             STRB     R6,[R0, #+2]
   \   00000068   0x.... 0x....      BL       HAL_GetSystemTime
   \   0000006C   0x0002             MOVS     R2,R0
   \   0000006E   0x000B             MOVS     R3,R1
   \   00000070   0x8C20             LDRH     R0,[R4, #+32]
   \   00000072   0x00C1             LSLS     R1,R0,#+3
   \   00000074   0x1A08             SUBS     R0,R1,R0
   \   00000076   0x1821             ADDS     R1,R4,R0
   \   00000078   0x1CCD             ADDS     R5,R1,#+3
   \   0000007A   0x0010             MOVS     R0,R2
   \   0000007C   0x0019             MOVS     R1,R3
   \   0000007E   0x22FA             MOVS     R2,#+250
   \   00000080   0x0092             LSLS     R2,R2,#+2        ;; #+1000
   \   00000082   0x2300             MOVS     R3,#+0
   \   00000084   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000088   0x0029             MOVS     R1,R5
   \   0000008A   0x.... 0x....      BL       __aeabi_uwrite4
   \   0000008E   0x8C20             LDRH     R0,[R4, #+32]
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \   00000092   0x8420             STRH     R0,[R4, #+32]
    232          }
   \                     ??alarmNotification_0: (+1)
   \   00000094   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    233          /**************************************************************************//**
    234          \brief Indication of alarm notification response
    235          
    236          \param[in] ntfy - pointer to response
    237          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    238          static void alarmNotificationResp(ZCL_Notify_t *ntfy)
    239          {
    240            (void)ntfy;
    241          }
   \                     alarmNotificationResp: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    242          
    243          /**************************************************************************//**
    244          \brief adding entry to alarm table
    245          
    246          \param[in] alarmCode - alarm code;
    247          \param[in] clusterId - cluster identifier;
    248          ******************************************************************************/
    249          static void addAlarmEntry(uint8_t alarmCode, ClusterId_t clusterId)
    250          {
    251            if (thAlarmsClusterServerAttributes.alarmCount.value >= ALARM_TABLE_SIZE)
    252              removeAlarmEntry();
    253          
    254            thAlarmTable[thAlarmsClusterServerAttributes.alarmCount.value].alarmCode = alarmCode;
    255            thAlarmTable[thAlarmsClusterServerAttributes.alarmCount.value].clusterIdentifier = clusterId;
    256            thAlarmTable[thAlarmsClusterServerAttributes.alarmCount.value].timeStamp = HAL_GetSystemTime() / 1000; // this needs to be linked with time cluster UTC
    257            thAlarmsClusterServerAttributes.alarmCount.value++;
    258          
    259          }
    260          
    261          /**************************************************************************//**
    262          \brief remove the first entry(earliest timestamp)from alarm table
    263          
    264          \param[in] alarmCode - alarm code;
    265          \param[in] clusterId - cluster identifier;
    266          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    267          static void removeAlarmEntry()
    268          {
   \                     removeAlarmEntry: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    269            for (uint8_t i = 0; i < (thAlarmsClusterServerAttributes.alarmCount.value-1); i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x....             LDR      R5,??DataTable8
   \   00000006   0xE008             B        ??removeAlarmEntry_0
    270              memcpy(&thAlarmTable[i], &thAlarmTable[i+1], sizeof(ZCL_AlarmEntry_t));
   \                     ??removeAlarmEntry_1: (+1)
   \   00000008   0x00E0             LSLS     R0,R4,#+3
   \   0000000A   0x1B00             SUBS     R0,R0,R4
   \   0000000C   0x1828             ADDS     R0,R5,R0
   \   0000000E   0x2207             MOVS     R2,#+7
   \   00000010   0x1DC1             ADDS     R1,R0,#+7
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy
   \   00000016   0x1C64             ADDS     R4,R4,#+1
   \   00000018   0xB2E4             UXTB     R4,R4
   \                     ??removeAlarmEntry_0: (+1)
   \   0000001A   0x8C28             LDRH     R0,[R5, #+32]
   \   0000001C   0x1E41             SUBS     R1,R0,#+1
   \   0000001E   0x428C             CMP      R4,R1
   \   00000020   0xDBF2             BLT      ??removeAlarmEntry_1
    271            thAlarmsClusterServerAttributes.alarmCount.value--;
   \   00000022   0x1E40             SUBS     R0,R0,#+1
   \   00000024   0x8428             STRH     R0,[R5, #+32]
    272          }
   \   00000026   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     thAlarmTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     alarmNotificationResp

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x3C 0x2D          DC8 "<-resetAllAlarm\015\012"
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x74 0x41    
   \              0x6C 0x6C    
   \              0x41 0x6C    
   \              0x61 0x72    
   \              0x6D 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x3C 0x2D          DC8 "<-resetAlarm clusterId = 0x%x alarmCode = %d\015\012"
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x74 0x41    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x49 0x64    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x20    
   \              0x61 0x6C    
   \              0x61 0x72    
   \              0x6D 0x43    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x3C 0x2D          DC8 "<-getAlarm\015\012"
   \              0x67 0x65    
   \              0x74 0x41    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x3C 0x2D          DC8 "<-resetAlarmLog\015\012"
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x74 0x41    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x4C 0x6F    
   \              0x67 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0
    273          
    274          #endif // APP_DEVICE_TYPE_THERMOSTAT
    275          
    276          // eof thAlarmsCluster.c
    277          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   alarmNotification
        24   -> HAL_GetSystemTime
        24   -> commandManagerSendCommand
        24   -> fillCommandRequest
        24   -> fillDstAddressing
        24   -> getFreeCommand
        24   -> removeAlarmEntry
        24 __aeabi_uldivmod
        24 __aeabi_uwrite4
       0   alarmNotificationResp
       0   alarmsClusterInit
      40   getAlarmInd
        40   -> __aeabi_memcpy4
        40   -> appSnprintf
        40   -> commandManagerSendCommand
        40   -> fillCommandRequest
        40   -> fillDstAddressingViaSourceAddressing
        40   -> getFreeCommand
        40   -> removeAlarmEntry
        40 __aeabi_uread4
        40 __aeabi_uwrite4
      16   removeAlarmEntry
        16   -> __aeabi_memcpy
      72   resetAlarmInd
        72   -> SYS_PostEvent
        72   -> __aeabi_memcpy4
        72   -> appSnprintf
      24   resetAlarmLogInd
        24   -> __aeabi_memcpy4
        24   -> appSnprintf
      40   resetAllAlarmsInd
        40   -> SYS_PostEvent
        40   -> __aeabi_memcpy4
        40   -> appSnprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
      20  ?_0
      48  ?_1
      16  ?_2
      20  ?_3
     150  alarmNotification
       2  alarmNotificationResp
       8  alarmsClusterInit
     136  getAlarmInd
      40  removeAlarmEntry
      80  resetAlarmInd
      32  resetAlarmLogInd
      58  resetAllAlarmsInd
      36  thAlarmTable
          thAlarmsClusterServerAttributes
      32  thAlarmsClusterServerCommands

 
  68 bytes in section .data
 618 bytes in section .text
 
 618 bytes of CODE memory
  68 bytes of DATA memory

Errors: none
Warnings: none
