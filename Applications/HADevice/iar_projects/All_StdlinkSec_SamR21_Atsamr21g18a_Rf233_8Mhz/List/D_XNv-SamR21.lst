###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:40:19
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\ZLLPlatform\ZLL\D_XNv\src\D_XNv-SamR21.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\ZLLPlatform\ZLL\D_XNv\src\D_XNv-SamR21.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\D_XNv-SamR21.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\D_XNv-SamR21.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\BitCloud\Components\ZLLPlatform\ZLL\D_XNv\src\D_XNv-SamR21.c
      1          /*********************************************************************************************//**
      2          \file
      3          
      4          \brief D_XNv Drivers Implementation
      5          
      6          This file implements a few basic 'static inline' functions that are intended to be used in a
      7          certain way. This is as follows:
      8          
      9          For any Flash command, the flash chip must first be selected using SelectFlash().
     10          Each command ends with de-selection of the flash chip by calling DeselectFlash().
     11          Within a command, a byte can be transferred over SPI to the flash chip using this sequence:
     12           - SpiTxByte(uint8_t b);  // initiates the transfer of a byte over SPI
     13           - SpiTxWaitReady();    // waits until the transfer is ready
     14           - SpiRxByte();         // Need to do a dummy read after sending a byte over SPI
     15          When the flash chip sends back a byte (i.e. a response), a dummy byte is sent and the response is read:
     16           - SpiTxByte(0x00u);    // initiates the transfer of a dummy byte over SPI
     17           - SpiTxWaitReady();    // waits until the transfer is ready
     18           - byte = SpiRxByte();  // reads the byte
     19          To optimize speed, any calculations should be done between SpiTxByte() and SpiTxWaitReady(), because
     20          the SpiTxWaitReady() will be ready about 2 microseconds after the SpiTxByte().
     21          
     22          \author
     23              Atmel Corporation: http://www.atmel.com \n
     24              Support email: avr@atmel.com
     25          
     26            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     27            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     28          
     29          \internal
     30          
     31          $Id: D_XNv-SamR21.c 24615 2013-02-27 05:14:24Z mahendranp $
     32          
     33          ***************************************************************************************************/
     34          
     35          /***************************************************************************************************
     36          * LOCAL INCLUDE FILES
     37          ***************************************************************************************************/
     38          
     39          #include "D_XNv_Bindings.h"
     40          #include "D_XNv_Init.h"
     41          #include "D_XNv.h"
     42          
     43          #include "N_Types.h"
     44          #include <atsamr21.h>
     45          #include <atomic.h>
     46          #include <spi.h>
     47          
     48          
     49          /***************************************************************************************************
     50          * EXTERNAL INCLUDE FILES
     51          ***************************************************************************************************/
     52          
     53          #if defined(ENABLE_NV_USAGE_SIMULATION)
     54          #include "N_Log.h"
     55          #endif
     56          
     57          /***************************************************************************************************
     58          * LOCAL MACROS AND CONSTANTS
     59          ***************************************************************************************************/
     60          
     61          #define COMPID "D_XNv"
     62          
     63          #define D_XNV_PAGE_PROGRAM_CMD  0x02u
     64          #define D_XNV_READ_CMD          0x03u
     65          #define D_XNV_READ_STATUS_CMD   0x05u
     66          #define D_XNV_WRITE_ENABLE_CMD  0x06u
     67          #define D_XNV_SECTOR_ERASE_CMD  0xD8u
     68          
     69          #define D_XNV_STATUS_WIP        0x01u
     70          
     71          #define EXTFLASH_SPI_CS         (1 << 14)
     72          #define EXTFLASH_SPI_SCK        (1 << 9)
     73          #define EXTFLASH_SPI_MOSI       (1 << 8)
     74          #define EXTFLASH_SPI_MISO       (1 << 15)
     75          
     76          /***************************************************************************************************
     77          * LOCAL FUNCTIONS
     78          ***************************************************************************************************/
     79          
     80          static inline void SelectFlash(void)
     81          {
     82              // Make CSn low
     83              PORTA_OUTCLR = EXTFLASH_SPI_CS;
     84          }
     85          
     86          static void DeselectFlash(void)
     87          {
     88              // Make CSn high
     89              PORTA_OUTSET = EXTFLASH_SPI_CS;
     90          }
     91          
     92          static inline void SpiTxByte(uint8_t value)
     93          {
     94              SC2_SPI_DATA = value;
     95          }
     96          
     97          static inline void SpiTxWaitReady(void)
     98          {
     99              // Wait for transmission complete
    100              while ( !(SC2_SPI_INTFLAG & SC2_SPI_INTFLAG_RXC) )
    101              {
    102                  // no action
    103              }
    104          }
    105          
    106          /** Receive a byte that was transferred during a transmit */
    107          static inline uint8_t SpiRxByte(void)
    108          {
    109              return SC2_SPI_DATA;
    110          }
    111          

   \                                 In section .text, align 2, keep-with-next
    112          static inline void SpiTxByteAndWait(uint8_t value)
    113          {
   \                     SpiTxByteAndWait: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    114              ATOMIC_SECTION_ENTER
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       halStartAtomic
    115              SpiTxByte(value);
   \   0000000C   0x....             LDR      R0,??DataTable9  ;; 0x42001018
   \   0000000E   0x8204             STRH     R4,[R0, #+16]
    116              SpiTxWaitReady();
   \                     ??SpiTxByteAndWait_0: (+1)
   \   00000010   0x7801             LDRB     R1,[R0, #+0]
   \   00000012   0x0749             LSLS     R1,R1,#+29
   \   00000014   0xD5FC             BPL      ??SpiTxByteAndWait_0
    117              ATOMIC_SECTION_LEAVE
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x.... 0x....      BL       halEndAtomic
    118          }
   \   0000001C   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    119          

   \                                 In section .text, align 2, keep-with-next
    120          static inline void SpiTxByteWaitAndDummyReadByte(uint8_t value)
    121          {
   \                     SpiTxByteWaitAndDummyReadByte: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    122              SpiTxByteAndWait(value);
   \   00000002   0x.... 0x....      BL       SpiTxByteAndWait
    123              SpiRxByte();
   \   00000006   0x....             LDR      R0,??DataTable9_1  ;; 0x42001028
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
    124          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    125          
    126          /** Wait unit a previous write or sector erase has finished. This can take really long! */

   \                                 In section .text, align 2, keep-with-next
    127          static void WaitUntilWriteFinished(void)
    128          {
   \                     WaitUntilWriteFinished: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    129              SelectFlash();
   \   00000002   0x....             LDR      R4,??DataTable9_2  ;; 0x41004414
   \   00000004   0x2580             MOVS     R5,#+128
   \   00000006   0x01ED             LSLS     R5,R5,#+7        ;; #+16384
   \   00000008   0x6025             STR      R5,[R4, #+0]
    130              SpiTxByteWaitAndDummyReadByte(D_XNV_READ_STATUS_CMD);
   \   0000000A   0x2005             MOVS     R0,#+5
   \   0000000C   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    131              do
    132              {
    133                  SpiTxByteAndWait(0u);
   \                     ??WaitUntilWriteFinished_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       SpiTxByteAndWait
    134              }
    135              while ( SpiRxByte() & D_XNV_STATUS_WIP );
   \   00000016   0x....             LDR      R0,??DataTable9_1  ;; 0x42001028
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0x07C0             LSLS     R0,R0,#+31
   \   0000001C   0xD4F8             BMI      ??WaitUntilWriteFinished_0
    136              DeselectFlash();
   \   0000001E   0x6065             STR      R5,[R4, #+4]
    137          }
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    138          

   \                                 In section .text, align 2, keep-with-next
    139          static inline uint8_t ReadSingleByte(void)
    140          {
   \                     ReadSingleByte: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    141              SpiTxByteAndWait(0u);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       SpiTxByteAndWait
    142              return SpiRxByte();
   \   00000008   0x....             LDR      R0,??DataTable9_1  ;; 0x42001028
   \   0000000A   0x8800             LDRH     R0,[R0, #+0]
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
    143          }
    144          
    145          /***************************************************************************************************
    146          * EXPORTED FUNCTIONS
    147          ***************************************************************************************************/
    148          

   \                                 In section .text, align 2, keep-with-next
    149          void D_XNv_Init(void)
    150          {
   \                     D_XNv_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    151              /* Configure PIOs for SPI */
    152              PORTA_DIRSET = EXTFLASH_SPI_CS;
   \   00000002   0x....             LDR      R1,??DataTable9_3  ;; 0x41004404
   \   00000004   0x2080             MOVS     R0,#+128
   \   00000006   0x01C0             LSLS     R0,R0,#+7        ;; #+16384
   \   00000008   0x6048             STR      R0,[R1, #+4]
    153              PORTA_DIRCLR = EXTFLASH_SPI_SCK | EXTFLASH_SPI_MISO | EXTFLASH_SPI_MOSI;
   \   0000000A   0x2283             MOVS     R2,#+131
   \   0000000C   0x0212             LSLS     R2,R2,#+8        ;; #+33536
   \   0000000E   0x600A             STR      R2,[R1, #+0]
    154          
    155              /* Pin configurations */
    156              PORTA_PINCFG15 |= PORTA_PINCFG15_PMUXEN; //MISO  A15
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x....             LDR      R2,??DataTable9_4  ;; 0x41004434
   \   00000014   0x7ED3             LDRB     R3,[R2, #+27]
   \   00000016   0x2401             MOVS     R4,#+1
   \   00000018   0x431C             ORRS     R4,R4,R3
   \   0000001A   0x76D4             STRB     R4,[R2, #+27]
    157              PORTA_PINCFG8 |= PORTA_PINCFG8_PMUXEN; //MOSI  A8
   \   0000001C   0x7D13             LDRB     R3,[R2, #+20]
   \   0000001E   0x2401             MOVS     R4,#+1
   \   00000020   0x431C             ORRS     R4,R4,R3
   \   00000022   0x7514             STRB     R4,[R2, #+20]
    158              PORTA_PINCFG9 |= PORTA_PINCFG9_PMUXEN; //SCK   A9
   \   00000024   0x7D53             LDRB     R3,[R2, #+21]
   \   00000026   0x2401             MOVS     R4,#+1
   \   00000028   0x431C             ORRS     R4,R4,R3
   \   0000002A   0x7554             STRB     R4,[R2, #+21]
    159          
    160              /* Configure SPI in peripheral multiplexing */
    161              PORTA_PMUX7 |= PORTA_PMUX7_PMUXO(2);
   \   0000002C   0x78D3             LDRB     R3,[R2, #+3]
   \   0000002E   0x2420             MOVS     R4,#+32
   \   00000030   0x431C             ORRS     R4,R4,R3
   \   00000032   0x70D4             STRB     R4,[R2, #+3]
    162              PORTA_PMUX4 = PORTA_PMUX4_PMUXE(3) | PORTA_PMUX4_PMUXO(3);
   \   00000034   0x2333             MOVS     R3,#+51
   \   00000036   0x7013             STRB     R3,[R2, #+0]
    163          
    164              /* Enable the clock of SPI */
    165              PM_APBCMASK |= PM_APBCMASK_SERCOM2;
   \   00000038   0x....             LDR      R2,??DataTable9_5  ;; 0x40000420
   \   0000003A   0x6813             LDR      R3,[R2, #+0]
   \   0000003C   0x2410             MOVS     R4,#+16
   \   0000003E   0x431C             ORRS     R4,R4,R3
   \   00000040   0x6014             STR      R4,[R2, #+0]
    166          
    167              /* Configure the generic clk settings */
    168              GCLK_CLKCTRL_s.id = 0x16;  // enabling clock for SERCOM2
   \   00000042   0x....             LDR      R2,??DataTable9_6  ;; 0x40000c02
   \   00000044   0x8813             LDRH     R3,[R2, #+0]
   \   00000046   0x....             LDR      R4,??DataTable9_7  ;; 0xffc0
   \   00000048   0x401C             ANDS     R4,R4,R3
   \   0000004A   0x2316             MOVS     R3,#+22
   \   0000004C   0x4323             ORRS     R3,R3,R4
   \   0000004E   0x8013             STRH     R3,[R2, #+0]
    169              GCLK_CLKCTRL_s.gen = 0;
   \   00000050   0x8813             LDRH     R3,[R2, #+0]
   \   00000052   0x....             LDR      R4,??DataTable9_8  ;; 0xf0ff
   \   00000054   0x401C             ANDS     R4,R4,R3
   \   00000056   0x8014             STRH     R4,[R2, #+0]
    170              GCLK_CLKCTRL_s.clken = 1;
   \   00000058   0x8813             LDRH     R3,[R2, #+0]
   \   0000005A   0x4318             ORRS     R0,R0,R3
   \   0000005C   0x8010             STRH     R0,[R2, #+0]
    171          
    172              /* Reset */
    173              SC2_SPI_CTRLA = SC2_SPI_CTRLA_SWRST;
   \   0000005E   0x....             LDR      R0,??DataTable9_9  ;; 0x42001000
   \   00000060   0x6001             STR      R1,[R0, #+0]
    174              while((SC2_SPI_SYNCBUSY & SC2_SPI_SYNCBUSY_SWRST));
   \                     ??D_XNv_Init_0: (+1)
   \   00000062   0x69C2             LDR      R2,[R0, #+28]
   \   00000064   0x400A             ANDS     R2,R2,R1
   \   00000066   0xD1FC             BNE      ??D_XNv_Init_0
    175          
    176              /* Receiver Enable*/
    177              SC2_SPI_CTRLB  = SC2_SPI_CTRLB_RXEN;
   \   00000068   0x044A             LSLS     R2,R1,#+17
   \   0000006A   0x6042             STR      R2,[R0, #+4]
    178              while(SC2_SPI_SYNCBUSY & SC2_SPI_SYNCBUSY_CTRLB);
   \                     ??D_XNv_Init_1: (+1)
   \   0000006C   0x69C2             LDR      R2,[R0, #+28]
   \   0000006E   0x0752             LSLS     R2,R2,#+29
   \   00000070   0xD4FC             BMI      ??D_XNv_Init_1
    179          
    180              /* Baud Rate Configuration */
    181              SC2_SPI_BAUD = SPI_CLOCK_RATE_2000;
   \   00000072   0x7301             STRB     R1,[R0, #+12]
    182          
    183              /* setup spi mode master, pad & enable it */
    184              SC2_SPI_CTRLA |=  SC2_SPI_CTRLA_MODE(3) | SC2_SPI_CTRLA_DIPO(3)| SC2_SPI_CTRLA_DOPO(0) | SC2_SPI_CTRLA_ENABLE;
   \   00000074   0x6801             LDR      R1,[R0, #+0]
   \   00000076   0x....             LDR      R2,??DataTable9_10  ;; 0x30000e
   \   00000078   0x430A             ORRS     R2,R2,R1
   \   0000007A   0x6002             STR      R2,[R0, #+0]
    185              while(SC2_SPI_SYNCBUSY & SC2_SPI_SYNCBUSY_ENABLE);
   \                     ??D_XNv_Init_2: (+1)
   \   0000007C   0x69C1             LDR      R1,[R0, #+28]
   \   0000007E   0x0789             LSLS     R1,R1,#+30
   \   00000080   0xD4FC             BMI      ??D_XNv_Init_2
    186          }
   \   00000082   0xBD10             POP      {R4,PC}          ;; return
    187          

   \                                 In section .text, align 2, keep-with-next
    188          void D_XNv_Read_Impl(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_XNv_Size_t numberOfBytes)
    189          {
   \                     D_XNv_Read_Impl: (+1)
   \   00000000   0xB5F3             PUSH     {R0,R1,R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001C             MOVS     R4,R3
    190              WaitUntilWriteFinished();
   \   00000008   0x.... 0x....      BL       WaitUntilWriteFinished
    191          
    192              SelectFlash();
   \   0000000C   0x....             LDR      R7,??DataTable9_2  ;; 0x41004414
   \   0000000E   0x2680             MOVS     R6,#+128
   \   00000010   0x01F6             LSLS     R6,R6,#+7        ;; #+16384
   \   00000012   0x603E             STR      R6,[R7, #+0]
    193              SpiTxByteWaitAndDummyReadByte(D_XNV_READ_CMD);
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    194              SpiTxByteWaitAndDummyReadByte(sector);
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x7900             LDRB     R0,[R0, #+4]
   \   0000001E   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    195              SpiTxByteWaitAndDummyReadByte((uint8_t)(offset >> 8));
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x8900             LDRH     R0,[R0, #+8]
   \   00000026   0x0A00             LSRS     R0,R0,#+8
   \   00000028   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    196              SpiTxByteWaitAndDummyReadByte((uint8_t)offset);
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x8900             LDRH     R0,[R0, #+8]
   \   00000030   0xB2C0             UXTB     R0,R0
   \   00000032   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
   \   00000036   0xE004             B        ??D_XNv_Read_Impl_0
    197          
    198              while ( numberOfBytes != 0u )
    199              {
    200                  *pBuffer = ReadSingleByte();
   \                     ??D_XNv_Read_Impl_1: (+1)
   \   00000038   0x.... 0x....      BL       ReadSingleByte
   \   0000003C   0x7028             STRB     R0,[R5, #+0]
    201                  pBuffer++;
   \   0000003E   0x1C6D             ADDS     R5,R5,#+1
    202                  numberOfBytes--;
   \   00000040   0x1E64             SUBS     R4,R4,#+1
    203              }
   \                     ??D_XNv_Read_Impl_0: (+1)
   \   00000042   0xB2A4             UXTH     R4,R4
   \   00000044   0x2C00             CMP      R4,#+0
   \   00000046   0xD1F7             BNE      ??D_XNv_Read_Impl_1
    204          
    205              DeselectFlash();
   \   00000048   0x607E             STR      R6,[R7, #+4]
    206          }
   \   0000004A   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    207          

   \                                 In section .text, align 2, keep-with-next
    208          void D_XNv_Write_Impl(uint8_t sector, uint16_t offset, const uint8_t *pBuffer, D_XNv_Size_t numberOfBytes)
    209          {
   \                     D_XNv_Write_Impl: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001E             MOVS     R6,R3
   \   00000008   0x2780             MOVS     R7,#+128
   \   0000000A   0x01FF             LSLS     R7,R7,#+7        ;; #+16384
   \   0000000C   0xE024             B        ??D_XNv_Write_Impl_0
    210              while (numberOfBytes != 0u)
    211              {
    212                  WaitUntilWriteFinished();
   \                     ??D_XNv_Write_Impl_1: (+1)
   \   0000000E   0x.... 0x....      BL       WaitUntilWriteFinished
    213                  SelectFlash();
   \   00000012   0x....             LDR      R0,??DataTable9_2  ;; 0x41004414
   \   00000014   0x6007             STR      R7,[R0, #+0]
    214                  SpiTxByteWaitAndDummyReadByte(D_XNV_WRITE_ENABLE_CMD);
   \   00000016   0x2006             MOVS     R0,#+6
   \   00000018   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    215                  DeselectFlash();
   \   0000001C   0x....             LDR      R0,??DataTable9_2  ;; 0x41004414
   \   0000001E   0x6047             STR      R7,[R0, #+4]
    216          
    217                  SelectFlash();
   \   00000020   0x6007             STR      R7,[R0, #+0]
    218                  SpiTxByteWaitAndDummyReadByte(D_XNV_PAGE_PROGRAM_CMD);
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    219                  SpiTxByteWaitAndDummyReadByte(sector);
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    220                  SpiTxByteWaitAndDummyReadByte((uint8_t)(offset >> 8));
   \   00000030   0x0420             LSLS     R0,R4,#+16
   \   00000032   0x0E00             LSRS     R0,R0,#+24
   \   00000034   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    221                  SpiTxByteWaitAndDummyReadByte((uint8_t)offset);
   \   00000038   0xB2E0             UXTB     R0,R4
   \   0000003A   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    222                  do
    223                  {
    224                      SpiTxByteWaitAndDummyReadByte(*pBuffer);
   \                     ??D_XNv_Write_Impl_2: (+1)
   \   0000003E   0x7828             LDRB     R0,[R5, #+0]
   \   00000040   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    225                      pBuffer++;
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
    226                      numberOfBytes--;
   \   00000046   0x1E76             SUBS     R6,R6,#+1
    227                      offset++;
   \   00000048   0x1C64             ADDS     R4,R4,#+1
    228                  }
    229                  while ( ( numberOfBytes != 0u ) && ( (offset & 0x00FFu) != 0x0000u ) );
   \   0000004A   0xB2B6             UXTH     R6,R6
   \   0000004C   0x2E00             CMP      R6,#+0
   \   0000004E   0xD001             BEQ      ??D_XNv_Write_Impl_3
   \   00000050   0x0620             LSLS     R0,R4,#+24
   \   00000052   0xD1F4             BNE      ??D_XNv_Write_Impl_2
    230                  DeselectFlash();
   \                     ??D_XNv_Write_Impl_3: (+1)
   \   00000054   0x....             LDR      R0,??DataTable9_2  ;; 0x41004414
   \   00000056   0x6047             STR      R7,[R0, #+4]
    231              }
   \                     ??D_XNv_Write_Impl_0: (+1)
   \   00000058   0x2E00             CMP      R6,#+0
   \   0000005A   0xD1D8             BNE      ??D_XNv_Write_Impl_1
    232          }
   \   0000005C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    233          

   \                                 In section .text, align 2, keep-with-next
    234          void D_XNv_EraseSector_Impl(uint8_t sector)
    235          {
   \                     D_XNv_EraseSector_Impl: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    236          #if defined(ENABLE_NV_USAGE_SIMULATION)
    237              N_LOG_ALWAYS(("EraseSector,%hu", sector));
    238          #endif
    239              WaitUntilWriteFinished();
   \   00000004   0x.... 0x....      BL       WaitUntilWriteFinished
    240              SelectFlash();
   \   00000008   0x....             LDR      R5,??DataTable9_2  ;; 0x41004414
   \   0000000A   0x2680             MOVS     R6,#+128
   \   0000000C   0x01F6             LSLS     R6,R6,#+7        ;; #+16384
   \   0000000E   0x602E             STR      R6,[R5, #+0]
    241              SpiTxByteWaitAndDummyReadByte(D_XNV_WRITE_ENABLE_CMD);
   \   00000010   0x2006             MOVS     R0,#+6
   \   00000012   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    242              DeselectFlash();
   \   00000016   0x606E             STR      R6,[R5, #+4]
    243          
    244              SelectFlash();
   \   00000018   0x602E             STR      R6,[R5, #+0]
    245              SpiTxByteWaitAndDummyReadByte(D_XNV_SECTOR_ERASE_CMD);
   \   0000001A   0x20D8             MOVS     R0,#+216
   \   0000001C   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    246              SpiTxByteWaitAndDummyReadByte(sector);
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    247              SpiTxByteWaitAndDummyReadByte(0x00u);
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    248              SpiTxByteWaitAndDummyReadByte(0x00u);
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    249              DeselectFlash();
   \   00000032   0x606E             STR      R6,[R5, #+4]
    250          }
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
    251          

   \                                 In section .text, align 2, keep-with-next
    252          bool D_XNv_IsEmpty_Impl(uint8_t sector, uint16_t offset, D_XNv_Size_t numberOfBytes)
    253          {
   \                     D_XNv_IsEmpty_Impl: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x0014             MOVS     R4,R2
    254              WaitUntilWriteFinished();
   \   00000006   0x.... 0x....      BL       WaitUntilWriteFinished
    255          
    256              SelectFlash();
   \   0000000A   0x....             LDR      R5,??DataTable9_2  ;; 0x41004414
   \   0000000C   0x2680             MOVS     R6,#+128
   \   0000000E   0x01F6             LSLS     R6,R6,#+7        ;; #+16384
   \   00000010   0x602E             STR      R6,[R5, #+0]
    257              SpiTxByteWaitAndDummyReadByte(D_XNV_READ_CMD);
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    258              SpiTxByteWaitAndDummyReadByte(sector);
   \   00000018   0x0038             MOVS     R0,R7
   \   0000001A   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    259              SpiTxByteWaitAndDummyReadByte((uint8_t)(offset >> 8));
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x8800             LDRH     R0,[R0, #+0]
   \   00000022   0x0A00             LSRS     R0,R0,#+8
   \   00000024   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    260              SpiTxByteWaitAndDummyReadByte((uint8_t)offset);
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    261          
    262              uint8_t andedContent = 0xFFu;
    263              do
    264              {
    265                  andedContent &= ReadSingleByte();
   \                     ??D_XNv_IsEmpty_Impl_0: (+1)
   \   00000032   0x.... 0x....      BL       ReadSingleByte
    266                  numberOfBytes--; // will wrap from 0 to 0xFFFF when numberOfBytes equals 0 on entry
   \   00000036   0x1E64             SUBS     R4,R4,#+1
    267              }
    268              while ((andedContent == 0xFFu) && (numberOfBytes != 0u));
   \   00000038   0x28FF             CMP      R0,#+255
   \   0000003A   0xD102             BNE      ??D_XNv_IsEmpty_Impl_1
   \   0000003C   0xB2A4             UXTH     R4,R4
   \   0000003E   0x2C00             CMP      R4,#+0
   \   00000040   0xD1F7             BNE      ??D_XNv_IsEmpty_Impl_0
    269          
    270              DeselectFlash();
   \                     ??D_XNv_IsEmpty_Impl_1: (+1)
   \   00000042   0x606E             STR      R6,[R5, #+4]
    271             return (andedContent == 0xFFu);
   \   00000044   0x28FF             CMP      R0,#+255
   \   00000046   0xD101             BNE      ??D_XNv_IsEmpty_Impl_2
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??D_XNv_IsEmpty_Impl_2: (+1)
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    272          }
    273          

   \                                 In section .text, align 2, keep-with-next
    274          bool D_XNv_IsEqual_Impl(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_XNv_Size_t numberOfBytes)
    275          {
   \                     D_XNv_IsEqual_Impl: (+1)
   \   00000000   0xB5F3             PUSH     {R0,R1,R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001C             MOVS     R4,R3
   \   00000008   0x2601             MOVS     R6,#+1
    276              bool isEqual = TRUE;
    277          
    278              WaitUntilWriteFinished();
   \   0000000A   0x.... 0x....      BL       WaitUntilWriteFinished
   \   0000000E   0x03B7             LSLS     R7,R6,#+14
   \   00000010   0x....             LDR      R0,??DataTable9_2  ;; 0x41004414
   \   00000012   0x6007             STR      R7,[R0, #+0]
    279          
    280              SelectFlash();
    281              SpiTxByteWaitAndDummyReadByte(D_XNV_READ_CMD);
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    282              SpiTxByteWaitAndDummyReadByte(sector);
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x7900             LDRB     R0,[R0, #+4]
   \   0000001E   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    283              SpiTxByteWaitAndDummyReadByte((uint8_t)(offset >> 8));
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x8900             LDRH     R0,[R0, #+8]
   \   00000026   0x0A00             LSRS     R0,R0,#+8
   \   00000028   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
    284              SpiTxByteWaitAndDummyReadByte((uint8_t)offset);
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x8900             LDRH     R0,[R0, #+8]
   \   00000030   0xB2C0             UXTB     R0,R0
   \   00000032   0x.... 0x....      BL       SpiTxByteWaitAndDummyReadByte
   \                     ??D_XNv_IsEqual_Impl_0: (+1)
   \   00000036   0xB2A4             UXTH     R4,R4
   \   00000038   0x2C00             CMP      R4,#+0
   \   0000003A   0xD00B             BEQ      ??D_XNv_IsEqual_Impl_1
    285          
    286              while ((isEqual) && (numberOfBytes != 0u))
    287              {
    288                  isEqual = (*pBuffer == ReadSingleByte());
   \   0000003C   0x.... 0x....      BL       ReadSingleByte
   \   00000040   0x7829             LDRB     R1,[R5, #+0]
   \   00000042   0x4281             CMP      R1,R0
   \   00000044   0xD101             BNE      ??D_XNv_IsEqual_Impl_2
   \   00000046   0x2601             MOVS     R6,#+1
   \   00000048   0xE000             B        ??D_XNv_IsEqual_Impl_3
   \                     ??D_XNv_IsEqual_Impl_2: (+1)
   \   0000004A   0x2600             MOVS     R6,#+0
    289                  pBuffer++;
   \                     ??D_XNv_IsEqual_Impl_3: (+1)
   \   0000004C   0x1C6D             ADDS     R5,R5,#+1
    290          
    291                  numberOfBytes--;
   \   0000004E   0x1E64             SUBS     R4,R4,#+1
    292              }
   \   00000050   0x2E00             CMP      R6,#+0
   \   00000052   0xD1F0             BNE      ??D_XNv_IsEqual_Impl_0
    293          
    294              DeselectFlash();
   \                     ??D_XNv_IsEqual_Impl_1: (+1)
   \   00000054   0x....             LDR      R0,??DataTable9_2  ;; 0x41004414
   \   00000056   0x6047             STR      R7,[R0, #+4]
    295          
    296              return isEqual;
   \   00000058   0x0030             MOVS     R0,R6
   \   0000005A   0xBDFE             POP      {R1-R7,PC}       ;; return
    297          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x42001018         DC32     0x42001018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x42001028         DC32     0x42001028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x41004414         DC32     0x41004414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x41004404         DC32     0x41004404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x41004434         DC32     0x41004434

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x40000420         DC32     0x40000420

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x40000C02         DC32     0x40000c02

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x0000FFC0         DC32     0xffc0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x0000F0FF         DC32     0xf0ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x42001000         DC32     0x42001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x0030000E         DC32     0x30000e

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   D_XNv_EraseSector_Impl
        16   -> SpiTxByteWaitAndDummyReadByte
        16   -> WaitUntilWriteFinished
       8   D_XNv_Init
      24   D_XNv_IsEmpty_Impl
        24   -> ReadSingleByte
        24   -> SpiTxByteWaitAndDummyReadByte
        24   -> WaitUntilWriteFinished
      32   D_XNv_IsEqual_Impl
        32   -> ReadSingleByte
        32   -> SpiTxByteWaitAndDummyReadByte
        32   -> WaitUntilWriteFinished
      32   D_XNv_Read_Impl
        32   -> ReadSingleByte
        32   -> SpiTxByteWaitAndDummyReadByte
        32   -> WaitUntilWriteFinished
      24   D_XNv_Write_Impl
        24   -> SpiTxByteWaitAndDummyReadByte
        24   -> WaitUntilWriteFinished
       8   ReadSingleByte
         8   -> SpiTxByteAndWait
      16   SpiTxByteAndWait
        16   -> halEndAtomic
        16   -> halStartAtomic
       8   SpiTxByteWaitAndDummyReadByte
         8   -> SpiTxByteAndWait
      16   WaitUntilWriteFinished
        16   -> SpiTxByteAndWait
        16   -> SpiTxByteWaitAndDummyReadByte


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      54  D_XNv_EraseSector_Impl
     132  D_XNv_Init
      80  D_XNv_IsEmpty_Impl
      92  D_XNv_IsEqual_Impl
      76  D_XNv_Read_Impl
      94  D_XNv_Write_Impl
      16  ReadSingleByte
      30  SpiTxByteAndWait
      12  SpiTxByteWaitAndDummyReadByte
      34  WaitUntilWriteFinished

 
 664 bytes in section .text
 
 664 bytes of CODE memory

Errors: none
Warnings: none
