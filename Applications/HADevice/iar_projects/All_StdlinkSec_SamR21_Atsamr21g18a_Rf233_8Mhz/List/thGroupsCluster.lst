###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:41:01
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thGroupsCluster.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thGroupsCluster.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\thGroupsCluster.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\thGroupsCluster.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\thermostat\src\thGroupsCluster.c
      1          /**************************************************************************//**
      2            \file thGroupsCluster.c
      3          
      4            \brief
      5              Thermostat Groups server cluster implementation.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16              21.11.14 Viswanadham Kotla - Created.
     17          ******************************************************************************/
     18          #ifdef APP_DEVICE_TYPE_THERMOSTAT
     19          
     20          /******************************************************************************
     21                              Includes section
     22          ******************************************************************************/
     23          #include <thGroupsCluster.h>
     24          #include <thIdentifyCluster.h>
     25          #include <thScenesCluster.h>
     26          #include <haClusters.h>
     27          #include <uartManager.h>
     28          #include <commandManager.h>
     29          #include <thScenes.h>
     30          #include <pdsDataServer.h>
     31          
     32          /******************************************************************************
     33                              Prototypes section
     34          ******************************************************************************/
     35          static ZCL_Status_t addGroupInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_AddGroup_t *payload);
     36          static ZCL_Status_t viewGroupInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_ViewGroup_t *payload);
     37          static ZCL_Status_t getGroupMembershipInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_GetGroupMembership_t *payload);
     38          static ZCL_Status_t removeGroupInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_RemoveGroup_t *payload);
     39          static ZCL_Status_t removeAllGroupsInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, void *payload);
     40          static ZCL_Status_t addGroupIfidentifyingInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_AddGroupIfIdentifying_t * payload);
     41          
     42          static void thFillAddGroupResponsePayload(ZCL_AddGroupResponse_t *payload, uint16_t group, uint8_t status);
     43          static void thFillViewGroupResponsePayload(ZCL_ViewGroupResponse_t *payload, uint16_t group);
     44          static uint8_t thFillGetGroupMembershipPayload(ZCL_GetGroupMembershipResponse_t *payload, ZCL_GetGroupMembership_t *req);
     45          static void thFillRemoveGroupResponsePayload(ZCL_RemoveGroupResponse_t *payload, uint16_t group, uint8_t status);
     46          
     47          static ZCL_Status_t addGroup(uint16_t group);
     48          static ZCL_Status_t removeGroup(uint16_t group);
     49          static void removeAllGroups(void);
     50          static void addGroupIfIdentifying(uint16_t group);
     51          
     52          /******************************************************************************
     53                              Global variables section
     54          ******************************************************************************/

   \                                 In section .data, align 4
     55          ZCL_GroupsClusterServerAttributes_t thGroupsClusterServerAttributes =
   \                     thGroupsClusterServerAttributes:
   \   00000000   0x0000             DC16 0
   \   00000002   0x18 0x02          DC8 24, 2, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
     56          {
     57            ZCL_DEFINE_GROUPS_CLUSTER_SERVER_ATTRIBUTES()
     58          };

   \                                 In section .data, align 4
     59          ZCL_GroupsClusterCommands_t         thGroupsCommands =
   \                     thGroupsCommands:
   \   00000000   0x00 0x14          DC8 0, 20, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 addGroupInd
   \   00000008   0x01 0x14          DC8 1, 20, 0, 0
   \              0x00 0x00    
   \   0000000C   0x........         DC32 viewGroupInd
   \   00000010   0x02 0x14          DC8 2, 20, 0, 0
   \              0x00 0x00    
   \   00000014   0x........         DC32 getGroupMembershipInd
   \   00000018   0x03 0x14          DC8 3, 20, 0, 0
   \              0x00 0x00    
   \   0000001C   0x........         DC32 removeGroupInd
   \   00000020   0x04 0x10          DC8 4, 16, 0, 0
   \              0x00 0x00    
   \   00000024   0x........         DC32 removeAllGroupsInd
   \   00000028   0x05 0x10          DC8 5, 16, 0, 0
   \              0x00 0x00    
   \   0000002C   0x........         DC32 addGroupIfidentifyingInd
   \   00000030   0x00 0x11          DC8 0, 17, 0, 0
   \              0x00 0x00    
   \   00000034   0x00000000         DC32 0H
   \   00000038   0x01 0x11          DC8 1, 17, 0, 0
   \              0x00 0x00    
   \   0000003C   0x00000000         DC32 0H
   \   00000040   0x02 0x11          DC8 2, 17, 0, 0
   \              0x00 0x00    
   \   00000044   0x00000000         DC32 0H
   \   00000048   0x03 0x11          DC8 3, 17, 0, 0
   \              0x00 0x00    
   \   0000004C   0x00000000         DC32 0H
     60          {
     61            ZCL_DEFINE_GROUPS_CLUSTER_COMMANDS(addGroupInd, viewGroupInd, getGroupMembershipInd,
     62                                               removeGroupInd, removeAllGroupsInd, addGroupIfidentifyingInd,
     63                                               NULL, NULL, NULL, NULL)
     64          };
     65          
     66          /******************************************************************************
     67                              Implementation section
     68          ******************************************************************************/
     69          /**************************************************************************//**
     70          \brief Initializes Groups cluster
     71          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     72          void groupsClusterInit(void)
     73          {
     74            thGroupsClusterServerAttributes.nameSupport.value = 0;
   \                     groupsClusterInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable6
   \   00000004   0x7108             STRB     R0,[R1, #+4]
     75          }
   \   00000006   0x4770             BX       LR               ;; return
     76          
     77          /**************************************************************************//**
     78          \brief Callback on receiving Add Group command
     79          
     80          \param[in] addressing - pointer to addressing information;
     81          \param[in] payloadLength - data payload length;
     82          \param[in] payload - data pointer
     83          
     84          \return status of indication routine
     85          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     86          static ZCL_Status_t addGroupInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_AddGroup_t *payload)
     87          {
   \                     addGroupInd: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x0016             MOVS     R6,R2
     88            ZCL_Request_t *req;
     89            uint8_t status;
     90          
     91            LOG_STRING(addGroupStr, "addGroupInd(): 0x%04x\r\n");
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R1,?_0
   \   0000000E   0x2218             MOVS     R2,#+24
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
     92            appSnprintf(addGroupStr, payload->groupId);
   \   00000014   0x7831             LDRB     R1,[R6, #+0]
   \   00000016   0x7870             LDRB     R0,[R6, #+1]
   \   00000018   0x0600             LSLS     R0,R0,#+24
   \   0000001A   0x0C00             LSRS     R0,R0,#+16
   \   0000001C   0x4301             ORRS     R1,R1,R0
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x.... 0x....      BL       appSnprintf
     93          
     94            status = addGroup(payload->groupId);
   \   00000024   0x7834             LDRB     R4,[R6, #+0]
   \   00000026   0x7870             LDRB     R0,[R6, #+1]
   \   00000028   0x0600             LSLS     R0,R0,#+24
   \   0000002A   0x0C00             LSRS     R0,R0,#+16
   \   0000002C   0x4304             ORRS     R4,R4,R0
   \   0000002E   0x2119             MOVS     R1,#+25
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       NWK_IsGroupMember
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD109             BNE      ??addGroupInd_0
   \   0000003A   0x2119             MOVS     R1,#+25
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       NWK_AddGroup
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD001             BEQ      ??addGroupInd_1
   \   00000046   0x2400             MOVS     R4,#+0
   \   00000048   0xE002             B        ??addGroupInd_2
   \                     ??addGroupInd_1: (+1)
   \   0000004A   0x2489             MOVS     R4,#+137
   \   0000004C   0xE000             B        ??addGroupInd_2
   \                     ??addGroupInd_0: (+1)
   \   0000004E   0x248A             MOVS     R4,#+138
     95          
     96            // If received via multicast or broadcast service no response shall be given
     97            if (addressing->nonUnicast)
   \                     ??addGroupInd_2: (+1)
   \   00000050   0x2023             MOVS     R0,#+35
   \   00000052   0x5C38             LDRB     R0,[R7, R0]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD11C             BNE      ??addGroupInd_3
     98              return ZCL_SUCCESS_STATUS;
     99          
    100            if (!(req = getFreeCommand()))
   \   00000058   0x.... 0x....      BL       getFreeCommand
   \   0000005C   0x0005             MOVS     R5,R0
   \   0000005E   0xD101             BNE      ??addGroupInd_4
    101              return ZCL_INSUFFICIENT_SPACE_STATUS;
   \   00000060   0x2089             MOVS     R0,#+137
   \   00000062   0xE017             B        ??addGroupInd_5
    102          
    103            fillCommandRequest(req, ZCL_GROUPS_CLUSTER_ADD_GROUP_RESPONSE_COMMAND_ID,
    104                                 sizeof(ZCL_AddGroupResponse_t));
   \                     ??addGroupInd_4: (+1)
   \   00000064   0x2203             MOVS     R2,#+3
   \   00000066   0x2100             MOVS     R1,#+0
   \   00000068   0x.... 0x....      BL       fillCommandRequest
    105            thFillAddGroupResponsePayload((ZCL_AddGroupResponse_t *)req->requestPayload, payload->groupId, status);
   \   0000006C   0x7830             LDRB     R0,[R6, #+0]
   \   0000006E   0x7871             LDRB     R1,[R6, #+1]
   \   00000070   0x0609             LSLS     R1,R1,#+24
   \   00000072   0x0C09             LSRS     R1,R1,#+16
   \   00000074   0x4308             ORRS     R0,R0,R1
   \   00000076   0x6CE9             LDR      R1,[R5, #+76]
   \   00000078   0x700C             STRB     R4,[R1, #+0]
   \   0000007A   0x7048             STRB     R0,[R1, #+1]
   \   0000007C   0x0A00             LSRS     R0,R0,#+8
   \   0000007E   0x7088             STRB     R0,[R1, #+2]
    106            fillDstAddressingViaSourceAddressing(&req->dstAddressing, addressing, ZCL_CLUSTER_SIDE_CLIENT);
   \   00000080   0x2201             MOVS     R2,#+1
   \   00000082   0x0039             MOVS     R1,R7
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0x3020             ADDS     R0,R0,#+32
   \   00000088   0x.... 0x....      BL       fillDstAddressingViaSourceAddressing
    107            commandManagerSendCommand(req);
   \   0000008C   0x0028             MOVS     R0,R5
   \   0000008E   0x.... 0x....      BL       commandManagerSendCommand
    108          
    109            (void)payloadLength;
    110            return ZCL_SUCCESS_STATUS;
   \                     ??addGroupInd_3: (+1)
   \   00000092   0x2000             MOVS     R0,#+0
   \                     ??addGroupInd_5: (+1)
   \   00000094   0xB007             ADD      SP,SP,#+28
   \   00000096   0xBDF0             POP      {R4-R7,PC}       ;; return
    111          }
    112          
    113          /**************************************************************************//**
    114          \brief Callback on receiving View Group command
    115          
    116          \param[in] addressing - pointer to addressing information;
    117          \param[in] payloadLength - data payload length;
    118          \param[in] payload - data pointer
    119          
    120          \return status of indication routine
    121          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    122          static ZCL_Status_t viewGroupInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_ViewGroup_t *payload)
    123          {
   \                     viewGroupInd: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x0015             MOVS     R5,R2
    124            ZCL_Request_t *req;
    125          
    126            LOG_STRING(viewGroupStr, "viewGroupInd(): 0x%04x\r\n");
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R1,?_1
   \   0000000E   0x221C             MOVS     R2,#+28
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
    127            appSnprintf(viewGroupStr, payload->groupId);
   \   00000014   0x7829             LDRB     R1,[R5, #+0]
   \   00000016   0x7868             LDRB     R0,[R5, #+1]
   \   00000018   0x0600             LSLS     R0,R0,#+24
   \   0000001A   0x0C00             LSRS     R0,R0,#+16
   \   0000001C   0x4301             ORRS     R1,R1,R0
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x.... 0x....      BL       appSnprintf
    128          
    129            // If received via multicast or broadcast service no response shall be given
    130            if (addressing->nonUnicast)
   \   00000024   0x2023             MOVS     R0,#+35
   \   00000026   0x5C30             LDRB     R0,[R6, R0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD125             BNE      ??viewGroupInd_0
    131              return ZCL_SUCCESS_STATUS;
    132          
    133            if (!(req = getFreeCommand()))
   \   0000002C   0x.... 0x....      BL       getFreeCommand
   \   00000030   0x0004             MOVS     R4,R0
   \   00000032   0xD101             BNE      ??viewGroupInd_1
    134              return ZCL_INSUFFICIENT_SPACE_STATUS;
   \   00000034   0x2089             MOVS     R0,#+137
   \   00000036   0xE020             B        ??viewGroupInd_2
    135          
    136            fillCommandRequest(req, ZCL_GROUPS_CLUSTER_VIEW_GROUP_RESPONSE_COMMAND_ID,
    137                                 sizeof(ZCL_ViewGroupResponse_t));
   \                     ??viewGroupInd_1: (+1)
   \   00000038   0x2205             MOVS     R2,#+5
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x.... 0x....      BL       fillCommandRequest
    138            thFillViewGroupResponsePayload((ZCL_ViewGroupResponse_t *)req->requestPayload, payload->groupId);
   \   00000040   0x782F             LDRB     R7,[R5, #+0]
   \   00000042   0x7868             LDRB     R0,[R5, #+1]
   \   00000044   0x0600             LSLS     R0,R0,#+24
   \   00000046   0x0C00             LSRS     R0,R0,#+16
   \   00000048   0x4307             ORRS     R7,R7,R0
   \   0000004A   0x6CE5             LDR      R5,[R4, #+76]
   \   0000004C   0x2119             MOVS     R1,#+25
   \   0000004E   0x0038             MOVS     R0,R7
   \   00000050   0x.... 0x....      BL       NWK_IsGroupMember
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD001             BEQ      ??viewGroupInd_3
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xE000             B        ??viewGroupInd_4
   \                     ??viewGroupInd_3: (+1)
   \   0000005C   0x208B             MOVS     R0,#+139
   \                     ??viewGroupInd_4: (+1)
   \   0000005E   0x7028             STRB     R0,[R5, #+0]
   \   00000060   0x706F             STRB     R7,[R5, #+1]
   \   00000062   0x0A3F             LSRS     R7,R7,#+8
   \   00000064   0x70AF             STRB     R7,[R5, #+2]
    139            fillDstAddressingViaSourceAddressing(&req->dstAddressing, addressing, ZCL_CLUSTER_SIDE_CLIENT);
   \   00000066   0x2201             MOVS     R2,#+1
   \   00000068   0x0031             MOVS     R1,R6
   \   0000006A   0x0020             MOVS     R0,R4
   \   0000006C   0x3020             ADDS     R0,R0,#+32
   \   0000006E   0x.... 0x....      BL       fillDstAddressingViaSourceAddressing
    140            commandManagerSendCommand(req);
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x.... 0x....      BL       commandManagerSendCommand
    141          
    142            (void)payloadLength;
    143            return ZCL_SUCCESS_STATUS;
   \                     ??viewGroupInd_0: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??viewGroupInd_2: (+1)
   \   0000007A   0xB007             ADD      SP,SP,#+28
   \   0000007C   0xBDF0             POP      {R4-R7,PC}       ;; return
    144          }
    145          
    146          /**************************************************************************//**
    147          \brief Callback on receiving Get Group Membership command
    148          
    149          \param[in] addressing - pointer to addressing information;
    150          \param[in] payloadLength - data payload length;
    151          \param[in] payload - data pointer
    152          
    153          \return status of indication routine
    154          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    155          static ZCL_Status_t getGroupMembershipInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_GetGroupMembership_t *payload)
    156          {
   \                     getGroupMembershipInd: (+1)
   \   00000000   0xB5F5             PUSH     {R0,R2,R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    157            ZCL_Request_t *req;
    158            uint8_t size;
    159          
    160            LOG_STRING(getGroupMembershipStr, "getGroupMembershipInd()\r\n");
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0xBF00             Nop      
   \   00000008   0x....             ADR.N    R1,?_2
   \   0000000A   0x221C             MOVS     R2,#+28
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    161            appSnprintf(getGroupMembershipStr);
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x.... 0x....      BL       appSnprintf
    162          
    163            // If received via multicast or broadcast service no response shall be given
    164            if (addressing->nonUnicast)
   \   00000016   0x9807             LDR      R0,[SP, #+28]
   \   00000018   0x3023             ADDS     R0,R0,#+35
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD14F             BNE      ??getGroupMembershipInd_0
    165              return ZCL_SUCCESS_STATUS;
    166          
    167            if (!(req = getFreeCommand()))
   \   00000020   0x.... 0x....      BL       getFreeCommand
   \   00000024   0x0007             MOVS     R7,R0
   \   00000026   0xD101             BNE      ??getGroupMembershipInd_1
    168              return ZCL_INSUFFICIENT_SPACE_STATUS;
   \   00000028   0x2089             MOVS     R0,#+137
   \   0000002A   0xE04A             B        ??getGroupMembershipInd_2
    169          
    170            size = thFillGetGroupMembershipPayload((ZCL_GetGroupMembershipResponse_t *)req->requestPayload, payload);
   \                     ??getGroupMembershipInd_1: (+1)
   \   0000002C   0x6CFC             LDR      R4,[R7, #+76]
   \   0000002E   0x.... 0x....      BL       NWK_GroupCapacity
   \   00000032   0x7020             STRB     R0,[R4, #+0]
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x7060             STRB     R0,[R4, #+1]
   \   00000038   0x9908             LDR      R1,[SP, #+32]
   \   0000003A   0x7809             LDRB     R1,[R1, #+0]
   \   0000003C   0x2900             CMP      R1,#+0
   \   0000003E   0xD02A             BEQ      ??getGroupMembershipInd_3
   \   00000040   0x2500             MOVS     R5,#+0
   \                     ??getGroupMembershipInd_4: (+1)
   \   00000042   0x9808             LDR      R0,[SP, #+32]
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0x4285             CMP      R5,R0
   \   00000048   0xDA29             BGE      ??getGroupMembershipInd_5
   \   0000004A   0x9808             LDR      R0,[SP, #+32]
   \   0000004C   0x0069             LSLS     R1,R5,#+1
   \   0000004E   0x1846             ADDS     R6,R0,R1
   \   00000050   0x7870             LDRB     R0,[R6, #+1]
   \   00000052   0x78B1             LDRB     R1,[R6, #+2]
   \   00000054   0x0609             LSLS     R1,R1,#+24
   \   00000056   0x0C09             LSRS     R1,R1,#+16
   \   00000058   0x4308             ORRS     R0,R0,R1
   \   0000005A   0x2119             MOVS     R1,#+25
   \   0000005C   0x.... 0x....      BL       NWK_IsGroupMember
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD00C             BEQ      ??getGroupMembershipInd_6
   \   00000064   0x7861             LDRB     R1,[R4, #+1]
   \   00000066   0x1C48             ADDS     R0,R1,#+1
   \   00000068   0x7060             STRB     R0,[R4, #+1]
   \   0000006A   0x7870             LDRB     R0,[R6, #+1]
   \   0000006C   0x78B2             LDRB     R2,[R6, #+2]
   \   0000006E   0x0612             LSLS     R2,R2,#+24
   \   00000070   0x0C12             LSRS     R2,R2,#+16
   \   00000072   0x4310             ORRS     R0,R0,R2
   \   00000074   0x0049             LSLS     R1,R1,#+1
   \   00000076   0x1861             ADDS     R1,R4,R1
   \   00000078   0x7088             STRB     R0,[R1, #+2]
   \   0000007A   0x0A00             LSRS     R0,R0,#+8
   \   0000007C   0x70C8             STRB     R0,[R1, #+3]
   \                     ??getGroupMembershipInd_6: (+1)
   \   0000007E   0x1C6D             ADDS     R5,R5,#+1
   \   00000080   0xB2ED             UXTB     R5,R5
   \   00000082   0xE7DE             B        ??getGroupMembershipInd_4
   \                     ??getGroupMembershipInd_7: (+1)
   \   00000084   0x7861             LDRB     R1,[R4, #+1]
   \   00000086   0x1C4A             ADDS     R2,R1,#+1
   \   00000088   0x7062             STRB     R2,[R4, #+1]
   \   0000008A   0x0049             LSLS     R1,R1,#+1
   \   0000008C   0x1861             ADDS     R1,R4,R1
   \   0000008E   0x8842             LDRH     R2,[R0, #+2]
   \   00000090   0x708A             STRB     R2,[R1, #+2]
   \   00000092   0x0A12             LSRS     R2,R2,#+8
   \   00000094   0x70CA             STRB     R2,[R1, #+3]
   \                     ??getGroupMembershipInd_3: (+1)
   \   00000096   0x.... 0x....      BL       NWK_NextGroup
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD1F2             BNE      ??getGroupMembershipInd_7
    171            fillCommandRequest(req, ZCL_GROUPS_CLUSTER_GET_GROUP_MEMBERSHIP_RESPONSE_COMMAND_ID, size);
   \                     ??getGroupMembershipInd_5: (+1)
   \   0000009E   0x7860             LDRB     R0,[R4, #+1]
   \   000000A0   0x0042             LSLS     R2,R0,#+1
   \   000000A2   0x1C92             ADDS     R2,R2,#+2
   \   000000A4   0xB2D2             UXTB     R2,R2
   \   000000A6   0x2102             MOVS     R1,#+2
   \   000000A8   0x0038             MOVS     R0,R7
   \   000000AA   0x.... 0x....      BL       fillCommandRequest
    172            fillDstAddressingViaSourceAddressing(&req->dstAddressing, addressing, ZCL_CLUSTER_SIDE_CLIENT);
   \   000000AE   0x2201             MOVS     R2,#+1
   \   000000B0   0x9907             LDR      R1,[SP, #+28]
   \   000000B2   0x0038             MOVS     R0,R7
   \   000000B4   0x3020             ADDS     R0,R0,#+32
   \   000000B6   0x.... 0x....      BL       fillDstAddressingViaSourceAddressing
    173            commandManagerSendCommand(req);
   \   000000BA   0x0038             MOVS     R0,R7
   \   000000BC   0x.... 0x....      BL       commandManagerSendCommand
    174          
    175            (void)payloadLength;
    176            return ZCL_SUCCESS_STATUS;
   \                     ??getGroupMembershipInd_0: (+1)
   \   000000C0   0x2000             MOVS     R0,#+0
   \                     ??getGroupMembershipInd_2: (+1)
   \   000000C2   0xB009             ADD      SP,SP,#+36
   \   000000C4   0xBDF0             POP      {R4-R7,PC}       ;; return
    177          }
    178          
    179          /**************************************************************************//**
    180          \brief Callback on receiving Remove Group command
    181          
    182          \param[in] addressing - pointer to addressing information;
    183          \param[in] payloadLength - data payload length;
    184          \param[in] payload - data pointer
    185          
    186          \return status of indication routine
    187          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    188          static ZCL_Status_t removeGroupInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_RemoveGroup_t *payload)
    189          {
   \                     removeGroupInd: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x0016             MOVS     R6,R2
    190            ZCL_Request_t *req;
    191            uint8_t status;
    192          
    193            LOG_STRING(removeGroupStr, "removeGroupInd(): 0x%04x\r\n");
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R1,?_3
   \   0000000E   0x221C             MOVS     R2,#+28
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
    194            appSnprintf(removeGroupStr, payload->groupId);
   \   00000014   0x7831             LDRB     R1,[R6, #+0]
   \   00000016   0x7870             LDRB     R0,[R6, #+1]
   \   00000018   0x0600             LSLS     R0,R0,#+24
   \   0000001A   0x0C00             LSRS     R0,R0,#+16
   \   0000001C   0x4301             ORRS     R1,R1,R0
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x.... 0x....      BL       appSnprintf
    195          
    196            status = removeGroup(payload->groupId);
   \   00000024   0x7834             LDRB     R4,[R6, #+0]
   \   00000026   0x7870             LDRB     R0,[R6, #+1]
   \   00000028   0x0600             LSLS     R0,R0,#+24
   \   0000002A   0x0C00             LSRS     R0,R0,#+16
   \   0000002C   0x4304             ORRS     R4,R4,R0
   \   0000002E   0x2119             MOVS     R1,#+25
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       NWK_RemoveGroup
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD007             BEQ      ??removeGroupInd_0
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       removeScenesByGroup
   \   00000040   0x2017             MOVS     R0,#+23
   \   00000042   0x.... 0x....      BL       PDS_Store
   \   00000046   0x2400             MOVS     R4,#+0
   \   00000048   0xE000             B        ??removeGroupInd_1
   \                     ??removeGroupInd_0: (+1)
   \   0000004A   0x248B             MOVS     R4,#+139
    197          
    198            // If received via multicast or broadcast service no response shall be given
    199            if (addressing->nonUnicast)
   \                     ??removeGroupInd_1: (+1)
   \   0000004C   0x2023             MOVS     R0,#+35
   \   0000004E   0x5C38             LDRB     R0,[R7, R0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD11C             BNE      ??removeGroupInd_2
    200              return ZCL_SUCCESS_STATUS;
    201          
    202            if (!(req = getFreeCommand()))
   \   00000054   0x.... 0x....      BL       getFreeCommand
   \   00000058   0x0005             MOVS     R5,R0
   \   0000005A   0xD101             BNE      ??removeGroupInd_3
    203              return ZCL_INSUFFICIENT_SPACE_STATUS;
   \   0000005C   0x2089             MOVS     R0,#+137
   \   0000005E   0xE017             B        ??removeGroupInd_4
    204          
    205            fillCommandRequest(req, ZCL_GROUPS_CLUSTER_REMOVE_GROUP_RESPONSE_COMMAND_ID,
    206                                 sizeof(ZCL_RemoveGroupResponse_t));
   \                     ??removeGroupInd_3: (+1)
   \   00000060   0x2203             MOVS     R2,#+3
   \   00000062   0x2103             MOVS     R1,#+3
   \   00000064   0x.... 0x....      BL       fillCommandRequest
    207            thFillRemoveGroupResponsePayload((ZCL_RemoveGroupResponse_t *)req->requestPayload, payload->groupId, status);
   \   00000068   0x7830             LDRB     R0,[R6, #+0]
   \   0000006A   0x7871             LDRB     R1,[R6, #+1]
   \   0000006C   0x0609             LSLS     R1,R1,#+24
   \   0000006E   0x0C09             LSRS     R1,R1,#+16
   \   00000070   0x4308             ORRS     R0,R0,R1
   \   00000072   0x6CE9             LDR      R1,[R5, #+76]
   \   00000074   0x700C             STRB     R4,[R1, #+0]
   \   00000076   0x7048             STRB     R0,[R1, #+1]
   \   00000078   0x0A00             LSRS     R0,R0,#+8
   \   0000007A   0x7088             STRB     R0,[R1, #+2]
    208            fillDstAddressingViaSourceAddressing(&req->dstAddressing, addressing, ZCL_CLUSTER_SIDE_CLIENT);
   \   0000007C   0x2201             MOVS     R2,#+1
   \   0000007E   0x0039             MOVS     R1,R7
   \   00000080   0x0028             MOVS     R0,R5
   \   00000082   0x3020             ADDS     R0,R0,#+32
   \   00000084   0x.... 0x....      BL       fillDstAddressingViaSourceAddressing
    209            commandManagerSendCommand(req);
   \   00000088   0x0028             MOVS     R0,R5
   \   0000008A   0x.... 0x....      BL       commandManagerSendCommand
    210          
    211            (void)payloadLength;
    212            return ZCL_SUCCESS_STATUS;
   \                     ??removeGroupInd_2: (+1)
   \   0000008E   0x2000             MOVS     R0,#+0
   \                     ??removeGroupInd_4: (+1)
   \   00000090   0xB007             ADD      SP,SP,#+28
   \   00000092   0xBDF0             POP      {R4-R7,PC}       ;; return
    213          }
    214          
    215          /**************************************************************************//**
    216          \brief Callback on receiving Remove All Groups command
    217          
    218          \param[in] addressing - pointer to addressing information;
    219          \param[in] payloadLength - data payload length;
    220          \param[in] payload - data pointer
    221          
    222          \return status of indication routine
    223          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    224          static ZCL_Status_t removeAllGroupsInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, void *payload)
    225          {
   \                     removeAllGroupsInd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    226            LOG_STRING(removeAllGroupsStr, "removeAllGroupsInd()\r\n");
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0xBF00             Nop      
   \   00000008   0x....             ADR.N    R1,?_4
   \   0000000A   0x2218             MOVS     R2,#+24
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    227            appSnprintf(removeAllGroupsStr);
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x.... 0x....      BL       appSnprintf
    228          
    229            removeAllGroups();
   \   00000016   0x2400             MOVS     R4,#+0
   \   00000018   0xE002             B        ??removeAllGroupsInd_0
   \                     ??removeAllGroupsInd_1: (+1)
   \   0000001A   0x8860             LDRH     R0,[R4, #+2]
   \   0000001C   0x.... 0x....      BL       removeScenesByGroup
   \                     ??removeAllGroupsInd_0: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       NWK_NextGroup
   \   00000026   0x0004             MOVS     R4,R0
   \   00000028   0xD1F7             BNE      ??removeAllGroupsInd_1
   \   0000002A   0x2019             MOVS     R0,#+25
   \   0000002C   0x.... 0x....      BL       NWK_RemoveAllGroups
   \   00000030   0x2017             MOVS     R0,#+23
   \   00000032   0x.... 0x....      BL       PDS_Store
    230          
    231            (void)addressing, (void)payloadLength, (void)payload;
    232            return ZCL_SUCCESS_STATUS;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xB006             ADD      SP,SP,#+24
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    233          }
    234          
    235          /**************************************************************************//**
    236          \brief Callback on receiving Add Group If Identifying command
    237          
    238          \param[in] addressing - pointer to addressing information;
    239          \param[in] payloadLength - data payload length;
    240          \param[in] payload - data pointer
    241          
    242          \return status of indication routine
    243          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    244          static ZCL_Status_t addGroupIfidentifyingInd(ZCL_Addressing_t *addressing, uint8_t payloadLength, ZCL_AddGroupIfIdentifying_t * payload)
    245          {
   \                     addGroupIfidentifyingInd: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x0014             MOVS     R4,R2
    246            LOG_STRING(addGroupIfIdentifyingStr, "addGroupIfIdentifyingInd(): 0x%04x\r\n");
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x....             ADR.N    R1,?_5
   \   0000000A   0x2228             MOVS     R2,#+40
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    247            appSnprintf(addGroupIfIdentifyingStr, payload->groupId);
   \   00000010   0x7821             LDRB     R1,[R4, #+0]
   \   00000012   0x7860             LDRB     R0,[R4, #+1]
   \   00000014   0x0600             LSLS     R0,R0,#+24
   \   00000016   0x0C00             LSRS     R0,R0,#+16
   \   00000018   0x4301             ORRS     R1,R1,R0
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       appSnprintf
    248          
    249            addGroupIfIdentifying(payload->groupId);
   \   00000020   0x7825             LDRB     R5,[R4, #+0]
   \   00000022   0x7860             LDRB     R0,[R4, #+1]
   \   00000024   0x0600             LSLS     R0,R0,#+24
   \   00000026   0x0C00             LSRS     R0,R0,#+16
   \   00000028   0x4305             ORRS     R5,R5,R0
   \   0000002A   0x.... 0x....      BL       identifyIsIdentifying
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD009             BEQ      ??addGroupIfidentifyingInd_0
   \   00000032   0x2119             MOVS     R1,#+25
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0x.... 0x....      BL       NWK_IsGroupMember
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD103             BNE      ??addGroupIfidentifyingInd_0
   \   0000003E   0x2119             MOVS     R1,#+25
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0x.... 0x....      BL       NWK_AddGroup
    250          
    251            (void)addressing, (void)payloadLength;
    252            return ZCL_SUCCESS_STATUS;
   \                     ??addGroupIfidentifyingInd_0: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xB00B             ADD      SP,SP,#+44
   \   0000004A   0xBD30             POP      {R4,R5,PC}       ;; return
    253          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     thGroupsClusterServerAttributes

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x61 0x64          DC8 "addGroupInd(): 0x%04x\015\012"
   \              0x64 0x47    
   \              0x72 0x6F    
   \              0x75 0x70    
   \              0x49 0x6E    
   \              0x64 0x28    
   \              0x29 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x34    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x76 0x69          DC8 "viewGroupInd(): 0x%04x\015\012"
   \              0x65 0x77    
   \              0x47 0x72    
   \              0x6F 0x75    
   \              0x70 0x49    
   \              0x6E 0x64    
   \              0x28 0x29    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x67 0x65          DC8 "getGroupMembershipInd()\015\012"
   \              0x74 0x47    
   \              0x72 0x6F    
   \              0x75 0x70    
   \              0x4D 0x65    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x73 0x68    
   \              0x69 0x70    
   \              0x49 0x6E    
   \              0x64 0x28    
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x72 0x65          DC8 "removeGroupInd(): 0x%04x\015\012"
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x47 0x72    
   \              0x6F 0x75    
   \              0x70 0x49    
   \              0x6E 0x64    
   \              0x28 0x29    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x72 0x65          DC8 "removeAllGroupsInd()\015\012"
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x41 0x6C    
   \              0x6C 0x47    
   \              0x72 0x6F    
   \              0x75 0x70    
   \              0x73 0x49    
   \              0x6E 0x64    
   \              0x28 0x29    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x61 0x64          DC8 "addGroupIfIdentifyingInd(): 0x%04x\015\012"
   \              0x64 0x47    
   \              0x72 0x6F    
   \              0x75 0x70    
   \              0x49 0x66    
   \              0x49 0x64    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x69 0x6E    
   \              0x67 0x49    
   \              0x6E 0x64    
   \              0x28 0x29    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    254          
    255          /**************************************************************************//**
    256          \brief Fills Add Group Response command structure
    257          
    258          \param[out] payload - pointer to command structure;
    259          \param[in]  group   - group id;
    260          \param[in]  status  - status of group adding
    261          ******************************************************************************/
    262          static void thFillAddGroupResponsePayload(ZCL_AddGroupResponse_t *payload, uint16_t group, uint8_t status)
    263          {
    264            payload->status  = status;
    265            payload->groupId = group;
    266          }
    267          
    268          /**************************************************************************//**
    269          \brief Fills View Group Response command structure
    270          
    271          \param[out] payload - pointer to command structure;
    272          \param[in]  group   - group id
    273          ******************************************************************************/
    274          static void thFillViewGroupResponsePayload(ZCL_ViewGroupResponse_t *payload, uint16_t group)
    275          {
    276            if (NWK_IsGroupMember(group, APP_SRC_ENDPOINT_ID))
    277              payload->status = ZCL_SUCCESS_STATUS;
    278            else
    279              payload->status = ZCL_NOT_FOUND_STATUS;
    280            payload->groupId = group;
    281          }
    282          
    283          /**************************************************************************//**
    284          \brief Fills Get Group Membership Response command structure
    285          
    286          \param[out] payload - pointer to command structure;
    287          \param[in]  req     - pointer to appropriate request
    288          
    289          \returns the amount of group ids in reponse
    290          ******************************************************************************/
    291          static uint8_t thFillGetGroupMembershipPayload(ZCL_GetGroupMembershipResponse_t *payload, ZCL_GetGroupMembership_t *req)
    292          {
    293            payload->capacity   = NWK_GroupCapacity();
    294            payload->groupCount = 0;
    295          
    296            if (req->groupCount)
    297              for (uint8_t i = 0; i < req->groupCount; i++)
    298              {
    299                if (NWK_IsGroupMember(req->groupList[i], APP_SRC_ENDPOINT_ID))
    300                  payload->groupList[payload->groupCount++] = req->groupList[i];
    301              }
    302            else
    303            {
    304              NWK_GroupTableEntry_t *group = NULL;
    305          
    306              while ((group = NWK_NextGroup(group)))
    307                payload->groupList[payload->groupCount++] = group->addr;
    308            }
    309          
    310            return sizeof(ZCL_GetGroupMembershipResponse_t) + sizeof(uint16_t) * payload->groupCount - sizeof(uint16_t);
    311          }
    312          
    313          /**************************************************************************//**
    314          \brief Fills Remove Group Response command structure
    315          
    316          \param[out] payload - pointer to command structure;
    317          \param[in]  group   - group id;
    318          \param[in]  status  - status of group adding
    319          ******************************************************************************/
    320          static void thFillRemoveGroupResponsePayload(ZCL_RemoveGroupResponse_t *payload, uint16_t group, uint8_t status)
    321          {
    322            payload->status  = status;
    323            payload->groupId = group;
    324          }
    325          
    326          /**************************************************************************//**
    327          \brief Adds group to group table
    328          
    329          \param[in] group - group id
    330          
    331          \returns status of group adding
    332          ******************************************************************************/
    333          static ZCL_Status_t addGroup(uint16_t group)
    334          {
    335            if (!NWK_IsGroupMember(group, APP_SRC_ENDPOINT_ID))
    336            {
    337              if (NWK_AddGroup(group, APP_SRC_ENDPOINT_ID))
    338                return ZCL_SUCCESS_STATUS;
    339              else
    340                return ZCL_INSUFFICIENT_SPACE_STATUS;
    341            }
    342          
    343            return ZCL_DUPLICATE_EXISTS_STATUS;
    344          }
    345          
    346          /**************************************************************************//**
    347          \brief Removes group from group table
    348          
    349          \param[in] group - group id
    350          
    351          \returns status of group removing
    352          ******************************************************************************/
    353          static ZCL_Status_t removeGroup(uint16_t group)
    354          {
    355            if (NWK_RemoveGroup(group, APP_SRC_ENDPOINT_ID))
    356            {
    357              removeScenesByGroup(group);
    358              PDS_Store(APP_TH_SCENES_MEM_ID);
    359              return ZCL_SUCCESS_STATUS;
    360            }
    361            else
    362              return ZCL_NOT_FOUND_STATUS;
    363          }
    364          
    365          /**************************************************************************//**
    366          \brief Removes all groups from group table
    367          ******************************************************************************/
    368          static void removeAllGroups(void)
    369          {
    370            NWK_GroupTableEntry_t *group = NULL;
    371          
    372            while (NULL != (group = NWK_NextGroup(group)))
    373              removeScenesByGroup(group->addr);
    374          
    375            NWK_RemoveAllGroups(APP_SRC_ENDPOINT_ID);
    376            PDS_Store(APP_TH_SCENES_MEM_ID);
    377          }
    378          
    379          /**************************************************************************//**
    380          \brief Adds group to group table if device is in identifying state
    381          
    382          \param[in] group - group id
    383          ******************************************************************************/
    384          static void addGroupIfIdentifying(uint16_t group)
    385          {
    386            if (identifyIsIdentifying())
    387              if (!NWK_IsGroupMember(group, APP_SRC_ENDPOINT_ID))
    388                NWK_AddGroup(group, APP_SRC_ENDPOINT_ID);
    389          }
    390          
    391          #endif // APP_DEVICE_TYPE_THERMOSTAT
    392          // eof thGroupsCluster.c
    393          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   addGroupIfidentifyingInd
        56   -> NWK_AddGroup
        56   -> NWK_IsGroupMember
        56   -> __aeabi_memcpy4
        56   -> appSnprintf
        56   -> identifyIsIdentifying
      48   addGroupInd
        48   -> NWK_AddGroup
        48   -> NWK_IsGroupMember
        48   -> __aeabi_memcpy4
        48   -> appSnprintf
        48   -> commandManagerSendCommand
        48   -> fillCommandRequest
        48   -> fillDstAddressingViaSourceAddressing
        48   -> getFreeCommand
      56   getGroupMembershipInd
        56   -> NWK_GroupCapacity
        56   -> NWK_IsGroupMember
        56   -> NWK_NextGroup
        56   -> __aeabi_memcpy4
        56   -> appSnprintf
        56   -> commandManagerSendCommand
        56   -> fillCommandRequest
        56   -> fillDstAddressingViaSourceAddressing
        56   -> getFreeCommand
       0   groupsClusterInit
      32   removeAllGroupsInd
        32   -> NWK_NextGroup
        32   -> NWK_RemoveAllGroups
        32   -> PDS_Store
        32   -> __aeabi_memcpy4
        32   -> appSnprintf
        32   -> removeScenesByGroup
      48   removeGroupInd
        48   -> NWK_RemoveGroup
        48   -> PDS_Store
        48   -> __aeabi_memcpy4
        48   -> appSnprintf
        48   -> commandManagerSendCommand
        48   -> fillCommandRequest
        48   -> fillDstAddressingViaSourceAddressing
        48   -> getFreeCommand
        48   -> removeScenesByGroup
      48   viewGroupInd
        48   -> NWK_IsGroupMember
        48   -> __aeabi_memcpy4
        48   -> appSnprintf
        48   -> commandManagerSendCommand
        48   -> fillCommandRequest
        48   -> fillDstAddressingViaSourceAddressing
        48   -> getFreeCommand


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
      24  ?_0
      28  ?_1
      28  ?_2
      28  ?_3
      24  ?_4
      40  ?_5
      76  addGroupIfidentifyingInd
     152  addGroupInd
     198  getGroupMembershipInd
       8  groupsClusterInit
      60  removeAllGroupsInd
     148  removeGroupInd
       8  thGroupsClusterServerAttributes
      80  thGroupsCommands
     126  viewGroupInd

 
  88 bytes in section .data
 944 bytes in section .text
 
 944 bytes of CODE memory
  88 bytes of DATA memory

Errors: none
Warnings: none
