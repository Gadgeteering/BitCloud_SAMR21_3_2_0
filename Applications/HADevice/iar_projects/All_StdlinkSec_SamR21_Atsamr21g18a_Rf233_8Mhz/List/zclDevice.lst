###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        31/Mar/2015  18:41:18
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\common\src\zclDevice.c
#    Command line =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\common\src\zclDevice.c
#        -D BOARD_SAMR21 -D BOARD_QTOUCH_XPRO -D AT86RF233 -D ATSAMR21G18A -D
#        HAL_8MHz -D STACK_TYPE_ALL -D STDLINK_SECURITY_MODE -lC
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\
#        --diag_suppress Pa050,Pe188 -o
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        7.30\arm\INC\c\DLib_Config_Full.h" --preinclude
#        MakerulesBc_All_StdlinkSec_Atsamr21g18a_Rf233_Iar.h -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/..\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmableLight/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../dimmerSwitch/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../multiSensor/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../thermostat/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../ias_ace/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../combinedInterface/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../common/clusters/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/SAMR21/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/lib\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/BSP/QTouch_XPRO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/NWK/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZDO/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/APS/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/SystemEnvironment/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ConfigServer/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/std/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/PersistDataServer/wl/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Types/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Util/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Timer/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Task/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_ErrH/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Log/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Memory/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/Infrastructure/N_Init/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_Nv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/D_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZLLPlatform/ZLL/S_XNv/src\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/TrustCentre/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/Security/ServiceProvider/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/drivers/VCP/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/HAL/cortexm0+/atsamr21/common/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include/private\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/ZCL/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_ENV/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWI/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/PHY/include\
#        -I
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects/../../../BitCloud/Components/MAC_PHY/MAC_HWD_PHY/RF231_RF212/MAC_HWD/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/List\zclDevice.lst
#    Object file  =  
#        D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\iar_projects\All_StdlinkSec_SamR21_Atsamr21g18a_Rf233_8Mhz/Obj\zclDevice.o
#
###############################################################################

D:\support_project\Qtouch_samr21_validation\BitCloud_SAMR21_3_2_0\BitCloud_SAMR21_3_2_0\Applications\HADevice\common\src\zclDevice.c
      1          /************************************************************************//**
      2            \file zclDevice.c
      3          
      4            \brief
      5              Devices common function application.
      6          
      7            \author
      8              Atmel Corporation: http://www.atmel.com \n
      9              Support email: avr@atmel.com
     10          
     11            Copyright (c) 2008-2015, Atmel Corporation. All rights reserved.
     12            Licensed under Atmel's Limited License Agreement (BitCloudTM).
     13          
     14            \internal
     15              History:
     16              26/12/14 Prashanth.Udumula - modified
     17          ******************************************************************************/
     18          
     19          /*******************************************************************************
     20                                       Includes section
     21          *******************************************************************************/
     22          #include <apsConfigServer.h>

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SYS_PostTask(SYS_TaskId_t)
   \                     SYS_PostTask: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       halStartAtomic
   \   0000000C   0x....             LDR      R0,??DataTable8_2
   \   0000000E   0x8801             LDRH     R1,[R0, #+0]
   \   00000010   0x430C             ORRS     R4,R4,R1
   \   00000012   0x8004             STRH     R4,[R0, #+0]
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x.... 0x....      BL       halEndAtomic
   \   0000001A   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     23          #include <zclDevice.h>
     24          #include <uartManager.h>
     25          #include <zclSecurityManager.h>
     26          #include <pdsDataServer.h>
     27          #include <identifyCluster.h>
     28          #include <ezModeManager.H>
     29          #include <sysTaskManager.h>
     30          #include <resetReason.h>
     31          #include <bspUid.h>
     32          #ifdef ZAPPSI_HOST
     33          #include <zsiNotify.h>
     34          #endif
     35          #if defined ZAPPSI_HOST && defined WIN
     36          #include <keyboardPoll.h>
     37          #endif
     38          
     39          /******************************************************************************
     40                              Definitions section
     41          *******************************************************************************/
     42          #define MAX_ATTEMPS_TO_FIND_CLUSTER  7
     43          #define MAX_ATTEMPS_TO_ENTER_NETWORK 3
     44          
     45          /******************************************************************************
     46                              Types section
     47          ******************************************************************************/
     48          typedef enum
     49          {
     50            APP_INITIAL_STATE,
     51            APP_START_WAIT_STATE,
     52            APP_START_NETWORK_STATE,
     53            APP_NETWORK_JOINING_STATE,
     54            APP_IN_NETWORK_STATE,
     55            APP_RESETTING_STACK_STATE,
     56          } AppState_t;
     57          
     58          /*******************************************************************************
     59                              Static functions section
     60          *******************************************************************************/
     61          static void ZDO_StartNetworkConf(ZDO_StartNetworkConf_t *conf);
     62          static void initApp(void);
     63          static void startNetwork(void);
     64          static DeviceType_t detectNwkAddrAndDevType(void);
     65          static void zdoResetNwkConf(ZDO_ResetNetworkConf_t *conf);
     66          static void setDeviceJoinParameters(bool discoverNetworks, bool clearNeighborTable);
     67          static void  nwkLeaveIndHandler(SYS_EventId_t eventId, SYS_EventData_t data);
     68          
     69          /*******************************************************************************
     70                              Global variables section
     71          *******************************************************************************/

   \                                 In section .data, align 8
     72          AppDeviceState_t appDeviceState = DEVICE_INITIAL_STATE;
   \                     appDeviceState:
   \   00000000   0x00               DC8 0
   \   00000001   0x00               DC8 0
   \   00000002   0x00               DC8 0
   \   00000003   0x01               DC8 1
   \   00000004   0x00               DC8 0
   \   00000005   0x00               DC8 0
   \   00000006   0x00 0x00          DC8 0, 0
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000018   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000028   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000038   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   0000003C   0x00000000         DC32 0H
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000050   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000065   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000068   0x........         DC32 zdoResetNwkConf
   \   0000006C   0x00000000         DC32 0H
   \   00000070   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000078   0x........         DC32 nwkLeaveIndHandler
     73          
     74          /*******************************************************************************
     75                              Local variables section
     76          *******************************************************************************/
     77          static AppState_t appState = APP_INITIAL_STATE;
     78          static ZDO_StartNetworkReq_t  zdoStartNetworkReq;
     79          static uint8_t startNetworkAttempts;
     80          static bool startBindingAndFinding = true;
     81          static bool resetToFactoryNew = false;
     82          static ZDO_ResetNetworkReq_t zdoResetNwkReq =
     83          {
     84            .ZDO_ResetNetworkConf = zdoResetNwkConf
     85          };
     86          static bool restored;
     87          static ChannelsMask_t channelMask;
     88          #if (USE_IMAGE_SECURITY == 1)
     89          static void configureImageKeyDone(void);
     90          #endif
     91          static SYS_EventReceiver_t nwkLeaveIndListener =  { .func = nwkLeaveIndHandler};
     92          
     93          /*******************************************************************************
     94                              Implementation section
     95          *******************************************************************************/
     96          /**************************************************************************//**
     97          \brief Application task handler
     98          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     99          void APL_TaskHandler(void)
    100          {
   \                     APL_TaskHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    101            switch (appState)
   \   00000002   0x....             LDR      R4,??DataTable8
   \   00000004   0x7860             LDRB     R0,[R4, #+1]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD004             BEQ      ??APL_TaskHandler_0
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD005             BEQ      ??APL_TaskHandler_1
   \   0000000E   0x2804             CMP      R0,#+4
   \   00000010   0xD011             BEQ      ??APL_TaskHandler_2
   \   00000012   0xBD10             POP      {R4,PC}
    102            {
    103              // node is in initial state
    104              case APP_INITIAL_STATE:                 // Initial (after RESET) state
    105                initApp();                            // Init application
   \                     ??APL_TaskHandler_0: (+1)
   \   00000014   0x.... 0x....      BL       initApp
    106                break;
   \   00000018   0xBD10             POP      {R4,PC}
    107          
    108              case APP_START_NETWORK_STATE:
    109                startNetwork();                       // Start/joing network
   \                     ??APL_TaskHandler_1: (+1)
   \   0000001A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000001C   0x1C41             ADDS     R1,R0,#+1
   \   0000001E   0x70A1             STRB     R1,[R4, #+2]
   \   00000020   0x2803             CMP      R0,#+3
   \   00000022   0xD005             BEQ      ??APL_TaskHandler_3
   \   00000024   0x....             LDR      R0,??DataTable8_3
   \   00000026   0x6320             STR      R0,[R4, #+48]
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x3008             ADDS     R0,R0,#+8
   \   0000002C   0x.... 0x....      BL       ZDO_StartNetworkReq
    110                appState = APP_NETWORK_JOINING_STATE;
   \                     ??APL_TaskHandler_3: (+1)
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0x7060             STRB     R0,[R4, #+1]
   \   00000034   0xBD10             POP      {R4,PC}
    111          
    112              case APP_NETWORK_JOINING_STATE:         // Network is in the joining stage
    113                break;
    114          
    115              case APP_IN_NETWORK_STATE:              // Normal operating
    116                appDeviceTaskHandler();
   \                     ??APL_TaskHandler_2: (+1)
   \   00000036   0x.... 0x....      BL       appDeviceTaskHandler
    117                break;
    118              default:
    119                break;
    120            }
    121          }
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    122          
    123          #ifdef ZAPPSI_HOST
    124          /**************************************************************************//**
    125          \brief Indicates zsi status update.
    126          
    127          \param[out] notf - ZSI staus update indication parameters structure pointer. For details go to
    128                      ZSI_UpdateNotf_t declaration.
    129          \return none
    130          ******************************************************************************/
    131          void ZSI_StatusUpdateNotf(ZSI_UpdateNotf_t *notf)
    132          {
    133            (void)notf;
    134          }
    135          
    136          /**************************************************************************//**
    137          \brief Indicates reset Application.
    138          
    139          \param[out]
    140          \return none
    141          ******************************************************************************/
    142          void restartApp(void)
    143          {
    144            appState = APP_INITIAL_STATE;
    145            appDeviceState = DEVICE_INITIAL_STATE;
    146            resetEzModeInProgress();
    147            idenityResetSubscribers();
    148            SYS_SysInit();
    149          }
    150          #endif // ZAPPSI_HOST
    151          
    152          /**************************************************************************//**
    153          \brief Network update notification
    154          
    155          \param[in] nwkParams - update notification parameters
    156          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    157          void ZDO_MgmtNwkUpdateNotf(ZDO_MgmtNwkUpdateNotf_t *nwkParams)
    158          {
   \                     ZDO_MgmtNwkUpdateNotf: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x0004             MOVS     R4,R0
    159            LOG_STRING(nwkUpdateStatusStr, "Network update status - 0x%02x\r\n");
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x....             ADR.N    R1,?_0
   \   0000000A   0x2224             MOVS     R2,#+36
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy4
    160          
    161            appSnprintf(nwkUpdateStatusStr, nwkParams->status);
   \   00000010   0x7821             LDRB     R1,[R4, #+0]
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       appSnprintf
    162            switch (nwkParams->status)
   \   00000018   0x7820             LDRB     R0,[R4, #+0]
   \   0000001A   0x2891             CMP      R0,#+145
   \   0000001C   0xD11A             BNE      ??ZDO_MgmtNwkUpdateNotf_0
    163            {
    164              case ZDO_NETWORK_LEFT_STATUS:
    165              {
    166                if (!resetToFactoryNew)
   \   0000001E   0x....             LDR      R4,??DataTable8
   \   00000020   0x7920             LDRB     R0,[R4, #+4]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD111             BNE      ??ZDO_MgmtNwkUpdateNotf_1
    167                {
    168                  // Make end device try to rejoin to any device of the same network it was before reset
    169                  setDeviceJoinParameters(true, true);
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       setDeviceJoinParameters
    170                  startNetworkAttempts = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x70A0             STRB     R0,[R4, #+2]
    171                  resetEzModeInProgress();
   \   00000032   0x.... 0x....      BL       resetEzModeInProgress
    172          
    173                  identifyUpdateCommissioningState(false, false);
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       identifyUpdateCommissioningState
    174                  appState = APP_START_NETWORK_STATE;
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x7060             STRB     R0,[R4, #+1]
    175          
    176                  SYS_PostTask(APL_TASK_ID);
   \   00000042   0x02C0             LSLS     R0,R0,#+11
   \   00000044   0x.... 0x....      BL       SYS_PostTask
   \   00000048   0xE004             B        ??ZDO_MgmtNwkUpdateNotf_0
    177                }
    178          #ifndef ZAPPSI_HOST
    179                else // reset the device to factory new
    180                {
    181                  PDS_DeleteAll(false);
   \                     ??ZDO_MgmtNwkUpdateNotf_1: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      BL       PDS_DeleteAll
    182                  HAL_WarmReset();
   \   00000050   0x.... 0x....      BL       HAL_WarmReset
    183                }
    184          #endif
    185              }
    186              break;
    187          
    188              default:
    189                break;
    190            }
    191          }
   \                     ??ZDO_MgmtNwkUpdateNotf_0: (+1)
   \   00000054   0xB00A             ADD      SP,SP,#+40
   \   00000056   0xBD10             POP      {R4,PC}          ;; return
    192          
    193          /**************************************************************************//**
    194          \brief End device wake up indication (required by stack)
    195          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    196          void ZDO_WakeUpInd(void)
    197          {}
   \                     ZDO_WakeUpInd: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    198          
    199          /**************************************************************************//**
    200          \brief Restarts application
    201          
    202          \param[in] startBinding - if true then device starts finding and binding procedure
    203          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    204          void appRestart(bool startBinding)
    205          {
   \                     appRestart: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    206            if (APP_RESETTING_STACK_STATE != appState)
   \   00000002   0x....             LDR      R4,??DataTable8
   \   00000004   0x7861             LDRB     R1,[R4, #+1]
   \   00000006   0x2905             CMP      R1,#+5
   \   00000008   0xD008             BEQ      ??appRestart_0
    207              appState = APP_RESETTING_STACK_STATE;
   \   0000000A   0x2105             MOVS     R1,#+5
   \   0000000C   0x7061             STRB     R1,[R4, #+1]
    208            else
    209              return;
    210          
    211            startBindingAndFinding = startBinding;
   \   0000000E   0x70E0             STRB     R0,[R4, #+3]
    212          
    213            appStop();
   \   00000010   0x.... 0x....      BL       appStop
    214            ZDO_ResetNetworkReq(&zdoResetNwkReq);
   \   00000014   0x343C             ADDS     R4,R4,#+60
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       ZDO_ResetNetworkReq
    215          }
   \                     ??appRestart_0: (+1)
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    216          
    217          /**************************************************************************//**
    218          \brief Application and stack parameters initialization
    219          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    220          static void initApp(void)
    221          {
   \                     initApp: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    222            ExtAddr_t extAddr;
    223            //Reads the UID set in configuration.h
    224            CS_ReadParameter(CS_UID_ID,&extAddr);
   \   00000004   0x4669             MOV      R1,SP
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       CS_ReadParameter
    225            if (extAddr == 0 || extAddr > APS_MAX_UNICAST_EXT_ADDRESS)
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0xC803             LDM      R0,{R0,R1}
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD101             BNE      ??initApp_0
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD008             BEQ      ??initApp_1
   \                     ??initApp_0: (+1)
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0xC803             LDM      R0,{R0,R1}
   \   0000001C   0x....             ADR      R2,??DataTable8_1
   \   0000001E   0xCA0C             LDM      R2,{R2,R3}
   \   00000020   0x4299             CMP      R1,R3
   \   00000022   0xD309             BCC      ??initApp_2
   \   00000024   0xD801             BHI      ??initApp_1
   \   00000026   0x4290             CMP      R0,R2
   \   00000028   0xD306             BCC      ??initApp_2
    226            {
    227              BSP_ReadUid(&extAddr); //Will read the UID from chip
   \                     ??initApp_1: (+1)
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x.... 0x....      BL       BSP_ReadUid
    228              CS_WriteParameter(CS_UID_ID, &extAddr); //Writes the read UID to the ram
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       CS_WriteParameter
    229            }
    230          
    231            DeviceType_t deviceType;
    232          
    233            CS_WriteParameter(CS_PERMIT_DURATION_ID, &(uint8_t){0});
   \                     ??initApp_2: (+1)
   \   00000038   0x2700             MOVS     R7,#+0
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0x728F             STRB     R7,[R1, #+10]
   \   0000003E   0xA902             ADD      R1,SP,#+8
   \   00000040   0x1C89             ADDS     R1,R1,#+2
   \   00000042   0x2017             MOVS     R0,#+23
   \   00000044   0x.... 0x....      BL       CS_WriteParameter
    234            CS_ReadParameter(CS_CHANNEL_MASK_ID, &channelMask);
   \   00000048   0x....             LDR      R4,??DataTable8
   \   0000004A   0x0021             MOVS     R1,R4
   \   0000004C   0x3138             ADDS     R1,R1,#+56
   \   0000004E   0x2019             MOVS     R0,#+25
   \   00000050   0x.... 0x....      BL       CS_ReadParameter
    235          
    236            appState = APP_START_WAIT_STATE;
   \   00000054   0x2601             MOVS     R6,#+1
   \   00000056   0x7066             STRB     R6,[R4, #+1]
    237            deviceType = detectNwkAddrAndDevType();
   \   00000058   0x2502             MOVS     R5,#+2
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x7205             STRB     R5,[R0, #+8]
    238            // Set parameters to config server
    239            CS_WriteParameter(CS_DEVICE_TYPE_ID, &deviceType);
   \   0000005E   0xA902             ADD      R1,SP,#+8
   \   00000060   0x2021             MOVS     R0,#+33
   \   00000062   0x.... 0x....      BL       CS_WriteParameter
    240            
    241            // In this application the Combined interface is the TrustCenter
    242            // assign extended address of the Coombined interface to the TrustCenter
    243          #ifdef APP_DEVICE_TYPE_COMBINED_INTERFACE
    244            // Trust center address shall be address of combined interface
    245            CS_WriteParameter(CS_APS_TRUST_CENTER_ADDRESS_ID, &extAddr);
    246          #else
    247            // For other devices the TrustCenter address should 
    248            // be APS_UNIVERSAL_EXTENDED_ADDRESS for them to discover the TrustCenter
    249            extAddr = APS_UNIVERSAL_EXTENDED_ADDRESS;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000006A   0x4601             MOV      R1,R0
   \   0000006C   0x466A             MOV      R2,SP
   \   0000006E   0xC203             STM      R2!,{R0,R1}
    250            CS_WriteParameter(CS_APS_TRUST_CENTER_ADDRESS_ID, &extAddr);
   \   00000070   0x4669             MOV      R1,SP
   \   00000072   0x2034             MOVS     R0,#+52
   \   00000074   0x.... 0x....      BL       CS_WriteParameter
    251          #endif
    252          
    253            if (APP_DEVICE_TYPE == DEV_TYPE_ENDDEVICE)
    254            {
    255              bool rxOnWhenIdle = false;
   \   00000078   0x4668             MOV      R0,SP
   \   0000007A   0x7247             STRB     R7,[R0, #+9]
    256              CS_WriteParameter(CS_RX_ON_WHEN_IDLE_ID, &rxOnWhenIdle);
   \   0000007C   0xA902             ADD      R1,SP,#+8
   \   0000007E   0x1C49             ADDS     R1,R1,#+1
   \   00000080   0x201D             MOVS     R0,#+29
   \   00000082   0x.... 0x....      BL       CS_WriteParameter
    257            }
    258          
    259            appState = APP_START_NETWORK_STATE;   // Application state to join network switching
   \   00000086   0x7065             STRB     R5,[R4, #+1]
    260            SYS_PostTask(APL_TASK_ID);
   \   00000088   0x02E8             LSLS     R0,R5,#+11
   \   0000008A   0x.... 0x....      BL       SYS_PostTask
    261            SYS_SubscribeToEvent(BC_EVENT_LEAVE_COMMAND_RECEIVED, &nwkLeaveIndListener);
   \   0000008E   0x0021             MOVS     R1,R4
   \   00000090   0x316C             ADDS     R1,R1,#+108
   \   00000092   0x2035             MOVS     R0,#+53
   \   00000094   0x.... 0x....      BL       SYS_SubscribeToEvent
    262          
    263            initEzModeManager(appIsInitiator());
   \   00000098   0x.... 0x....      BL       appIsInitiator
   \   0000009C   0x.... 0x....      BL       initEzModeManager
    264          #ifndef ZAPPSI_HOST
    265            PDS_StoreByEvents(BC_ALL_MEMORY_MEM_ID);
   \   000000A0   0x....             LDR      R5,??DataTable8_4  ;; 0x4001
   \   000000A2   0x0028             MOVS     R0,R5
   \   000000A4   0x.... 0x....      BL       PDS_StoreByEvents
    266            if (PDS_IsAbleToRestore(BC_ALL_MEMORY_MEM_ID) && PDS_Restore(BC_ALL_MEMORY_MEM_ID))
   \   000000A8   0x0028             MOVS     R0,R5
   \   000000AA   0x.... 0x....      BL       PDS_IsAbleToRestore
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xD00A             BEQ      ??initApp_3
   \   000000B2   0x0028             MOVS     R0,R5
   \   000000B4   0x.... 0x....      BL       PDS_Restore
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD005             BEQ      ??initApp_3
    267            {
    268              // Make end device try to rejoin to its parent on the same channel and to the same network it was before reset
    269              // Make router to do silent join while retaining the neighbor table entries
    270              setDeviceJoinParameters(false, false);
   \   000000BC   0x2100             MOVS     R1,#+0
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x.... 0x....      BL       setDeviceJoinParameters
    271              restored = true;
   \   000000C4   0x7166             STRB     R6,[R4, #+5]
    272              appDeviceInit();
   \   000000C6   0xE009             B        ??initApp_4
    273              return;
    274            }
    275            else if(PDS_IsAbleToRestore(NWK_SECURITY_COUNTERS_ITEM_ID))
   \                     ??initApp_3: (+1)
   \   000000C8   0x2006             MOVS     R0,#+6
   \   000000CA   0x.... 0x....      BL       PDS_IsAbleToRestore
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD002             BEQ      ??initApp_5
    276            {
    277              PDS_Restore(NWK_SECURITY_COUNTERS_ITEM_ID); 
   \   000000D2   0x2006             MOVS     R0,#+6
   \   000000D4   0x.... 0x....      BL       PDS_Restore
    278            }
    279          #endif
    280          
    281          #if (USE_IMAGE_SECURITY == 1)
    282            ZCL_ConfigureOtauImageKey(configureImageKeyDone);
    283          #endif
    284          
    285            appSecurityInit();
   \                     ??initApp_5: (+1)
   \   000000D8   0x.... 0x....      BL       appSecurityInit
    286            appDeviceInit();
   \                     ??initApp_4: (+1)
   \   000000DC   0x.... 0x....      BL       appDeviceInit
    287          }
   \   000000E0   0xB005             ADD      SP,SP,#+20
   \   000000E2   0xBDF0             POP      {R4-R7,PC}       ;; return
    288          
    289          #if (USE_IMAGE_SECURITY == 1)
    290          /**************************************************************************//**
    291          \brief Callback about confguring image key on EEPROM
    292          ******************************************************************************/
    293          static void configureImageKeyDone(void)
    294          {}
    295          #endif
    296          
    297          /**************************************************************************//**
    298          \brief ZDO_StartNetwork primitive confirmation was received
    299          
    300          \param[in] confirmInfo - confirmation information
    301          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    302          static void ZDO_StartNetworkConf(ZDO_StartNetworkConf_t *confInfo)
    303          {
   \                     ZDO_StartNetworkConf: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0005             MOVS     R5,R0
    304            SYS_PostTask(APL_TASK_ID);
   \   00000006   0x2080             MOVS     R0,#+128
   \   00000008   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \   0000000A   0x.... 0x....      BL       SYS_PostTask
    305            // Joined network successfully
    306            if (ZDO_SUCCESS_STATUS == confInfo->status)   // Network was started successfully
   \   0000000E   0x....             LDR      R4,??DataTable8
   \   00000010   0x7CA8             LDRB     R0,[R5, #+18]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD122             BNE      ??ZDO_StartNetworkConf_0
    307            {
    308              ExtPanId_t extPanId;
    309              /* Set the target extended PANID to be equal to the extended PANID of the joined PAN
    310               to ensure device won't join other networks. */
    311              CS_ReadParameter(CS_NWK_EXT_PANID_ID,&extPanId);
   \   00000016   0xA902             ADD      R1,SP,#+8
   \   00000018   0x2006             MOVS     R0,#+6
   \   0000001A   0x.... 0x....      BL       CS_ReadParameter
    312              CS_WriteParameter(CS_EXT_PANID_ID, &extPanId);
   \   0000001E   0xA902             ADD      R1,SP,#+8
   \   00000020   0x2018             MOVS     R0,#+24
   \   00000022   0x.... 0x....      BL       CS_WriteParameter
    313          
    314              CS_WriteParameter(CS_CHANNEL_MASK_ID, &channelMask);
   \   00000026   0x0021             MOVS     R1,R4
   \   00000028   0x3138             ADDS     R1,R1,#+56
   \   0000002A   0x2019             MOVS     R0,#+25
   \   0000002C   0x.... 0x....      BL       CS_WriteParameter
    315              if (appDeviceState != DEVICE_ACTIVE_IDLE_STATE)
   \   00000030   0x2500             MOVS     R5,#+0
   \   00000032   0x7820             LDRB     R0,[R4, #+0]
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD000             BEQ      ??ZDO_StartNetworkConf_1
    316                appDeviceState = DEVICE_INITIAL_STATE;        // Set device state
   \   00000038   0x7025             STRB     R5,[R4, #+0]
    317              appState = APP_IN_NETWORK_STATE;
   \                     ??ZDO_StartNetworkConf_1: (+1)
   \   0000003A   0x2004             MOVS     R0,#+4
   \   0000003C   0x7060             STRB     R0,[R4, #+1]
    318          
    319              identifyUpdateCommissioningState(true, false);
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x.... 0x....      BL       identifyUpdateCommissioningState
    320          
    321              if (!restored && startBindingAndFinding)
   \   00000046   0x7960             LDRB     R0,[R4, #+5]
   \   00000048   0x78E1             LDRB     R1,[R4, #+3]
   \   0000004A   0x2201             MOVS     R2,#+1
   \   0000004C   0x404A             EORS     R2,R2,R1
   \   0000004E   0x4302             ORRS     R2,R2,R0
   \   00000050   0xD123             BNE      ??ZDO_StartNetworkConf_2
    322              {
    323                invokeEzMode(appEzModeDone);
   \   00000052   0x....             LDR      R0,??DataTable8_5
   \   00000054   0x.... 0x....      BL       invokeEzMode
    324                startBindingAndFinding = false;
   \   00000058   0x70E5             STRB     R5,[R4, #+3]
   \   0000005A   0xE01E             B        ??ZDO_StartNetworkConf_2
    325              }
    326            }
    327            else
    328            {
    329              appState = APP_START_NETWORK_STATE;
   \                     ??ZDO_StartNetworkConf_0: (+1)
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x7060             STRB     R0,[R4, #+1]
    330              if (restored)
   \   00000060   0x7960             LDRB     R0,[R4, #+5]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD019             BEQ      ??ZDO_StartNetworkConf_2
    331              {
    332                uint8_t currentChannel;
    333          
    334                CS_ReadParameter(CS_NWK_LOGICAL_CHANNEL_ID, &currentChannel);
   \   00000066   0x4669             MOV      R1,SP
   \   00000068   0x2010             MOVS     R0,#+16
   \   0000006A   0x.... 0x....      BL       CS_ReadParameter
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x4669             MOV      R1,SP
   \   00000072   0x7809             LDRB     R1,[R1, #+0]
   \   00000074   0x4088             LSLS     R0,R0,R1
   \   00000076   0x6BA1             LDR      R1,[R4, #+56]
   \   00000078   0x4281             CMP      R1,R0
   \   0000007A   0xD105             BNE      ??ZDO_StartNetworkConf_3
    335                if (channelMask == (1ul << currentChannel))
    336                  CS_WriteParameter(CS_CHANNEL_MASK_ID, &channelMask);
   \   0000007C   0x3438             ADDS     R4,R4,#+56
   \   0000007E   0x0021             MOVS     R1,R4
   \   00000080   0x2019             MOVS     R0,#+25
   \   00000082   0x.... 0x....      BL       CS_WriteParameter
   \   00000086   0xE004             B        ??ZDO_StartNetworkConf_4
    337                else
    338                  CS_WriteParameter(CS_CHANNEL_MASK_ID, &(ChannelsMask_t){1ul << currentChannel}); // limit channel mask to current channel only
   \                     ??ZDO_StartNetworkConf_3: (+1)
   \   00000088   0x9001             STR      R0,[SP, #+4]
   \   0000008A   0xA901             ADD      R1,SP,#+4
   \   0000008C   0x2019             MOVS     R0,#+25
   \   0000008E   0x.... 0x....      BL       CS_WriteParameter
    339                /* Make end device try to rejoin to any device on the same network it was before reset.
    340                  Rejoin is performed on the channel which was used before reset first time, then on all channels
    341                  from channel mask if rejoin on the initial channel fails. */
    342                setDeviceJoinParameters(true, true);
   \                     ??ZDO_StartNetworkConf_4: (+1)
   \   00000092   0x2101             MOVS     R1,#+1
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0x.... 0x....      BL       setDeviceJoinParameters
    343              }
    344            }
    345          }
   \                     ??ZDO_StartNetworkConf_2: (+1)
   \   0000009A   0xB005             ADD      SP,SP,#+20
   \   0000009C   0xBD30             POP      {R4,R5,PC}       ;; return
    346          
    347          /**************************************************************************//**
    348          \brief Starts network
    349          ******************************************************************************/
    350          static void startNetwork(void)
    351          {
    352            if (MAX_ATTEMPS_TO_ENTER_NETWORK == startNetworkAttempts++)
    353              return;
    354          
    355            zdoStartNetworkReq.ZDO_StartNetworkConf = ZDO_StartNetworkConf;
    356            ZDO_StartNetworkReq(&zdoStartNetworkReq);
    357          }
    358          
    359          /**************************************************************************//**
    360          \brief Performs operations with network address which depends
    361            static or dinamyc on addressing type
    362          
    363          \returns device type.
    364          *******************************************************************************/
    365          static DeviceType_t detectNwkAddrAndDevType(void)
    366          {
    367            DeviceType_t deviceType;
    368          #if (1 == CS_NWK_UNIQUE_ADDR)
    369            ShortAddr_t nwkAddr;
    370          
    371            // Read NWK address as dipswitch's state.
    372            nwkAddr = NWK_NODE_ADDRESS;
    373            if (0 == nwkAddr)
    374              deviceType = DEVICE_TYPE_COORDINATOR;
    375            else
    376              deviceType = DEVICE_TYPE_ROUTER;
    377            // Set parameter to config server
    378            CS_WriteParameter(CS_NWK_ADDR_ID, &nwkAddr);
    379          #else // (1 != CS_NWK_UNIQUE_ADDR)
    380            deviceType = APP_DEVICE_TYPE;
    381          #endif // (1 == CS_NWK_UNIQUE_ADDR)
    382            return deviceType;
    383          }
    384          
    385          /**************************************************************************//**
    386          \brief Confirm on ZDO Reset Network
    387          
    388          \param[in] conf - confiramtion parameters
    389          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    390          static void zdoResetNwkConf(ZDO_ResetNetworkConf_t *conf)
    391          {
   \                     zdoResetNwkConf: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    392            (void)conf;
    393            identifyUpdateCommissioningState(false, false);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       identifyUpdateCommissioningState
    394            startNetworkAttempts = 0;
   \   0000000A   0x....             LDR      R0,??DataTable8
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x7081             STRB     R1,[R0, #+2]
    395            appState = APP_INITIAL_STATE;
   \   00000010   0x7041             STRB     R1,[R0, #+1]
    396            SYS_PostTask(APL_TASK_ID);
   \   00000012   0x2080             MOVS     R0,#+128
   \   00000014   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \   00000016   0x.... 0x....      BL       SYS_PostTask
    397          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    398          
    399          /**************************************************************************//**
    400          \brief updates network join parameters for end devices & Routers
    401          
    402          \param[in] discoverNetworks - NWK layer will performs active scan to find network,
    403            if it is true, NWK will try to join to neighbors from neighbor table if false;
    404          \param[in] clearNeighborTable - The flag indicates that the neighbor table
    405            must be cleared or not before joining.
    406          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    407          static void setDeviceJoinParameters(bool discoverNetworks, bool clearNeighborTable)
    408          {
   \                     setDeviceJoinParameters: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    409            NWK_JoinControl_t joinControl;
    410            DeviceType_t deviceType;
    411          
    412            CS_ReadParameter(CS_DEVICE_TYPE_ID, &deviceType);
   \   00000006   0x4669             MOV      R1,SP
   \   00000008   0x2021             MOVS     R0,#+33
   \   0000000A   0x.... 0x....      BL       CS_ReadParameter
    413          
    414            if (DEVICE_TYPE_END_DEVICE == deviceType)
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x7801             LDRB     R1,[R0, #+0]
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0xA801             ADD      R0,SP,#+4
   \   00000016   0x2902             CMP      R1,#+2
   \   00000018   0xD106             BNE      ??setDeviceJoinParameters_0
    415            {
    416              joinControl.annce = true;
   \   0000001A   0x70C2             STRB     R2,[R0, #+3]
    417              joinControl.discoverNetworks = discoverNetworks;
   \   0000001C   0x7084             STRB     R4,[R0, #+2]
    418              joinControl.secured = true;
   \   0000001E   0x7042             STRB     R2,[R0, #+1]
    419              joinControl.method = NWK_JOIN_VIA_REJOIN;
   \   00000020   0x2103             MOVS     R1,#+3
   \   00000022   0x7001             STRB     R1,[R0, #+0]
    420              joinControl.clearNeighborTable = clearNeighborTable;
   \   00000024   0x7105             STRB     R5,[R0, #+4]
    421              CS_WriteParameter(CS_JOIN_CONTROL_ID, &joinControl);
   \   00000026   0xE006             B        ??setDeviceJoinParameters_1
    422            }
    423            else if (DEVICE_TYPE_ROUTER == deviceType) /* arguments are not valid for router device */
   \                     ??setDeviceJoinParameters_0: (+1)
   \   00000028   0x2901             CMP      R1,#+1
   \   0000002A   0xD108             BNE      ??setDeviceJoinParameters_2
    424            {
    425              joinControl.annce = false;
   \   0000002C   0x2100             MOVS     R1,#+0
    426              joinControl.discoverNetworks = false;
   \   0000002E   0x8041             STRH     R1,[R0, #+2]
    427              joinControl.secured = true;
   \   00000030   0x7042             STRB     R2,[R0, #+1]
    428              joinControl.method = NWK_JOIN_VIA_COMMISSIONING;
   \   00000032   0x7002             STRB     R2,[R0, #+0]
    429              joinControl.clearNeighborTable = false;
   \   00000034   0x7101             STRB     R1,[R0, #+4]
    430              CS_WriteParameter(CS_JOIN_CONTROL_ID, &joinControl);
   \                     ??setDeviceJoinParameters_1: (+1)
   \   00000036   0xA901             ADD      R1,SP,#+4
   \   00000038   0x2036             MOVS     R0,#+54
   \   0000003A   0x.... 0x....      BL       CS_WriteParameter
    431            }
    432          }
   \                     ??setDeviceJoinParameters_2: (+1)
   \   0000003E   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    433          
    434          /**************************************************************************//**
    435          \brief Leave indication listener routine.
    436          
    437          \param[in] eventId - id of raised event;
    438          \param[in] data    - event's data.
    439          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    440          static void  nwkLeaveIndHandler(SYS_EventId_t eventId, SYS_EventData_t data)
    441          {
    442            resetToFactoryNew = true;
   \                     nwkLeaveIndHandler: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR      R1,??DataTable8
   \   00000004   0x7108             STRB     R0,[R1, #+4]
    443          
    444            (void)eventId;
    445            (void)data;
    446          }
   \   00000006   0x4770             BX       LR               ;; return
    447          
    448          /**********************************************************************//**
    449          \brief Main - C program main start function
    450          **************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    451          int main(void)
    452          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    453            SYS_SysInit();
   \   00000002   0x.... 0x....      BL       SYS_SysInit
    454          
    455            for (;;)
    456            {
    457              SYS_RunTask();
   \                     ??main_0: (+1)
   \   00000006   0x.... 0x....      BL       SYS_RunTask
   \   0000000A   0xE7FC             B        ??main_0
    458          #if defined ZAPPSI_HOST && defined WIN
    459              pollKeyboard();
    460          #endif
    461            }
    462          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     appDeviceState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0xFFFFFFFA         DC32     0xFFFFFFFA,0xFFFFFFFF
   \              0xFFFFFFFF   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     SYS_taskFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     ZDO_StartNetworkConf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x00004001         DC32     0x4001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     appEzModeDone

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x4E 0x65          DC8 "Network update status - 0x%02x\015\012"
   \              0x74 0x77    
   \              0x6F 0x72    
   \              0x6B 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x2D 0x20    
   \              0x30 0x78    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    463          
    464          // eof zclDevice.c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   APL_TaskHandler
         8   -> ZDO_StartNetworkReq
         8   -> appDeviceTaskHandler
         8   -> initApp
      16   SYS_PostTask
        16   -> halEndAtomic
        16   -> halStartAtomic
      48   ZDO_MgmtNwkUpdateNotf
        48   -> HAL_WarmReset
        48   -> PDS_DeleteAll
        48   -> SYS_PostTask
        48   -> __aeabi_memcpy4
        48   -> appSnprintf
        48   -> identifyUpdateCommissioningState
        48   -> resetEzModeInProgress
        48   -> setDeviceJoinParameters
      32   ZDO_StartNetworkConf
        32   -> CS_ReadParameter
        32   -> CS_WriteParameter
        32   -> SYS_PostTask
        32   -> identifyUpdateCommissioningState
        32   -> invokeEzMode
        32   -> setDeviceJoinParameters
       0   ZDO_WakeUpInd
       8   appRestart
         8   -> ZDO_ResetNetworkReq
         8   -> appStop
      40   initApp
        40   -> BSP_ReadUid
        40   -> CS_ReadParameter
        40   -> CS_WriteParameter
        40   -> PDS_IsAbleToRestore
        40   -> PDS_Restore
        40   -> PDS_StoreByEvents
        40   -> SYS_PostTask
        40   -> SYS_SubscribeToEvent
        40   -> appDeviceInit
        40   -> appIsInitiator
        40   -> appSecurityInit
        40   -> initEzModeManager
        40   -> setDeviceJoinParameters
       8   main
         8   -> SYS_RunTask
         8   -> SYS_SysInit
       0   nwkLeaveIndHandler
      24   setDeviceJoinParameters
        24   -> CS_ReadParameter
        24   -> CS_WriteParameter
       8   zdoResetNwkConf
         8   -> SYS_PostTask
         8   -> identifyUpdateCommissioningState


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       8  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
      36  ?_0
      60  APL_TaskHandler
      28  SYS_PostTask
      88  ZDO_MgmtNwkUpdateNotf
     158  ZDO_StartNetworkConf
       2  ZDO_WakeUpInd
     124  appDeviceState
          appState
          startNetworkAttempts
          startBindingAndFinding
          resetToFactoryNew
          restored
          zdoStartNetworkReq
          channelMask
          zdoResetNwkReq
          nwkLeaveIndListener
      30  appRestart
     228  initApp
      12  main
       8  nwkLeaveIndHandler
      64  setDeviceJoinParameters
      28  zdoResetNwkConf

 
 124 bytes in section .data
 770 bytes in section .text
 
 770 bytes of CODE memory
 124 bytes of DATA memory

Errors: none
Warnings: none
